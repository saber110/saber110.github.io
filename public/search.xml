<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GCP不能免密码登录</title>
      <link href="/posts/1793721376.html"/>
      <url>/posts/1793721376.html</url>
      
        <content type="html"><![CDATA[<p>GCP中的一台主力服务器一直不能使用ssh key进行免密码登录，最近正好有时间处理一下。</p><h2 id="官网解决方案"><a href="#官网解决方案" class="headerlink" title="官网解决方案"></a><a href="https://cloud.google.com/compute/docs/instances/access-overview" target="_blank" rel="noopener">官网解决方案</a></h2><ul><li><p>将元数据<code>enable-oslogin</code> 设为 <code>FALSE</code></p></li><li><p>生成ssh key</p><p>谷歌对ssh key 的长度要求为2048</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -f C:\Users\&lt;WINDOWS_USER&gt;\.ssh\&lt;KEY_FILENAME&gt; -C &lt;VM_USER&gt; -b 2048</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">WINDOWS_USER:</span> Windows登录用户名.</span><br><span class="line"><span class="string">KEY_FILENAME:</span> ssh key文件名.</span><br><span class="line"><span class="string">VM_USER :</span> 要登陆的用户名，注意不能是之前已有的用户名。</span><br></pre></td></tr></table></figure></div></li><li><p>添加ssh key</p><p>将<code>C:\Users\&lt;WINDOWS_USER&gt;\.ssh\&lt;KEY_FILENAME&gt;</code>文件内容添加到GCP项目或者对应实例的ssh key中。</p></li></ul><p>理论上此时就已经可以使用<code>ssh -i &lt;PATH_TO_PRIVATE_KEY&gt; &lt;VM_USER&gt;@&lt;EXTERNAL_IP&gt;</code>来登录了，<strong>但是我的实例仍然不能登录</strong></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>我新建了<code>instance-2</code>，结果发现可以免密码登录，这只能说明是之前的实例<code>instance-1</code>内部环境出现了问题，通过分析对比<code>Serial log</code>发现<code>instance-2</code>的日志中有<code>debian google_guest_agent[378]: Updating keys for user VM_USER.</code>,但是<code>instance-1</code>的日志中根本没有关于<code>google_guest_agent</code>的任何内容。</p><p>搜索发现<a href="https://cloud.google.com/compute/docs/images/guest-environment" target="_blank" rel="noopener">文档</a>，当您使用 Google 提供的公共映像启动虚拟机 (VM) 实例时，系统会自动在虚拟机实例上安装访客环境。客机环境是读取元数据服务器内容以使虚拟机在 Compute Engine 上正常运行的一组脚本、守护程序和二进制文件。元数据服务器是用于将信息从客户端转移到客机操作系统的通信渠道。</p><p>也就是说要想将GCP中添加的元数据或者ssh-key同步到实例内部就必须有所谓的<em>客机环境</em>，接下来安装</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install google-compute-engine google-compute-engine-oslogin \</span><br><span class="line">google-guest-agent google-osconfig-agent</span><br></pre></td></tr></table></figure></div><p>重启解决问题</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> GCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我也不知道学个啥，把刚才学的复习一遍吧</title>
      <link href="/posts/3454308621.html"/>
      <url>/posts/3454308621.html</url>
      
        <content type="html"><![CDATA[<h2 id="我想试一下自己上传博客"><a href="#我想试一下自己上传博客" class="headerlink" title="我想试一下自己上传博客"></a>我想试一下自己上传博客</h2><p>可是好像又忘得差不多了。脑子仿佛一个漏斗，但是我认为多写几遍就好了 加油加油</p><ul><li><h3 id="忘记的几点内容"><a href="#忘记的几点内容" class="headerlink" title="忘记的几点内容"></a>忘记的几点内容</h3><ul><li>第一次没有成功的原因：没有仔细看小胡给的说明书，要先pull，同步对方的更改，再push上传</li><li>第二次没有成功的原因：vscode里面新建的文件夹没有写文件类型，后缀需是.md才可以</li><li>再次没有成功的原因是：改完忘记push了</li><li>md文件中，三个点后面的第一行并不是写内容的，三个点后面的那行是指定后面的内容在哪里执行的，或者后面的内容是什么语言之类的，比如说在命令行里面执行就可以写 bash</li><li>bash特指linux的命令行；windows的叫cmd</li><li>在vscode中打开md的预览，快捷键为ctrl + shift + p</li></ul></li><li><p>wo是个大迷糊</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 第一次使用blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这里是文章名称</title>
      <link href="/posts/3788239620.html"/>
      <url>/posts/3788239620.html</url>
      
        <content type="html"><![CDATA[<p>接下来写文章内容</p><h3 id="我爱你"><a href="#我爱你" class="headerlink" title="我爱你"></a>我爱你</h3><p>预览md文件的效果可以直接按ctrl + shift + p</p><h2 id="确定文章写完之后"><a href="#确定文章写完之后" class="headerlink" title="确定文章写完之后"></a>确定文章写完之后</h2><p>就开始上传</p>]]></content>
      
      
      
        <tags>
            
            <tag> example </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker gitlab修改域名</title>
      <link href="/posts/3783021433.html"/>
      <url>/posts/3783021433.html</url>
      
        <content type="html"><![CDATA[<ul><li>不要修改<code>gitlab.yml</code>，因为这个文件是自动生成的，修改了没用</li><li>域名是受<code>gitlab.rb</code>文件中的<code>external_url</code>控制的，修改此处</li><li>重新启动即可</li></ul><p>【注】查找文件命令<code>find / -name gitlab.yml</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab搭建CI环境</title>
      <link href="/posts/4096242045.html"/>
      <url>/posts/4096242045.html</url>
      
        <content type="html"><![CDATA[<p>前端时间使用GitHub的CI完成了Hexo的自动部署，使用起来感觉非常爽，很丝滑。今天有新项目过来，故考虑给私有GitLab配置CI环境。GitLab使用起来稍微麻烦一点，其不仅要编写<code>yml</code>文件来指定要运行的任务，而且需要搭建一个Runner来运行该任务。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>GitHub只需要编写<code>yml</code>文件，提交上去之后会直接在GitHub的服务器上运行</li><li>GitLab使用起来稍微麻烦一点，其不仅要编写<code>yml</code>文件来指定要运行的任务，而且需要搭建一个Runner来运行该任务</li><li>GitLab貌似编写<code>yml</code>文件要简单一点儿，直接把平时用的命令丢进去就可以了，但是目前没看到其对不同分支的操作，需要再熟悉</li></ul><h3 id="过程简述"><a href="#过程简述" class="headerlink" title="过程简述"></a>过程简述</h3><ul><li>编写<code>.gitlab-ci.yml</code>文件，<a href="http://jm.huhaobin.cn:151/help/ci/yaml/README.md" target="_blank" rel="noopener">官方教程</a></li><li>上传到gitlab会发现其CI状态为pending，这是因为没有给此项目配套Runner</li><li>安装Runner</li><li>将Runner绑定到该项目</li></ul><h3 id="安装gitlab-runner"><a href="#安装gitlab-runner" class="headerlink" title="安装gitlab-runner"></a>安装gitlab-runner</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name gitlab-runner --restart always \</span><br><span class="line">     -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">     -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">     gitlab/gitlab-runner:latest</span><br></pre></td></tr></table></figure></div><h3 id="绑定Runner到项目"><a href="#绑定Runner到项目" class="headerlink" title="绑定Runner到项目"></a>绑定Runner到项目</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it  -v /srv/gitlab-runner/config:/etc/gitlab-runner \</span><br><span class="line">     -v /var/run/docker.sock:/var/run/docker.sock \</span><br><span class="line">     gitlab/gitlab-runner:latest register</span><br></pre></td></tr></table></figure></div><ul><li>接下来要输入<strong>项目</strong>的而不是管理界面的<code>Settings -&gt; CI\CD -&gt; Runners -&gt; Expand -&gt; Set up a specific Runner manually -&gt; URL</code> 以及其<code>token</code></li><li><code>runner executor</code>中使用<code>docker</code></li><li><code>default image</code> 可随便使用，例如<code>Ruby:2.3</code></li></ul><h3 id="管理界面Runner报错500"><a href="#管理界面Runner报错500" class="headerlink" title="管理界面Runner报错500"></a>管理界面Runner报错500</h3><p>通过查看日志<code>production.log</code>，确定问题出在备份恢复时没有对token进行恢复。解决办法为：</p><ul><li>登入gitlab docker<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gitlab bash</span><br></pre></td></tr></table></figure></div></li><li>使用rail进行重置密钥，注意，rail进入很慢很慢，耐心等待<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-- a. Reset CI/CD variables</span><br><span class="line">gitlab-rails dbconsole</span><br><span class="line">SELECT * FROM public.<span class="string">"ci_group_variables"</span>;</span><br><span class="line">SELECT * FROM public.<span class="string">"ci_variables"</span>;</span><br><span class="line">DELETE FROM ci_group_variables;</span><br><span class="line">DELETE FROM ci_variables;</span><br><span class="line"></span><br><span class="line">-- b. Reset runner registration tokens</span><br><span class="line">-- Clear project tokens</span><br><span class="line">UPDATE projects SET runners_token = null, runners_token_encrypted = null;</span><br><span class="line">-- Clear group tokens</span><br><span class="line">UPDATE namespaces SET runners_token = null, runners_token_encrypted = null;</span><br><span class="line">-- Clear instance tokens</span><br><span class="line">UPDATE application_settings SET runners_registration_token_encrypted = null;</span><br><span class="line">UPDATE application_settings SET encrypted_ci_jwt_signing_key = null;</span><br><span class="line">-- Clear runner tokens</span><br><span class="line">UPDATE ci_runners SET token = null, token_encrypted = null;</span><br><span class="line"></span><br><span class="line">-- c. Reset pending pipeline <span class="built_in">jobs</span></span><br><span class="line">-- Clear build tokens</span><br><span class="line">UPDATE ci_builds SET token = null, token_encrypted = null;</span><br><span class="line"></span><br><span class="line">-- d. Fix project integrations</span><br><span class="line">-- truncate web_hooks table</span><br><span class="line">TRUNCATE web_hooks CASCADE;</span><br></pre></td></tr></table></figure></div></li><li>重启gitlab<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl restart</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自动部署</title>
      <link href="/posts/3636034258.html"/>
      <url>/posts/3636034258.html</url>
      
        <content type="html"><![CDATA[<p>继上篇文章将hexo搭到docker里面之后，又想偷懒。因为docker部署在服务器上，所以写博客的时候要远程写，写完还要登录服务器去发布博客，虽然解决了要搭环境的问题，但是使用起来还是不太方便。于是乎我就想啊，能不能有一种方法既可以备份我的源文件，又可以不用去手动发布，还不依赖于服务器呢？</p><h2 id="Github-Actions"><a href="#Github-Actions" class="headerlink" title="Github Actions"></a>Github Actions</h2><p>经过初步了解，Github Actions完全能够满足我的需求，Github Actions 可以很方便实现 CI/CD 工作流，类似 Travis 的用法，来帮我们完成一些工作，比如实现自动化测试、打包、部署等操作。当我们运行 Jobs 时，它会创建一个容器 (runner)，容器支持：Ubuntu、Windows 和 MacOS 等系统，在容器中我们可以安装软件，利用安装的软件帮我们处理一些数据，然后把处理好的数据推送到某个地方。</p><hr><p>简单理解，其会创建一个类似于容器的东西用来临时运行指令，并且可以做到与repo进行数据互通。</p><hr><p>本文参考<a href="https://sanonz.github.io/2020/deploy-a-hexo-blog-from-github-actions/" target="_blank" rel="noopener">利用 Github Actions 自动部署 Hexo 博客</a>，并且结合Github最近的改动（master默认分支改为main）做了少许适配。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><ul><li>源文件仓库<code>hexo</code>，用来保存所有源文件，可以设为private</li><li>博客静态文件仓库<code>username.github.io</code></li></ul><h2 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h2><h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f github-deploy-key</span><br></pre></td></tr></table></figure></div><p>如无特殊要求，一路回车即可。在当前文件夹下面即可找到<code>github-deploy-key</code>和<code>github-deploy-key.pub</code>两个文件。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li><p><code>hexo</code>仓库</p><p>复制 <code>github-deploy-key</code> 文件内容，在 <code>hexo</code> 仓库 <code>Settings -&gt; Secrets -&gt; Add a new secret</code> 页面上添加。</p><p>在 <code>Name</code> 输入框填写 <code>HEXO_DEPLOY_PRI。</code><br>在 <code>Value</code> 输入框填写 <code>github-deploy-key</code> 文件内容。</p></li><li><p><code>username.github.io</code>仓库<br>复制 <code>github-deploy-key.pub</code> 文件内容，在 <code>username.github.io</code> 仓库 <code>Settings -&gt; Deploy keys -&gt; Add deploy key</code> 页面上添加。</p><p>在 <code>Title</code> 输入框填写 <code>HEXO_DEPLOY_PUB。</code><br>在 <code>Key</code> 输入框填写<code>github-deploy-key.pub</code> 文件内容。<br>勾选 <code>Allow write access</code> 选项。</p><h3 id="设置Github-Actions"><a href="#设置Github-Actions" class="headerlink" title="设置Github Actions"></a>设置Github Actions</h3></li></ol><ul><li><p>在 <code>hexo</code> 仓库根目录下创建 <code>.github/workflows/deploy.yml</code>文件，目录结构如下。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">blog (repository)</span><br><span class="line">└── .github</span><br><span class="line">    └── workflows</span><br><span class="line">        └── deploy.yml</span><br></pre></td></tr></table></figure></div></li><li><p>在 <code>deploy.yml</code> 文件中粘贴以下内容。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">CI</span>  <span class="comment">#workflow名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 当hexo仓库的main分支发生更改的时候触发CI</span></span><br><span class="line"><span class="comment"># Github于去年十月将仓库的默认分支改成了main，所以新建的仓库默认分支为main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">GIT_USER:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">GIT_EMAIL:</span> <span class="string">your_email</span></span><br><span class="line"><span class="attr">THEME_REPO:</span> <span class="string">your_theme_repo</span> <span class="comment">#形式为sanonz/hexo-theme-concise，这就意味着需要给主题新建一个仓库</span></span><br><span class="line"><span class="attr">THEME_BRANCH:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">DEPLOY_REPO:</span> <span class="string">user/username.github.io</span> <span class="comment">#要部署到的仓库</span></span><br><span class="line"><span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span> <span class="comment"># 部署的分支，本人此前已有该仓库，使用master分支。若使用main分支则需修改为main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> <span class="string">[ubuntu-latest]</span></span><br><span class="line">        <span class="attr">node_version:</span> <span class="string">[12.x]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">        <span class="comment"># 将该仓库checkout到临时容器中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将主题仓库checkout到临时容器中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">theme</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.THEME_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">themes/concise</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将静态文件仓库checkout到临时容器中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$HEXO_DEPLOY_PRI"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">        <span class="string">cp</span> <span class="string">_config.theme.yml</span> <span class="string">themes/concise/_config.yml</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></div></li><li><p>复制主题配置文件<br>将主题配置文件<code>themes/your_theme/_config.yml</code>复制到该仓库的根目录下面，并改名为<code>_config.theme.yml</code></p><hr><p>此种做法的好处是将<code>theme</code>与其他文件分离，可以做到更加简洁。如果朋友们觉得比较麻烦，可以使用下面的<code>deploy.yml</code>，其不再需要新建<code>theme</code>仓库，将theme与源文件一起存放</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">```yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">CI</span>  <span class="comment">#workflow名称</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 当hexo仓库的main分支发生更改的时候触发CI</span></span><br><span class="line"><span class="comment"># Github于去年十月将仓库的默认分支改成了main，所以新建的仓库默认分支为main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">GIT_USER:</span> <span class="string">username</span></span><br><span class="line"><span class="attr">GIT_EMAIL:</span> <span class="string">your_email</span></span><br><span class="line"><span class="attr">DEPLOY_REPO:</span> <span class="string">user/username.github.io</span> <span class="comment">#要部署到的仓库</span></span><br><span class="line"><span class="attr">DEPLOY_BRANCH:</span> <span class="string">master</span> <span class="comment"># 部署的分支，本人此前已有该仓库，使用master分支。若使用main分支则需修改为main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span> <span class="string">and</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.os</span> <span class="string">&#125;&#125;</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> <span class="string">[ubuntu-latest]</span></span><br><span class="line">        <span class="attr">node_version:</span> <span class="string">[12.x]</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">        <span class="comment"># 将该仓库checkout到临时容器中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将静态文件仓库checkout到临时容器中</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_REPO</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">$&#123;&#123;</span> <span class="string">env.DEPLOY_BRANCH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">$&#123;&#123;</span> <span class="string">matrix.node_version</span> <span class="string">&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">$&#123;&#123;secrets.HEXO_DEPLOY_PRI&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">"Asia/Shanghai"</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">"$HEXO_DEPLOY_PRI"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure></div><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3></li><li><p>将<code>hexo</code>源文件全部移入<code>hexo</code>仓库</p></li><li><p>新建文件<code>source/_posts/new.md</code></p></li><li><p>写入内容</p></li><li><p>提交到该仓库<code>main</code>分支</p></li></ul><h3 id="查看GitHub-Action任务"><a href="#查看GitHub-Action任务" class="headerlink" title="查看GitHub Action任务"></a>查看GitHub Action任务</h3><p>在此仓库 <code>Actions</code> 页面查看当前 <code>task</code>。</p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p><code>hexo</code> 在自动化部署之后会自动删除<code>CNAME</code>，造成不能用自定义域名访问博客，解决办法是将其放在<code>source</code>文件夹下面即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 2 - Making &amp; Using Objects C+学习01</title>
      <link href="/posts/109245409.html"/>
      <url>/posts/109245409.html</url>
      
        <content type="html"><![CDATA[<h1 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h1><ul><li>预处理：提高代码的可读性</li><li>编译器<ul><li>解析预处理过的代码：解析成解析树</li><li>全局优化器：产生更小更快的代码</li><li>代码产生器：遍历解析树产生汇编语言或机器语言，汇编语言会紧接着被运行。他们都能产生.o文件</li><li>有时候会有peephole optimizer过程来扫描重复的汇编代码</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Thinking in C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chapter 1-Introduction to Objects C++学习</title>
      <link href="/posts/681064763.html"/>
      <url>/posts/681064763.html</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction-to-Objects"><a href="#Introduction-to-Objects" class="headerlink" title="Introduction to Objects"></a>Introduction to Objects</h1><ol><li><p>每个对象都有接口 =&gt; 对象内方法</p></li><li><p>接口里面的代码称为接口的实现</p></li><li><p>接口权限</p><ul><li>public 对所有人可用</li><li>private 只有类本身可用</li><li>protected 子类可以访问父类的protected接口</li></ul></li><li><p>类重用的方法是继承，比如汽车有发动机和轮胎，那么他就可以继承发动机和轮胎类，然后再发展自己的方法。</p></li><li><p>接口重用</p><ul><li>父类包含子类共享的所有特征</li><li>子类自动共享父类的接口（方法），还可以自己定义自己的方法<br><img src="../images/reusingofinterface.png" alt=""></li><li>子类可以重写父类的方法</li><li>一般父类只包含子类共同的属性，因此父类理想不会被实例化，因为所有的地方可以用适合的子类来实例化</li></ul></li><li><p>生命周期</p><ul><li>静态变量：全局存在，存储在静态变量区。在类外面声明的变量</li><li>动态变量（局部变量）：在类或者方法使用的时候被创建，使用完被销毁</li><li>堆： 使用new来创建，delete来删除。要记得释放内存（可以选择使用垃圾回收机制）。分配内存的时间比栈要长很多</li></ul></li><li><p>异常处理</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thinking in C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用zmirror搭建镜像站</title>
      <link href="/posts/2159013759.html"/>
      <url>/posts/2159013759.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展/boot分区</title>
      <link href="/posts/3711347257.html"/>
      <url>/posts/3711347257.html</url>
      
        <content type="html"><![CDATA[<h3 id="how-to-expend-the-capicity-of-boot-partition-in-linux"><a href="#how-to-expend-the-capicity-of-boot-partition-in-linux" class="headerlink" title="how to expend the capicity of /boot partition in linux"></a>how to expend the capicity of /boot partition in linux</h3><ol><li>use the Disks offered in the System to build a partition for new /boot, and click “Mount the filesystem” signed by a triangle icon</li><li>copy all the things form old /boot partition to new /boot partition . new /boot partition willbe mounted in /mnt</li><li>click the old /boot prtition in Disks, click buttons as following</li></ol><ul><li>“More actions” signed by a gear</li><li>“Edit Mount Options…”, meanwhile, wtrite the config down for later</li><li>uncheck “Mount at Startup”</li><li>modify “Mount Point” to something else, such as “/boot_old”</li><li>and click OK</li></ul><ol start="4"><li>click the old /boot prtition in Disks, and “Unmount the filesystem”. click buttons as following</li></ol><ul><li>“More actions” signed by a gear, and click “Edit Partition” modify “Type” to linux filesystem and Change</li><li>“Edit Mount Options…” copy the config form old one<br>= OK</li></ul><ol start="5"><li>and now it can work almost, but there is something broken likely.to solve this , you can use the Boot Repair. here is its brochure:</li></ol><h3 id="installation-Boot-Repair"><a href="#installation-Boot-Repair" class="headerlink" title="installation Boot Repair"></a>installation Boot Repair</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:yannubuntu/boot-repair</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y boot-repair &amp;&amp; boot-repair</span><br></pre></td></tr></table></figure></div><ol><li>Recommended repair</li></ol><ul><li><p>launch Boot-Repair from either :</p></li><li><p>the Dash (the Ubuntu logo at the top-left of the screen)</p></li><li><p>or by typing ‘boot-repair’ in a terminal</p></li><li><p>Then click the “Recommended repair” button. When repair is finished, note the URL (paste.ubuntu.com/XXXXX) that appeared on a paper, then reboot and check if you recovered access to your OSs.</p></li><li><p>If the repair did not succeed, indicate the URL to people who help you by email or forum.</p></li><li><p>if you have trouble in booting, if you computer is booted by grub2, here is you solutions:</p><ul><li>ls</li><li>find the boot file location</li><li>set root = (hd0, gpt0)<br>(hd0,gpt0) is your boot file location</li><li>linux <code>/path/to/your/bootfile(vmlinuz*)</code> <code>root=/dev/sda0</code></li><li><code>/dev/sda0</code> is your root location</li><li>initrd /path/to/your/bootfile(initrd*)</li><li>boot</li></ul></li></ul><p>now you can boot your computer.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络1</title>
      <link href="/posts/1676366600.html"/>
      <url>/posts/1676366600.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>复试准备</title>
      <link href="/posts/757859542.html"/>
      <url>/posts/757859542.html</url>
      
        <content type="html"><![CDATA[<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ZuSort</span><span class="params">(testee t1, testee t2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t1.score == t2.score) <span class="keyword">return</span> t1.id &lt; t2.id;</span><br><span class="line"><span class="keyword">return</span> t1.score &gt; t2.score;</span><br><span class="line">&#125;</span><br><span class="line">sort(result, result + resultPos, ZuSort); <span class="comment">// result[MAX]</span></span><br></pre></td></tr></table></figure></div><h4 id="时间、日期等周期性数据应该从最小位自加，逐步控制更高一层的周期"><a href="#时间、日期等周期性数据应该从最小位自加，逐步控制更高一层的周期" class="headerlink" title="时间、日期等周期性数据应该从最小位自加，逐步控制更高一层的周期"></a>时间、日期等周期性数据应该从最小位自加，逐步控制更高一层的周期</h4><h4 id="空间换取时间：-散列"><a href="#空间换取时间：-散列" class="headerlink" title="空间换取时间：(散列)"></a>空间换取时间：(散列)</h4><ul><li>查找集合N 中的元素在集合M{2,6,7}中是否出现以及出现的次数</li><li>可以用bool M[MAX], M[2] = true; M[6] = true; M[7] = true;</li><li>求出现的次数时，可以用int M[MAX], M[2] ++; M[6] ++; M[7] ++;</li></ul><h4 id="老哥，一定要记得多组数组共享变量的清零"><a href="#老哥，一定要记得多组数组共享变量的清零" class="headerlink" title="老哥，一定要记得多组数组共享变量的清零"></a>老哥，一定要记得多组数组共享变量的清零</h4><h4 id="利用printf-“-2f-n”-ans-格式化输出保留小数点两位"><a href="#利用printf-“-2f-n”-ans-格式化输出保留小数点两位" class="headerlink" title="利用printf(“%.2f\n” ,ans);格式化输出保留小数点两位"></a>利用printf(“%.2f\n” ,ans);格式化输出保留小数点两位</h4><h4 id="所有单调性函数求解问题都可以用二分法"><a href="#所有单调性函数求解问题都可以用二分法" class="headerlink" title="所有单调性函数求解问题都可以用二分法"></a>所有单调性函数求解问题都可以用二分法</h4><h4 id="最大公约数用辗转相除法"><a href="#最大公约数用辗转相除法" class="headerlink" title="最大公约数用辗转相除法"></a>最大公约数用辗转相除法</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcd(a, b) = gcd(b, a%b);</span><br><span class="line">gcd(a, <span class="number">0</span>) = a</span><br></pre></td></tr></table></figure></div><h4 id="最小公倍数的计算"><a href="#最小公倍数的计算" class="headerlink" title="最小公倍数的计算"></a>最小公倍数的计算</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lcm(a, b) = (a/ gcd(a, b)) * b;</span><br></pre></td></tr></table></figure></div><h4 id="分数表示"><a href="#分数表示" class="headerlink" title="分数表示"></a>分数表示</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">franction</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> up,  down;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>我们约定，若分母(down)小于0,则令分子，分母为本身的相反数<br>约分即是分子分母同除以他们的最大公约数<br>若分子为0，则令分母为1<br>带分数：整数部分是up/down, 分子是abs(up)%down, 分母是down</p><h4 id="求素数的方法"><a href="#求素数的方法" class="headerlink" title="求素数的方法:"></a>求素数的方法:</h4><ul><li>方法一：<ul><li>如果n对i, (i 属于[2,sqrt(n)]) 有约数（余数为0），则n不是素数</li><li>如果n对i, (i 属于[2,sqrt(n)]) 没有约数（余数不为0），则n是素数</li></ul></li><li>方法二：<ul><li>最小的素数的倍数肯定不是素数</li></ul><ul><li>2是素数</li><li>循环筛选<h4 id="求质因子的方法"><a href="#求质因子的方法" class="headerlink" title="求质因子的方法"></a>求质因子的方法</h4>质因子要么全部在[2,sqrt(n)]， 要么只有一个在[sqrt(n), n]。将前面的小于sqrt(n)的质因子全部除掉，剩下的如果！=1，那就是大于sqrt（n）的唯一的质因子</li></ul></li></ul><h4 id="vector是一个边长数组"><a href="#vector是一个边长数组" class="headerlink" title="vector是一个边长数组"></a>vector是一个边长数组</h4><ul><li>set是一个内部自动有序（递增）且不含重复元素的容器</li><li>set只能通过迭代器来访问， set::iterator it // 通过* it访问内容</li><li>multiset可以处理元素不唯一的情况</li><li>unordered_set 处理只去重但不排序的需求，速度比set快得多</li></ul><h4 id="除了vector和string之外的STL都不支持-it-i-这种形式，只能通过图iteratorBianli-png形式来访问，"><a href="#除了vector和string之外的STL都不支持-it-i-这种形式，只能通过图iteratorBianli-png形式来访问，" class="headerlink" title="除了vector和string之外的STL都不支持*(it + i)这种形式，只能通过图iteratorBianli.png形式来访问，"></a>除了vector和string之外的STL都不支持*(it + i)这种形式，只能通过图iteratorBianli.png形式来访问，</h4><p>其他STL的各种操作都要通过迭代器来实现</p><h4 id="map可以通过it-gt-first来访问键，it-gt-second-来访问值。并且map内部会自动按键从小到大排列，"><a href="#map可以通过it-gt-first来访问键，it-gt-second-来访问值。并且map内部会自动按键从小到大排列，" class="headerlink" title="map可以通过it-&gt;first来访问键，it-&gt;second 来访问值。并且map内部会自动按键从小到大排列，"></a>map可以通过it-&gt;first来访问键，it-&gt;second 来访问值。并且map内部会自动按键从小到大排列，</h4><p>unordered_map 用来处理只映射而不排序的需求（用散列代替map中的红黑树）</p><h4 id="queue在top-pop前要先判断是否为空，"><a href="#queue在top-pop前要先判断是否为空，" class="headerlink" title="queue在top/pop前要先判断是否为空，"></a>queue在top/pop前要先判断是否为空，</h4><h4 id="pair可以将两个元素绑在一起合成一个新的元素"><a href="#pair可以将两个元素绑在一起合成一个新的元素" class="headerlink" title="pair可以将两个元素绑在一起合成一个新的元素"></a>pair可以将两个元素绑在一起合成一个新的元素</h4><ul><li>需要include 或者</li><li>可以使用p.first p.second来访问</li><li>可以用作二维排序，一维相等时比较第二维</li><li>pair可以用作map的插入键值对<h4 id="algorithm头文件下的有用函数"><a href="#algorithm头文件下的有用函数" class="headerlink" title="algorithm头文件下的有用函数"></a>algorithm头文件下的有用函数</h4></li><li>max(x,y) min(x,y)</li><li>abs(x) // 对整数求绝对值</li><li>fabs(x) // 对浮点数求绝对值</li><li>swap(x,y) //交换xy的值</li><li>find(x,y,c) // [x,y)查找元素c</li><li>reverse(it,it2) //将数组指针或者迭代器在[it,it2)之间的数组元素或者容器元素进行反转(逆序)</li><li>next_permutation(&amp;begin, &amp;end) // 给出序列[begin,end)在全排列中的下一个序列</li><li>fill() // 可以把容器或数组某一段区间赋为某个相同的值</li><li>对容器进行sort时，参数类型用容器的类型就好(对容器里面的元素进行排序)，实参一般要用迭代器</li><li>lower_bound(first, last, value) // 寻找数组或容器的[first, last)范围内第一个值大于或等于 value的元素的位置，返回指针或迭代器</li><li>upper_bound(first, last, value) // 寻找数组或容器的[first, last)范围内第一个值大于 value的元素的位置，返回指针或迭代器<h4 id="求联通分量的个数或者树的个数用并查集"><a href="#求联通分量的个数或者树的个数用并查集" class="headerlink" title="求联通分量的个数或者树的个数用并查集"></a>求联通分量的个数或者树的个数用并查集</h4></li></ul><h4 id="错排公式"><a href="#错排公式" class="headerlink" title="错排公式"></a>错排公式</h4><p><code>F(n) = (n-1)*F(n-1) + (n-1)*F(n-2)</code></p><h4 id="主要数据结构的实现"><a href="#主要数据结构的实现" class="headerlink" title="主要数据结构的实现"></a>主要数据结构的实现</h4><h5 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h5><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span> , <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; , greater&lt;<span class="keyword">int</span>&gt;&gt; Q;</span><br></pre></td></tr></table></figure></div><h5 id="哈夫曼代价"><a href="#哈夫曼代价" class="headerlink" title="哈夫曼代价"></a>哈夫曼代价</h5><p><code>ans += a + b;</code></p><h5 id="最小生成树可以用并查集实现"><a href="#最小生成树可以用并查集实现" class="headerlink" title="最小生成树可以用并查集实现"></a>最小生成树可以用并查集实现</h5><h5 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h5><ul><li>一般用来求解最优解问题</li><li>将n元问题建模为n+1（自变量加结果）元问题的状态变化，通常需要一个n+1元结构体来做状态寄存；和一个原数据存储变量</li><li>一般每个样本点只用处理一次，注意处理次数和样品条件的剪枝<h5 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h5></li><li>一般用来求解是否有解</li><li>按层进行搜索和便历，故参数应该传层，递归的时候应该是层数加一，数据应该是本层数据取值i</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> oj </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>红米note增强版刷入android7.1</title>
      <link href="/posts/4162857404.html"/>
      <url>/posts/4162857404.html</url>
      
        <content type="html"><![CDATA[<h3 id="root"><a href="#root" class="headerlink" title="root"></a>root</h3><p>参考链接<a href="http://en.miui.com/thread-208274-1-1.html" target="_blank" rel="noopener">http://en.miui.com/thread-208274-1-1.html</a></p><p>基本上就是先下载HMnote1S.zip这个压缩包，然后打开系统更新点击右上角的三个点选择从安装包更新，选择之前下载的压缩包更新即可。重启之后即可获得root</p><h3 id="刷入twrp"><a href="#刷入twrp" class="headerlink" title="刷入twrp"></a>刷入twrp</h3><p>需要下载的东西</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;drive.google.com&#x2F;file&#x2F;d&#x2F;0B2sSKg3aizyzVXFQZVJ0UU5tTDg&#x2F;view?pref&#x3D;2&amp;pli&#x3D;1</span><br><span class="line">flashify app</span><br><span class="line">https:&#x2F;&#x2F;download.mokeedev.com&#x2F;?device&#x3D;gucci</span><br></pre></td></tr></table></figure></div><h3 id="刷入"><a href="#刷入" class="headerlink" title="刷入"></a>刷入</h3><p>下载完之后，打开flashify，刷入TWRP, 从文件安装，选择刚刚下载的recovery.img。刷入成功之后关机长按电源键和音量上键直至出现recovery界面<br>选择wipe，清除无用数据，至少做到双清。<br>返回到主界面选择install ，然后定位到 下载的Gucci即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问校内网资源</title>
      <link href="/posts/1589577150.html"/>
      <url>/posts/1589577150.html</url>
      
        <content type="html"><![CDATA[<h2 id="需求现状："><a href="#需求现状：" class="headerlink" title="需求现状："></a>需求现状：</h2><p>回家之后需要访问学校内网资源学习，手头闲置一枚树莓派，用树莓派作转发服务器.</p><h2 id="问题简述："><a href="#问题简述：" class="headerlink" title="问题简述："></a>问题简述：</h2><ul><li>树莓派无公网ip，故需要先对树莓派进行内网穿透. 使用frp</li><li>通过树莓派进行http转发</li></ul><h2 id="设备要求："><a href="#设备要求：" class="headerlink" title="设备要求："></a>设备要求：</h2><p>公网ip的服务器一台，树莓派一个</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="内网穿透-参考知乎"><a href="#内网穿透-参考知乎" class="headerlink" title="内网穿透 参考知乎"></a>内网穿透 参考<a href="https://zhuanlan.zhihu.com/p/36156129" target="_blank" rel="noopener">知乎</a></h3><h4 id="公网服务器配置"><a href="#公网服务器配置" class="headerlink" title="公网服务器配置"></a>公网服务器配置</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf frp_0.22.0_linux_amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> frp_0.22.0_linux_amd64</span><br><span class="line">nano frps.ini</span><br></pre></td></tr></table></figure></div><p>配置内容如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">dashboard_port = dashboard_port_number</span><br><span class="line">dashboard_user = dashboard_user_name</span><br><span class="line">dashboard_pwd = dashboard_pwd_value</span><br><span class="line">privilege_token = privilege_token_value</span><br><span class="line">···</span><br><span class="line">ctrl+o 保存，之后 回车 确认，然后 ctrl+x 退出。</span><br><span class="line"></span><br><span class="line">参数说明</span><br><span class="line">```bash</span><br><span class="line">bind_port：绑定的端口，需要与客户端中 server_port 参数保持一致</span><br><span class="line">vhost_http_port：虚拟主机运行在本机的端口，如果 vps 有服务占用了端口，应当更换</span><br><span class="line">dashboard_port：frp 后台服务页面的端口，如果设置 8000，便可通过 http://yourip:8000 来访问 frps 的后台页面</span><br><span class="line">dashboard_user：frp 后台服务页面的管理员用户名</span><br><span class="line">dashboard_pwd：frp 后台服务页面的管理员密码</span><br><span class="line">privilege_token：自定义值，必须与客户端中的 privilege_token 保持一致</span><br></pre></td></tr></table></figure></div><p>配置完成之后，便可以通过如下命令启动 frps：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></div><p>为了让服务器一直运行 frp 服务，这里还可以将它添加到开机自启脚本中，命令行如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure></div><p>在 exit 0 前一行，写上命令，其中<your_frp_path>为你 frp 存放的目录位置，即：</your_frp_path></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;your_frp_path&gt;/frps -c &lt;your_frp_path&gt;/frps.ini</span><br></pre></td></tr></table></figure></div><p>ctrl+o 保存，之后 回车 确认，然后 ctrl+x 退出。</p><h4 id="客户端配置-frpc"><a href="#客户端配置-frpc" class="headerlink" title="客户端配置 - frpc"></a>客户端配置 - frpc</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.22.0/frp_0.22.0_linux_arm.tar.gz</span><br><span class="line">tar -zxvf frp_0.22.0_linux_arm.tar.gz</span><br><span class="line"><span class="built_in">cd</span> frp_0.22.0_linux_arm</span><br><span class="line">nano frpc.ini</span><br></pre></td></tr></table></figure></div><p>配置文件内容如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = your_server_ip</span><br><span class="line">server_port = 7000</span><br><span class="line">privilege_token = privilege_token_value</span><br><span class="line">login_fail_exit = <span class="literal">false</span></span><br><span class="line">​</span><br><span class="line">[ssh]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line">​</span><br><span class="line">remote_port = remote_port_number</span><br></pre></td></tr></table></figure></div><p>ctrl+o 保存，之后 回车 确认，然后 ctrl+x 退出。</p><p>参数说明</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server_addr：服务器端的 ip</span><br><span class="line">server_port：服务器端的端口，即 bind_port</span><br><span class="line">privilege_token：同服务器端的 privilege_token 保持一致</span><br><span class="line">login_fail_exit：失败时自动重连</span><br><span class="line">remote_port：远程端口，即 ssh 连接树莓派时的端口</span><br></pre></td></tr></table></figure></div><p>配置完成之后，便可以通过如下命令启动 frps：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure></div><p>为了让树莓派一直运行 frp 服务，这里还可以将它添加到开机自启脚本中，命令行如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/rc.local</span><br></pre></td></tr></table></figure></div><p>在 exit 0 前一行，写上命令，其中<your_frp_path>为你 frp 存放的目录位置，即：</your_frp_path></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;your_frp_path&gt;/frps -c &lt;your_frp_path&gt;/frps.ini</span><br></pre></td></tr></table></figure></div><p>ctrl+o 保存，之后 回车 确认，然后 ctrl+x 退出。</p><h4 id="ssh-连接"><a href="#ssh-连接" class="headerlink" title="ssh 连接"></a>ssh 连接</h4><p>以上配置完成之后，就可以远程 ssh 连接到树莓派了。命令行如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -oPort=&lt;remote_port_number&gt; pi@&lt;your_server_ip&gt;</span><br></pre></td></tr></table></figure></div><p>其中，<remote_port_number>为树莓派配置中的 remote_port 参数值，<your_server_ip>为服务器 ip。</your_server_ip></remote_port_number></p><p><strong>注意</strong>：重启之后树莓派可能需要一到两分钟才能正常使用</p><h4 id="http-转发"><a href="#http-转发" class="headerlink" title="http 转发"></a>http 转发</h4><p>在树莓派上搭建ss服务端，自己电脑上搭建ss客户端即可，具体请参考</p><p>按照上述教程搭建完成之后，假设服务器端口为<your_ss_port>（默认为9702），<br>将下面内容添加到树莓派的 <code>frpc.ini</code>中</your_ss_port></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ssr]</span><br><span class="line"><span class="built_in">type</span> = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = your_ss_port</span><br><span class="line">remote_port = access_port</span><br></pre></td></tr></table></figure></div><p>参数说明</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_port: &lt;your_ss_port&gt;（默认为9702）</span><br><span class="line">remote_port: 自己电脑上的ss客户端连接树莓派时的端口哦</span><br></pre></td></tr></table></figure></div><p>重启树莓派，等待2-3分钟，电脑使用刚刚搭建的ss通路访问学校内网资源</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程</title>
      <link href="/posts/52063040.html"/>
      <url>/posts/52063040.html</url>
      
        <content type="html"><![CDATA[<h2 id="进程介绍"><a href="#进程介绍" class="headerlink" title="进程介绍"></a>进程介绍</h2><ol><li>进程的创建</li></ol><ul><li>原因：<ul><li>系统初始化</li><li>正在运行的进程执行了创建进程的系统调用</li><li>用户请求创建一个新进程</li><li>批处理作业的初始化</li></ul></li></ul><ol start="2"><li>进程的终止</li></ol><ul><li>原因：<ul><li>正常退出（自愿）</li><li>出错退出（自愿）</li><li>严重错误（非自愿）</li><li>被其他进程杀死（非自愿）</li></ul></li></ul><ol start="3"><li>进程的状态</li></ol><ul><li>运行态</li><li>就绪态</li><li>阻塞态</li></ul><ol start="4"><li>线程可以在内核和用户空间中进行管理，但不论是在哪儿都会引来很多问题</li></ol><h3 id="进程间通信（IPC）"><a href="#进程间通信（IPC）" class="headerlink" title="进程间通信（IPC）"></a>进程间通信（IPC）</h3><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>一个好的临界区解决方案需要具备以下四个条件：</p><ul><li>任何两个进程不能同时处于临界区</li><li>不应对CPU的速度和数目做任何假设</li><li>临界区外的进程不能阻塞其他进程</li><li>不能让进程在临界区外面无休止的等待</li></ul><h4 id="忙等待形式的互斥"><a href="#忙等待形式的互斥" class="headerlink" title="忙等待形式的互斥"></a>忙等待形式的互斥</h4><ol><li><p>关闭中断</p><p>在进入临界区之前先关中断，退出之后开中断。这样把开关中断的权限交给用户是不明智的</p></li><li><p>锁变量</p><p>设置一个共享锁变量，0表示临界区内没有进程，1表示有。每次进入之前先测试，如果此时为0则设置为1，退出临界区设置为0。遗憾的是这个方法也不是线程安全的</p></li><li><p>严格交替法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WHILE(TRUE)</span><br><span class="line">&#123;</span><br><span class="line">  WHILE(<span class="built_in">turn</span> != <span class="number">0</span>);</span><br><span class="line">  critical_region();</span><br><span class="line">  <span class="built_in">turn</span> = <span class="number">1</span>;</span><br><span class="line">  noncritical_region();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WHILE(TRUE)</span><br><span class="line">&#123;</span><br><span class="line">  WHILE(turn != 1);</span><br><span class="line">  critical_region();</span><br><span class="line">  turn = 0;</span><br><span class="line">  noncritical_region();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>整型变量turn的初值为零，用于跟踪轮到哪个进程进入临界区。一开始进程0检查turn，发现是0，所以进入临界区。同时进程1也在检查turn，不停的检查是否变为1。这样就产生了忙等待。还有一种情况就是进程0退出临界区并将turn设置为1，此时进程0和1都在忙非临界区的任务，但是进程0先忙完需要进入临界区，由于turn为1所以进程0不能进入临界区</p></li><li><p>Peterson解决方案</p></li><li><p>TSL语句</p></li><li><p>信号量</p><p>用一个整型变量来累计唤醒次数，供以后使用。<br>在这个解决方案中用了三个信号量。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">full</span> <span class="string">用来记录满的缓冲槽的数目，初值为0</span></span><br><span class="line"><span class="attr">empty</span> <span class="string">用来记录空的缓冲槽的数目，初值为缓冲区内槽的数目</span></span><br><span class="line"><span class="attr">mutex</span> <span class="string">用来确保生产者和消费者不会同时访问缓冲区，初值为1</span></span><br></pre></td></tr></table></figure></div><p>多个进程使用初值为1的信号量可以保证同时只有一个进程可以进入临界区，如果每个进程在进入临界区之前执行一个down，退出之后执行一个up就可以保证互斥</p></li><li><p>互斥</p><p>若不需要信号量的计数能力，有时可以使用信号量的另一个版本—-互斥<br>互斥是一个可以处于两态之一的变量：解锁(mutex_unlock)和加锁(mutex_lock)</p></li><li><p>管程</p></li><li><p>进程调度</p></li><li><p>批处理系统中的调度</p></li><li><p>先到先服务</p></li><li><p>最短作业优先</p></li><li><p>最短剩余时间优先</p></li><li><p>三级调度</p><ul><li>准入调度器</li><li>内存调度器</li><li>CPU调度器</li></ul></li><li><p>交互系统中的调度</p></li><li><p>时间片轮转调度</p></li><li><p>优先级调度</p><p>注意时常对优先级进行调整，防止低优先级的进程饿死</p></li><li><p>多重队列</p></li><li><p>最短进程优先（老化算法预估进程运行所需时间）</p></li><li><p>保证调度算法</p><ul><li>彩票调度算法</li><li>公平分享调度</li><li>实时系统调度</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> OS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3-mysqldb安装</title>
      <link href="/posts/3993308688.html"/>
      <url>/posts/3993308688.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install python3-mysqldb</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建ssr搭建ssr</title>
      <link href="/posts/872076193.html"/>
      <url>/posts/872076193.html</url>
      
        <content type="html"><![CDATA[<h3 id="服务部署"><a href="#服务部署" class="headerlink" title="服务部署"></a>服务部署</h3><ul><li><p>脚本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -<span class="keyword">y</span> install wget</span><br><span class="line"></span><br><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//softs.fun/Bash/ssr.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> ssr.<span class="keyword">sh</span> &amp;&amp; bash ssr.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></div></li><li><p>备用脚本：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -<span class="keyword">y</span> install wget</span><br><span class="line"></span><br><span class="line">wget -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/ToyoDAdoubi/doubi/master/ssr.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> ssr.<span class="keyword">sh</span> &amp;&amp; bash ssr.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></div></li><li><p>脚本安装<br>需要注意的有</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protocol 最好选择auth_chain_a</span><br><span class="line">obfs(混淆) 千万不要选择tls 有被墙的风险</span><br></pre></td></tr></table></figure></div></li><li><p>添加开机启动</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rc.local</span><br><span class="line"></span><br><span class="line">python /usr/<span class="built_in">local</span>/shadowsocksr/shadowsocks/server.py -c /etc/shadowsocksr/user-config.json a &amp;</span><br></pre></td></tr></table></figure></div></li><li><p>加速服务(BBR)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//github.<span class="keyword">com</span>/teddysun/across/raw/master/bbr.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">chmod +<span class="keyword">x</span> bbr.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">./bbr.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure></div></li><li><p>客户端地址</p><ul><li>windows<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;shadowsocksr-backup&#x2F;shadowsocksr-csharp&#x2F;releases&#x2F;download&#x2F;4.7.0&#x2F;ShadowsocksR-4.7.0-win.7z</span><br></pre></td></tr></table></figure></div></li><li>linux<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure></div></li><li>android<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks-android&#x2F;releases&#x2F;download&#x2F;v4.5.6&#x2F;shadowsocks--universal-4.5.6.apk</span><br></pre></td></tr></table></figure></div></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ssr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux网络连接后执行脚本</title>
      <link href="/posts/2497004773.html"/>
      <url>/posts/2497004773.html</url>
      
        <content type="html"><![CDATA[<p>在Debian/Ubuntu的发行版本里，网络建立前、后和网络断开前、后都会到/etc/network/里运行相应目录下的脚本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>-down.d -- 网络关闭前</span><br><span class="line"><span class="keyword">if</span>-post-down.d -- 网络关闭后</span><br><span class="line"><span class="keyword">if</span>-pre-up.d -- 网络建立前</span><br><span class="line"><span class="keyword">if</span>-up.d -- 网络建立后</span><br></pre></td></tr></table></figure></div><p>所以把自己的脚本放在<code>/etc/network/if-up.d/</code>目录下面就可以了</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux定时执行任务</title>
      <link href="/posts/2223700806.html"/>
      <url>/posts/2223700806.html</url>
      
        <content type="html"><![CDATA[<h2 id="用户级任务"><a href="#用户级任务" class="headerlink" title="用户级任务"></a>用户级任务</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure></div><ul><li><p>格式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min hour dayofmonth monthofyear dayofweek  <span class="built_in">command</span></span><br></pre></td></tr></table></figure></div></li><li><p>会进行语法检查</p><h2 id="系统级任务"><a href="#系统级任务" class="headerlink" title="系统级任务"></a>系统级任务</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/crontab</span><br></pre></td></tr></table></figure></div></li><li><p>格式</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min hour dayofmonth monthofyear dayofweek user <span class="built_in">command</span></span><br></pre></td></tr></table></figure></div></li><li><p>不会进行语法检查</p><h2 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h2></li><li><p>配置之后需要重启crond服务</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh反向代理进行内网穿透</title>
      <link href="/posts/967289922.html"/>
      <url>/posts/967289922.html</url>
      
        <content type="html"><![CDATA[<h3 id="公网主机配置"><a href="#公网主机配置" class="headerlink" title="公网主机配置"></a>公网主机配置</h3><ul><li>修改sshd的配置文件，<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure></div>在最后面添加GatewayPorts yes,重启sshd<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></table></figure></div>作用：设置反向代理的ip是<strong>0.0.0.0</strong>，而不是127.0.0.1</li></ul><h3 id="内网主机配置"><a href="#内网主机配置" class="headerlink" title="内网主机配置"></a>内网主机配置</h3><ul><li>命令格式<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NfR &lt;公网端口&gt;:&lt;要代理的ip&gt;:&lt;要代理的端口&gt; &lt;用户名&gt;@公网主机ip (-i /path/to/privatekey)</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-N：ssh不执行命令</span><br><span class="line">-f：后台执行</span><br><span class="line">-R：反向代理</span><br><span class="line">private key 应该是600权限</span><br></pre></td></tr></table></figure></div></li><li>查看是否启动，在公网主机上执行<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -tnl|grep &lt;公网端口&gt;</span><br><span class="line"></span><br><span class="line">tcp        0      0 0.0.0.0:&lt;公网端口&gt;            0.0.0.0:*               LISTEN</span><br><span class="line">tcp6       0      0 :::&lt;公网端口&gt;                 :::*                    LISTEN</span><br></pre></td></tr></table></figure></div>说明执行成功</li></ul><h3 id="免密，稳定通道"><a href="#免密，稳定通道" class="headerlink" title="免密，稳定通道"></a>免密，稳定通道</h3><ul><li><p>免密<br>在内网主机上执行</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id &lt;用户名&gt;@公网主机ip</span><br></pre></td></tr></table></figure></div></li><li><p>稳定通道(两种方法)</p><ul><li><p>autossh</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt-get install autossh</span><br><span class="line">autossh -M 2333 &lt;公网端口&gt;:&lt;要代理的ip&gt;:&lt;要代理的端口&gt; &lt;用户名&gt;@公网主机ip (-i /path/to/publickey)</span><br></pre></td></tr></table></figure></div></li><li><p>M : 回显测试</p></li><li><p>ssh心跳包</p><ul><li>单独客户设置（方法1）<br>修改<code>/etc/ssh/ssh_config</code>，添加<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 9999999999</span><br></pre></td></tr></table></figure></div></li><li>服务器设置（方法二）{新客户端可以不用设置，服务器负责维护}<br><code>sudo vim /etc/ssh/sshd_config</code><br><code># 添加</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClientAliveInterval 30</span><br><span class="line">ClientAliveCountMax 6</span><br></pre></td></tr></table></figure></div></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程间通信</title>
      <link href="/posts/2851953132.html"/>
      <url>/posts/2851953132.html</url>
      
        <content type="html"><![CDATA[<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><ul><li>由于某些错误而产生的事件</li><li>可以设定信号触发之后的处理方式，但信号是系统已经确定的<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (*signals(<span class="keyword">int</span> signum, <span class="keyword">void</span>(*hangdler)(<span class="keyword">int</span>)))(<span class="keyword">int</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sigaction</span><span class="params">(<span class="keyword">int</span> signum, <span class="keyword">const</span> struct sigaction * act, struct sigaction * addr)</span></span></span><br></pre></td></tr></table></figure></div></li></ul><h2 id="管道和命名管道"><a href="#管道和命名管道" class="headerlink" title="管道和命名管道"></a>管道和命名管道</h2><p>实质是先进先出，半双工的数据结构，双方通信需要两个管道</p><ul><li>管道：只能用于相互关联的进程间通信，如：父子进程</li><li>命名管道： = 特殊文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfifo(<span class="keyword">const</span> <span class="keyword">char</span> * pathname, <span class="keyword">mode_t</span> mode); <span class="comment">//建立管道文件</span></span><br><span class="line"><span class="built_in">read</span>() <span class="built_in">write</span>() <span class="built_in">close</span>() 均可操作</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><p>主要用于控制多个线程对临界区资源的访问</p><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><p>将消息按队列方式组成的链表</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">const</span> <span class="keyword">void</span> * msgptr, <span class="keyword">int</span> msgsz, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">const</span> <span class="keyword">void</span> * msgptr, <span class="keyword">int</span> msgsz, <span class="keyword">long</span> msgtyp, <span class="keyword">int</span> msgflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msgid, <span class="keyword">int</span> cmd, struct msgid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure></div><h2 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h2><p>直接操作内存，不用复制文件 系统创建的特殊地址空间，允许多个不相关的进程使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">const</span> <span class="keyword">void</span> * shmaddr, <span class="keyword">int</span> shmflg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> * shmaddr)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shmid, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> unix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端使用代理</title>
      <link href="/posts/973073571.html"/>
      <url>/posts/973073571.html</url>
      
        <content type="html"><![CDATA[<p>ProxyChains是本人目前为止用到的最方便的代理工具，使用十分简单。</p><ul><li><p>在源里有这个软件，直接安装</p></li><li><p>启动Shawdowsocks，并连接至服务器。</p></li><li><p>编辑/etc/proxychains.conf</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/proxychains.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></div><p>在最后的ProxyList里加入Shawdowsocks的代理设置：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socks5 <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">1080</span></span><br></pre></td></tr></table></figure></div></li><li><p>查找libproxychains.so.3位置</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find</span> <span class="regexp">/usr/</span> -name libproxychains.so.<span class="number">3</span></span><br></pre></td></tr></table></figure></div></li><li><p>编辑/usr/bin/proxychains</p><p>修改<br><code>LD_PRELOAD=libproxychains.so.3</code><br>为上一步的查找结果<br><code>LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libproxychains.so.3</code></p></li></ul><p>需要注意的是Ｐｒｏｘｙｃｈａｉｎｓ代理ＴＣＰ流量，所以ｐｉｎｇ命令可能不能使用</p><p>作者：萧一二<br>链接：<a href="https://www.jianshu.com/p/bd898d4ae415" target="_blank" rel="noopener">https://www.jianshu.com/p/bd898d4ae415</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程珠玑</title>
      <link href="/posts/2284540863.html"/>
      <url>/posts/2284540863.html</url>
      
        <content type="html"><![CDATA[<h3 id="编程珠玑新知识点记录"><a href="#编程珠玑新知识点记录" class="headerlink" title="编程珠玑新知识点记录"></a><a href="http://blog.huhaobin.cn/2018/04/01/ProgrammingPearlsKnown/ProgrammingPearls/chapter.md">编程珠玑</a>新知识点记录</h3><h4 id="第一章-开篇"><a href="#第一章-开篇" class="headerlink" title="第一章 开篇"></a>第一章 开篇</h4><h5 id="位图，位向量"><a href="#位图，位向量" class="headerlink" title="位图，位向量"></a>位图，位向量</h5><ul><li><p>位向量(亦作位图，不过与图形学中的位图混淆，下作位向量)。一个n位的二进制数据，数据i如果出现在该二进制的第i位，则该位置为1，否则为0。如：用一个10位长的二进制数据表示元素都小于10的集合，{1,2,3,5,8},该集合用二进制数据的表现形式：0111010010</p></li><li><p>算法分析</p><ul><li>初始化集合，每个位都置为0；</li><li>读入文件的每个整数，将对应的位置为1；</li><li>遍历二进制数据，如果该位为1，则输出相应的整数。</li></ul></li><li><p>bitset</p><p>C++语言的一个类库，用来方便地管理一系列的bit位而不用程序员自己来写代码。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bitset</span>&lt;N&gt;varm (M)</span><br><span class="line">其中varm为变量名。</span><br><span class="line">N表示该类型在内存中占的位数，是二进制。</span><br><span class="line">M表示变量varm的初始值。</span><br></pre></td></tr></table></figure></div><ul><li>相关函数<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">any</span>(); //当bitset对象的一位或多个位被设置为<span class="number">1</span> 时<span class="keyword">any</span>()返回<span class="keyword">true</span></span><br><span class="line"><span class="keyword">none</span>(); // 如果bitset 对象的所有位都被设置为<span class="number">0</span> ,则<span class="keyword">none</span>()操作返回<span class="keyword">true</span></span><br><span class="line">count(); // count()操作返回被设置为<span class="number">1</span>的位的个数.</span><br><span class="line"><span class="keyword">set</span>(); //我们可以用<span class="keyword">set</span>()操作或者下标操作符来设置某个单独的位</span><br><span class="line">test(); //测试某个单独的位是否为<span class="number">1</span> test()操作。用位置做参数，返回<span class="keyword">true</span>或<span class="keyword">false</span></span><br><span class="line"><span class="keyword">reset</span>(); // 要将某个单独的位设置为<span class="number">0</span> ,我们可以用<span class="keyword">reset</span>()或下标操作符</span><br><span class="line">wc -l/c/w filename 统计文件行/字节/字数</span><br></pre></td></tr></table></figure></div></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux关机前执行脚本</title>
      <link href="/posts/2766769718.html"/>
      <url>/posts/2766769718.html</url>
      
        <content type="html"><![CDATA[<ol><li><p>建立关机需要执行的脚本文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/init.d/<span class="module-access"><span class="module"><span class="identifier">K99shutdownbefore</span>.</span></span>sh</span><br></pre></td></tr></table></figure></div><p>K99文件名用来保证运行优先级</p></li><li><p>赋予执行权限</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/<span class="module-access"><span class="module"><span class="identifier">K99shutdownbefore</span>.</span></span>sh</span><br></pre></td></tr></table></figure></div></li><li><p>创建关机和重启软连接</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s <span class="regexp">/etc/i</span>nit.d<span class="regexp">/K99shutdownbefore.sh  /</span>etc<span class="regexp">/rc0.d/</span>K99shutdownbefore</span><br><span class="line">sudo ln -s <span class="regexp">/etc/i</span>nit.d<span class="regexp">/K99shutdownbefore.sh  /</span>etc<span class="regexp">/rc6.d/</span>K99shutdownbefore</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sizeof与strlen的区别</title>
      <link href="/posts/2422235321.html"/>
      <url>/posts/2422235321.html</url>
      
        <content type="html"><![CDATA[<ul><li>sizeof是一个操作符,结果类型是size_t，它在头文件中typedef为unsigned　int类型。该类型保证能容纳实现所建立的最大对象的字节大小.而strlen是一个库函数,使用需要包含&lt;string.h&gt;头文件.</li><li>sizeof的参数可以是数据类型或变量,而strlen函数只能以结尾为’\0’的字符串的作为参数.</li><li>sizeof后如果是类型必须加括弧，如果是变量名可以不加括弧。这是因为sizeof是个操作符不是个函数</li><li>编译器在编译的时候就计算出了sizeof的结果.而strlen函数必须在运行的时候才能计算出来.</li><li>sizeof计算的是数据类型占用的内存的大小,而strlen计算的字符串实际的长度,不包括’\0’;</li><li>数组作为sizeof的参数不会退化,而作为strlen的参数的时候会退化为一个字符指针.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt mysql数据库找不到</title>
      <link href="/posts/62490762.html"/>
      <url>/posts/62490762.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">QSqlDatabase:</span> QMYSQL driver not loaded</span><br><span class="line"><span class="string">QSqlDatabase:</span> available <span class="string">drivers:</span> QSQLITE QMYSQL QMYSQL3 QODBC QODBC3 QPSQL QPSQL <span class="number">7</span></span><br></pre></td></tr></table></figure></div><h3 id="原因：-应用程序找不到libmysql-dll"><a href="#原因：-应用程序找不到libmysql-dll" class="headerlink" title="原因： 应用程序找不到libmysql.dll"></a>原因： 应用程序找不到libmysql.dll</h3><p>###解决方法：<br>把libmysql.dll 放在.exe应用程序运次的同目录下<br>比如在debug时，放在debug的目录下面； release时，放在release的目录下面</p>]]></content>
      
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android Stdio配置</title>
      <link href="/posts/336607436.html"/>
      <url>/posts/336607436.html</url>
      
        <content type="html"><![CDATA[<ol><li>Cause: dl.google.com:443 failed to respond<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARCADE"><figure class="iseeu highlight /arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="regexp">/.gradle/g</span>radle.properties</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># org.gradle.parallel=<span class="literal">true</span></span><br><span class="line">#Fri Jun <span class="number">29</span> <span class="number">10</span>:<span class="number">45</span>:<span class="number">08</span> CST <span class="number">2018</span></span><br><span class="line">#systemProp.https.proxyPort=<span class="number">1080</span></span><br><span class="line">systemProp.http.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">#systemProp.https.proxyHost=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">systemProp.http.proxyPort=<span class="number">1080</span></span><br></pre></td></tr></table></figure></div></li><li>创建桌面图标<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim  /usr/share/applications/Studio.desktop</span><br><span class="line">[Desktop Entry]</span><br><span class="line">Name = AS</span><br><span class="line">Comment= android studio</span><br><span class="line"><span class="attribute">Exec</span>=/home/huhaobin/android-studio/bin/studio.sh</span><br><span class="line"><span class="attribute">Icon</span>=/home/huhaobin/android-studio/bin/studio.png</span><br><span class="line"><span class="attribute">Terminal</span>=<span class="literal">false</span></span><br><span class="line"><span class="attribute">Type</span>=Application</span><br></pre></td></tr></table></figure></div></li><li>Grant current user access to /dev/kvm<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRMSH"><figure class="iseeu highlight /crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown :$<span class="keyword">USER</span> <span class="title">/dev</span>/kvm</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>apache2跨域</title>
      <link href="/posts/4210195828.html"/>
      <url>/posts/4210195828.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>加载服务器组件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="NGINX"><figure class="iseeu highlight /nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">a2enmod</span> headers</span><br></pre></td></tr></table></figure></div></li><li><p>修改服务器配置</p><p>在想要可以跨域访问的目录下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PGSQL"><figure class="iseeu highlight /pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Header</span> <span class="keyword">set</span> <span class="keyword">Access</span>-Control-Allow-Origin *</span><br></pre></td></tr></table></figure></div></li><li><p>重启服务器</p></li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MAXIMA"><figure class="iseeu highlight /maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service apache2 <span class="built_in">restart</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt使用mysql</title>
      <link href="/posts/12354587.html"/>
      <url>/posts/12354587.html</url>
      
        <content type="html"><![CDATA[<h2 id="Qt使用mysql"><a href="#Qt使用mysql" class="headerlink" title="Qt使用mysql"></a>Qt使用mysql</h2><ul><li><p>虽然qt自己编译生成了libmysqlclient.so,但是这个文件还依赖于系统的libmysqlclient.so.18，但是很多主机都没有安装这个</p></li><li><p>查看缺少的文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> /the/path/<span class="keyword">to</span>/libmysqlclient.<span class="keyword">so</span></span><br><span class="line">ldd libmysqlclient.<span class="keyword">so</span></span><br></pre></td></tr></table></figure></div></li><li><p>下载</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/downloads/</span>connector<span class="regexp">/c/</span></span><br></pre></td></tr></table></figure></div></li><li><p>复制</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CRYSTAL"><figure class="iseeu highlight /crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp libmysqlclient.so.<span class="number">18</span> /usr/<span class="class"><span class="keyword">lib</span></span></span><br></pre></td></tr></table></figure></div></li><li><p>使用<br>重新编译工程并使用</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卸载python安装的模块</title>
      <link href="/posts/4225763383.html"/>
      <url>/posts/4225763383.html</url>
      
        <content type="html"><![CDATA[<ul><li>pip<br>使用pip安装的可以用pip卸载<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uinstall <span class="emphasis">***</span></span><br><span class="line">easy_install</span><br></pre></td></tr></table></figure></div></li><li>使用easy_install安装的可以用easy_install卸载<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">easy_install -m PackageName</span><br><span class="line"><span class="built_in">setup</span>.py</span><br></pre></td></tr></table></figure></div></li><li>通过发行包附带的setup.py安装的模块，首选setup.py提供的uninstall选项。如果作者没有提供uninstall选项，则通过如下命令行手动卸载：<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="REASONML"><figure class="iseeu highlight /reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> python setup.py  install --record files.txt</span><br><span class="line"><span class="number">2.</span> 创建del.sh脚本内容</span><br><span class="line">    #!/bin/bash  </span><br><span class="line">    for i <span class="keyword">in</span> <span class="constructor">$(<span class="params">less</span> <span class="params">files</span>.<span class="params">txt</span>)</span>  </span><br><span class="line">    <span class="keyword">do</span>  rm -rf $i  </span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="number">3.</span> 执行脚本</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zsh美化终端</title>
      <link href="/posts/2799909634.html"/>
      <url>/posts/2799909634.html</url>
      
        <content type="html"><![CDATA[<p>本文仅仅为了提升装逼技能<br>不想装的可以关掉了</p><ul><li>安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMAKE"><figure class="iseeu highlight /cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="keyword">install</span> zsh</span><br></pre></td></tr></table></figure></div></li><li>安装on-my-zsh配置zsh<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/robbyrussell/</span>oh-my-zsh<span class="regexp">/raw/m</span>aster<span class="regexp">/tools/i</span>nstall.sh -O - | sh</span><br></pre></td></tr></table></figure></div></li><li>切换终端<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s <span class="regexp">/usr/</span>bin<span class="regexp">/zsh</span></span><br></pre></td></tr></table></figure></div></li><li>重启机器<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">reboot</span></span><br></pre></td></tr></table></figure></div></li><li>问题<ul><li>zsh没有导入npm的环境<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nano ~/.zshrc</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:/path/to/your/npm/bin"</span></span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure></div></li></ul></li><li>备注<ul><li>换回bash<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure></div></li></ul><ul><li>切换到zsh<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> zsh</span><br></pre></td></tr></table></figure></div></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04不能访除系统以外的硬盘</title>
      <link href="/posts/610628007.html"/>
      <url>/posts/610628007.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ntfsfix</span><br><span class="line">sudo ntfsfix /dev/sdb1</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu16.04安装websploit</title>
      <link href="/posts/3457327171.html"/>
      <url>/posts/3457327171.html</url>
      
        <content type="html"><![CDATA[<h2 id="高效中间人攻击框架"><a href="#高效中间人攻击框架" class="headerlink" title="高效中间人攻击框架"></a>高效中间人攻击框架</h2><ul><li>安装依赖<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ACTIONSCRIPT"><figure class="iseeu highlight /actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="keyword">get</span> install scapy</span><br><span class="line">sudo apt install apache2  <span class="comment">//for exploit/browser_autopwn</span></span><br></pre></td></tr></table></figure></div></li><li>安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>launchpad.net<span class="regexp">/ubuntu/</span>+archive<span class="regexp">/primary/</span>+files<span class="regexp">/websploit_3.0.0-1_all.deb</span></span><br></pre></td></tr></table></figure></div></li><li>在桌面环境下双击即可安装</li><li>验证<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">websploit</span></span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下arm-none-linux-gnueabi交叉编译环境的建立</title>
      <link href="/posts/1573656155.html"/>
      <url>/posts/1573656155.html</url>
      
        <content type="html"><![CDATA[<h2 id="arm-none-linux-gnueabi-gcc下载"><a href="#arm-none-linux-gnueabi-gcc下载" class="headerlink" title="arm-none-linux-gnueabi-gcc下载"></a>arm-none-linux-gnueabi-gcc下载</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="DTS"><figure class="iseeu highlight /dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//www.veryarm.com/arm-none-linux-gnueabi-gcc</span></span><br></pre></td></tr></table></figure></div><ul><li><p>解压文件</p></li><li><p>设置路径</p><ul><li>本人下载解压版,所以设置一下环境变量<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano <span class="regexp">/etc/</span>bash.bashrc</span><br></pre></td></tr></table></figure></div></li><li>在最后面添加<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ELIXIR"><figure class="iseeu highlight /elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="variable">$PATH</span><span class="symbol">:/path/to/arm-none-linux-gnueabi-gcc/bin</span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>执行</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">source</span> <span class="regexp">/etc/</span>bash.bashrc</span><br></pre></td></tr></table></figure></div></li><li><p>验证</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arm-none-linux-gnueabi-gcc -v</span></span><br></pre></td></tr></table></figure></div><p>出现版本号则说明安装成功</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unix环境高级编程2</title>
      <link href="/posts/2948078190.html"/>
      <url>/posts/2948078190.html</url>
      
        <content type="html"><![CDATA[<h2 id="第四章-文件和目录"><a href="#第四章-文件和目录" class="headerlink" title="第四章 文件和目录"></a>第四章 文件和目录</h2><ul><li>文件类型包括<ul><li>普通文件</li><li>目录文件</li><li>块特殊文件 提供对设备带缓冲的访问，每次访问以固定的长度为单位进行</li><li>字符特殊文件 不带缓冲，长度可变</li><li>系统中的所有设备要么是字符特殊文件要么是块特殊文件</li><li>FIFO（命名管道），用于进程间通信</li><li>套接字</li><li>符号链接</li></ul></li><li>对于目录的读权限和执行权限是不一样的，读权限允许读目录，获得在该目录中所有文件名的列表。对目录的执行权限使我们可通过该目录（也就是搜索该目录 ，寻找一个特定的文件名）</li><li>删除一个现有文件，必须对包含该文件的目录拥有写和执行权限，对文件本身不要求</li><li>内核以进程的有效用户ID和有效组ID为基础执行其访问权限测试。有时进程也希望用实际用户id和实际组id进行测试</li><li>unix系统大多数用户从不处理他们的umask（文件模式创建屏蔽字）值。通常在登陆的时候由shell设置一次然后再不改变</li><li>chmod 更新的是i节点的修改时间（状态更改时间），系统的排序方式是修改文件内容的时间（修改时间）</li><li>ls查看得到文件，cat却找不到的时候一般是符号连接，ls -l/-f 查看</li><li>对于目录通常至少要设置一个执行权限位，以允许该目录中的文件名</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unix环境高级编程1</title>
      <link href="/posts/917588948.html"/>
      <url>/posts/917588948.html</url>
      
        <content type="html"><![CDATA[<h2 id="第3章-文件IO"><a href="#第3章-文件IO" class="headerlink" title="第3章 文件IO"></a>第3章 文件IO</h2><ul><li>unix系统shell把文件描述符0与进程的标准输入关联，文件描述符1与进程的标准输出关联</li><li>open和 openat函数返回的文件描述符一定是最小的未用的描述符数值</li><li>ISO C中void *表示通用指针</li><li>文件偏移量可以大于当前文件的长度，在这种情况下，对该文件的下一次写将加长该文件，并在文件中构成一个空洞，位于文件中但没有写过的字节都被读为0<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">STDIN_FILENO</span> <span class="string">标准输入</span></span><br><span class="line"><span class="attr">STDOUT_FILENO</span> <span class="string">标准输出</span></span><br><span class="line"><span class="attr">STDERR_FILENO</span> <span class="string">标准错误</span></span><br></pre></td></tr></table></figure></div></li><li>unix支持在不同进程之间共享打开文件</li><li>内核使用三种数据结构表示打开文件</li><li>每个进程在进程表中都有一个记录项<ul><li>文件描述符标志</li><li>指向一个文件表项的指针</li></ul></li><li>内核为所有打开文件维持一张文件表，包含<ul><li>文件标志状态</li><li>当前文件偏移量</li><li>指向文件v节点表项的指针</li></ul></li><li>每个打开文件或设备都有一个v节点结构<ul><li>文件类型</li><li>对文件进行各种操作的函数指针</li><li>大多数文件都有i节点（索引节点）</li><li>包含了文件的所有者，文件长度，指向文件实际数据块在磁盘上所在位置的指针</li></ul></li><li>在unix系统中，通常write只是将数据排入队列，而实际的写磁盘操作可能在以后的某个时刻进行。而数据库系统需要使用O_SYVN，这样一来，当它从write返回的时候数据就已经写到磁盘上了</li><li>打开文件/dev/fd/n等效于复制描述符n（假设n是打开的）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unix环境高级编程</title>
      <link href="/posts/3177927357.html"/>
      <url>/posts/3177927357.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-unix基础知识"><a href="#第一章-unix基础知识" class="headerlink" title="第一章 unix基础知识"></a>第一章 unix基础知识</h2><ul><li>unix的口令文件在/etc/passed 登录项由7个冒号分割的字段组成，依次是登录名，加密口令，数字用户ID,数字组ID,注释字段，起始目录(/home/usr/),shell 程序</li><li>只有斜线和空字符不能出现在文件名</li><li>创建新目录时自动创建 点和点点文件</li><li>按照惯例，每当运行一个新的程序时，所有的shell都为其打开三个文件描述符，即标准输入，标准输出和标准错误<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STATA"><figure class="iseeu highlight /stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ls</span> &gt; <span class="keyword">file</span>.<span class="keyword">list</span></span><br><span class="line">将标准输出重定向到<span class="keyword">file</span>.<span class="keyword">list</span></span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派上搭建python脸部识别环境</title>
      <link href="/posts/2384358518.html"/>
      <url>/posts/2384358518.html</url>
      
        <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure></div><h2 id="设置树莓派"><a href="#设置树莓派" class="headerlink" title="设置树莓派"></a>设置树莓派</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ARDUINO"><figure class="iseeu highlight /arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-<span class="built_in">config</span></span><br></pre></td></tr></table></figure></div><ul><li>开启摄像头</li><li>gpu memory 设置为16<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sudo</span> <span class="string">apt-get install build-essential \</span></span><br><span class="line">    <span class="attr">cmake</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">gfortran</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">git</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">wget</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">curl</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">graphicsmagick</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libgraphicsmagick1-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libatlas-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libavcodec-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libavformat-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libboost-all-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libgtk2.0-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libjpeg-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">liblapack-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">libswscale-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">pkg-config</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">python3-dev</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">python3-numpy</span> <span class="string">\</span></span><br><span class="line">    <span class="meta">python3-pip</span> <span class="string">\</span></span><br><span class="line">    <span class="attr">zip</span></span><br><span class="line"><span class="attr">sudo</span> <span class="string">apt-get clean</span></span><br></pre></td></tr></table></figure></div><h2 id="安装python的摄像头操作模块"><a href="#安装python的摄像头操作模块" class="headerlink" title="安装python的摄像头操作模块"></a>安装python的摄像头操作模块</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install python3-picamera</span><br><span class="line">sudo pip3 install --upgrade picamera[array]</span><br><span class="line">暂时增大交换内存</span><br><span class="line"></span><br><span class="line">sudo nano /etc/dphys-swapfile</span><br><span class="line"></span><br><span class="line">&lt; change <span class="attribute">CONF_SWAPSIZE</span>=100 <span class="keyword">to</span> <span class="attribute">CONF_SWAPSIZE</span>=1024 <span class="keyword">and</span> save / exit nano &gt;</span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/dphys-swapfile restart</span><br></pre></td></tr></table></figure></div><h2 id="下载安装dlib"><a href="#下载安装dlib" class="headerlink" title="下载安装dlib"></a>下载安装dlib</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -<span class="keyword">p</span> dlib</span><br><span class="line">git clone -<span class="keyword">b</span> <span class="string">'v19.6'</span> --single-branch http<span class="variable">s:</span>//github.<span class="keyword">com</span>/davisking/dlib.git dlib/</span><br><span class="line"><span class="keyword">cd</span> ./dlib</span><br><span class="line">sudo <span class="keyword">python3</span> setup.<span class="keyword">py</span> install --<span class="keyword">compiler</span>-flags <span class="string">"-mfpu=neon"</span></span><br></pre></td></tr></table></figure></div><h2 id="安装face-recognition"><a href="#安装face-recognition" class="headerlink" title="安装face_recognition"></a>安装face_recognition</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install face_recognition</span><br><span class="line">恢复交换内存</span><br><span class="line"></span><br><span class="line">sudo nano /etc/dphys-swapfile</span><br><span class="line"></span><br><span class="line">&lt; change <span class="attribute">CONF_SWAPSIZE</span>=1024 <span class="keyword">to</span> <span class="attribute">CONF_SWAPSIZE</span>=100 <span class="keyword">and</span> save / exit nano &gt;</span><br><span class="line"></span><br><span class="line">sudo /etc/init.d/dphys-swapfile restart</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cameraOnRaspberry</title>
      <link href="/posts/836650148.html"/>
      <url>/posts/836650148.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">raspistill -o image.jpg  </span><br><span class="line"></span><br><span class="line">常用命令：  </span><br><span class="line"><span class="comment"># 两秒钟（时间单位为毫秒）延迟后拍摄一张照片，并保存为 image.jpg  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拍摄一张自定义大小的照片。  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -w 640 -h 480  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 降低图像质量，减小文件尺寸  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -q 5  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制使预览窗口出现在坐标为 100,100 的位置，并且尺寸为宽 300 和高 200 像素。  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -p 100,100,300,200  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用预览窗口  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -n  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将图像保存为 PNG 文件（无损压缩格式，但是要比 JPEG 速度慢）。注意，当选择图像编码时，文件扩展名将被忽略。  </span></span><br><span class="line">raspistill -t 2000 -o image.png –e png  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 向 JPEG 文件中添加一些 EXIF 信息。该命令将会把作者名称标签设置为 Dreamcolor，GPS 海拔高度为 123.5米。  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -x IFD0.Artist=Dreamcolor -x GPS.GPSAltitude=1235/10  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置浮雕风格图像特效  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -ifx emboss  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 YUV 图像的 U 和 V 通道为指定的值（128:128 为黑白图像）  </span></span><br><span class="line">raspistill -t 2000 -o image.jpg -cfx 128:128  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅显示两秒钟预览图像，而不对图像进行保存。  </span></span><br><span class="line">raspistill -t 2000  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 间隔获取图片，在 10 分钟（10 分钟 = 600000 毫秒）的时间里，每 10 秒获取一张，并且命名为 image_number_1_today.jpg，image_number_2_today.jpg... 的形式。  </span></span><br><span class="line">raspistill -t 600000 -tl 10000 -o image_num_%d_today.jpg  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一张照片并发送至标准输出设备  </span></span><br><span class="line">raspistill -t 2000 -o -  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一张照片并保存为一个文件  </span></span><br><span class="line">raspistill -t 2000 -o - &gt; my_file.jpg</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ftp_raspberry</title>
      <link href="/posts/2819274611.html"/>
      <url>/posts/2819274611.html</url>
      
        <content type="html"><![CDATA[<h3 id="ftp配置"><a href="#ftp配置" class="headerlink" title="ftp配置"></a>ftp配置</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install vsftpd</span><br><span class="line">sudo nano /etc/vsftpd.conf</span><br><span class="line"><span class="comment">#推荐以下配置</span></span><br><span class="line"><span class="comment"># 不允许匿名访问</span></span><br><span class="line"><span class="attribute">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"><span class="comment"># 设定可以进行写操作</span></span><br><span class="line"><span class="attribute">write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="comment"># 设定本地用户可以访问</span></span><br><span class="line"><span class="attribute">local_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attribute">ascii_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attribute">ascii_download_enable</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>vsftpd restart</span><br></pre></td></tr></table></figure></div><h3 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysqlInstallation</title>
      <link href="/posts/570379779.html"/>
      <url>/posts/570379779.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题阐述"><a href="#问题阐述" class="headerlink" title="问题阐述"></a>问题阐述</h2><p>最近mysql进行了大面积的更新,内置的数据库存储器换成了mariaDB,但是大公司的更新怎么会没有大坑呢,他们更新完之后在安装过程中不会让你设置root用户的密码,但是密码在哪儿呢,据说是在某个文件里存着(当然这是PC机的特权).</p><h2 id="方法步骤"><a href="#方法步骤" class="headerlink" title="方法步骤"></a>方法步骤</h2><ul><li>删除数据库文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -r <span class="regexp">/etc/my</span>sql</span><br></pre></td></tr></table></figure></div></li><li>安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CMAKE"><figure class="iseeu highlight /cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spt <span class="keyword">install</span> mysql_server</span><br></pre></td></tr></table></figure></div></li><li>初始化数据库(先别在里面设置root用户的密码)<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql_secure_installation</span></span><br></pre></td></tr></table></figure></div></li><li>登录数据库<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo mysql -u root -p</span></span><br></pre></td></tr></table></figure></div></li></ul><p><strong>大坑标注</strong>:必须使用sudo,不使用su权限根本进不去,默认是空密码(对于树莓派)</p><ul><li><p>删除原有的root用户</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP<span class="built_in"> USER </span><span class="string">'root'</span>@<span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>创建root账户(先别设置密码)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE<span class="built_in"> USER </span><span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">''</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>设置root用户权限(设置密码)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'password'</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>刷新权限表</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>多说一句</p><p>5.6步如果省略就算更改密码之后也只能用su权限链接,删除重新添加之后就所有用户都可以链接了(迷)</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uart_raspberry</title>
      <link href="/posts/983467300.html"/>
      <url>/posts/983467300.html</url>
      
        <content type="html"><![CDATA[<ul><li>串口配置<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br><span class="line">interface</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">disable</span> shell <span class="keyword">and</span> <span class="builtin-name">enable</span> hardware</span><br></pre></td></tr></table></figure></div></li><li>禁用蓝牙<figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"dtoverlay=pi3-disable-bt"</span> &gt;&gt; <span class="string">/boot/config.txt</span></span><br></pre></td></tr></table></figure></li><li>禁用串行控制台<br>串行控制台就是从串口登录树莓派，打开/boot/cmdline.txt<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#dwc_otg.lpm_enable=0 console=tty1 console=serial0,115200 root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline fsck.repair=yes rootwait quiet splash plymouth.ignore-serial-consoles</span></span><br><span class="line"></span><br><span class="line">dwc_otg.<span class="attribute">lpm_enable</span>=0 <span class="attribute">console</span>=tty1 <span class="attribute">root</span>=/dev/mmcblk0p2 <span class="attribute">rootfstype</span>=ext4 <span class="attribute">elevator</span>=deadline fsck.<span class="attribute">repair</span>=y</span><br></pre></td></tr></table></figure></div>注意:打开第一句就是打开串口命令行</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StartWithBoot</title>
      <link href="/posts/3983964006.html"/>
      <url>/posts/3983964006.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>定时任务的方法是使用cron和crontab。</p></li><li><p>开机自启动任务</p></li><li><p>树莓派开机启动任务是由rc.local控制的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="APPLESCRIPT"><figure class="iseeu highlight /applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure></div><p>在注释后面添加命令，但是要保证exit 0这行代码在最后，然后保存文件退出。</p></li></ul><p><strong>注意</strong></p><p>如果你的命令需要长时间运行（例如死循环）或者运行后不能退出，那么你必须确保在命令的最后添加“&amp;”符号让命令运行在其它进程.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoStartInUbuntuMate</title>
      <link href="/posts/2628694986.html"/>
      <url>/posts/2628694986.html</url>
      
        <content type="html"><![CDATA[<ul><li>只有登录之后ubuntu mate才会联网<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="STATA"><figure class="iseeu highlight /stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano  /usr/share/lightdm/lightdm.<span class="keyword">conf</span>.<span class="keyword">d</span>/60-lightdm-gtk-greeter.<span class="keyword">conf</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure></div></li><li>在文件末尾添加<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[SeatDefaults] <span class="attribute">greeter-session</span>=lightdm-gtk-greeter <span class="attribute">autologin-user</span>=username</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客的搭建</title>
      <link href="/posts/139679387.html"/>
      <url>/posts/139679387.html</url>
      
        <content type="html"><![CDATA[<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><ul><li><p>最讨厌的就是原封不动的抄别人,所以我直接用别人的</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LLVM"><figure class="iseeu highlight /llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://hifor.net/<span class="number">2015</span>/<span class="number">07</span>/<span class="number">01</span>/<span class="symbol">%E9</span><span class="symbol">%9</span>B<span class="symbol">%B6</span><span class="symbol">%E5</span><span class="symbol">%9</span>F<span class="symbol">%BA</span><span class="symbol">%E7</span><span class="symbol">%A1</span><span class="symbol">%80</span><span class="symbol">%E5</span><span class="symbol">%85</span><span class="symbol">%8</span>D<span class="symbol">%E8</span><span class="symbol">%B4</span><span class="symbol">%B9</span><span class="symbol">%E6</span><span class="symbol">%90</span><span class="symbol">%AD</span><span class="symbol">%E5</span><span class="symbol">%BB</span><span class="symbol">%BA</span><span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%AA</span><span class="symbol">%E4</span><span class="symbol">%BA</span><span class="symbol">%BA</span><span class="symbol">%E5</span><span class="symbol">%8</span>D<span class="symbol">%9</span>A<span class="symbol">%E5</span><span class="symbol">%AE</span><span class="symbol">%A2-hexo-github</span>/</span><br></pre></td></tr></table></figure></div><p>备注: window10/windows8/Linux 均可以<br>搭建在本地进行测试</p></li><li><p>在source目录下面新建CNAME文件,内容为自己独立的域名</p></li><li><p>在弄完解析之后就可以通过自己的域名访问了</p></li><li><p>markdown 书写语法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.jianshu.com<span class="regexp">/p/</span>q81RER</span><br></pre></td></tr></table></figure></div></li><li><p>sublime text markdown 插件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>www.jianshu.com<span class="regexp">/p/</span>aa30cc25c91b</span><br></pre></td></tr></table></figure></div></li><li><p>写作</p><ul><li><p>在./source/_posts里面新建.md文件,用markdown语法写文件</p></li><li><p>更新到git pages</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">.</span> <span class="string">hexo</span> <span class="string">clean</span> <span class="comment">#清除hexo缓存</span></span><br><span class="line"><span class="number">2</span><span class="string">.</span> <span class="string">hexo</span> <span class="string">g</span>     <span class="comment">#产生静态文件</span></span><br><span class="line"><span class="number">3</span><span class="string">.</span> <span class="string">hexo</span> <span class="string">s</span>     <span class="comment">#开启本地服务器以供测试</span></span><br><span class="line"><span class="number">4</span><span class="string">.</span> <span class="string">hexo</span> <span class="string">d</span>     <span class="comment">#将网站上传到git,进行远程使用</span></span><br></pre></td></tr></table></figure></div></li><li><p>使用分类和标签功能</p><ul><li>新建分类<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>categories</span><br></pre></td></tr></table></figure></div>执行完之后会在source/categories里面生成index.md<br>里面的内容应该完善为<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">未分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="number">-09</span><span class="number">-30</span> <span class="number">13</span><span class="string">:28:39</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></li></ul><ul><li>新建标签<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new<span class="built_in"> page </span>tags</span><br></pre></td></tr></table></figure></div>执行完之后会在source/tags里面生成index.md<br>里面的内容应该完善为<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YAML"><figure class="iseeu highlight /yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">未分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="number">-09</span><span class="number">-30</span> <span class="number">13</span><span class="string">:28:39</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></div></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派连接隐藏wifi</title>
      <link href="/posts/3907754421.html"/>
      <url>/posts/3907754421.html</url>
      
        <content type="html"><![CDATA[<ul><li>编辑wifi文件<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf</span><br></pre></td></tr></table></figure></div></li><li>在该文件最后添加下面的话<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">network=&#123;</span><br><span class="line">  ssid=<span class="string">"WIFINAME"</span></span><br><span class="line">    scan_ssid=1</span><br><span class="line">  psk=<span class="string">"password"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>重启</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu mate在树莓派上的应用</title>
      <link href="/posts/261493140.html"/>
      <url>/posts/261493140.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>下载安装系统,并启动</p><ul><li>系统默认没有开启ssh,所以要新建文件以开启sshwindows用户可以打开powershell进入SD卡根目录,执行<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="FSHARP"><figure class="iseeu highlight /fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span>-item ssh -<span class="class"><span class="keyword">type</span> <span class="title">file</span></span></span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>开机</p><p>开机配置过程基本上跟ubuntu没有什么区别,选择wifi同步升级软件,检测键盘布局之类的.<br>接下来就是配置无线以及有线网络,方便没有HDMI显示器的环境下使用</p></li><li><p>重启</p><p>没有链接到网络,后来发现ubuntu mate在启动后会停留在输入密码登录的界面</p></li><li><p>自动登录</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//u</span>buntu-mate.community<span class="regexp">/t/</span>enable-automatic-login-<span class="keyword">in</span>-ubuntu-mate-<span class="number">16</span>-<span class="number">04</span>-<span class="keyword">for</span>-raspberry-pi-<span class="number">3</span><span class="regexp">/5679/</span><span class="number">4</span></span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RaspiberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言多线程</title>
      <link href="/posts/914665799.html"/>
      <url>/posts/914665799.html</url>
      
        <content type="html"><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="keyword">pthread_t</span> thread[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mut;</span><br><span class="line"><span class="keyword">int</span> number=<span class="number">0</span>, i;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span> (<span class="string">"thread1 : I'm thread 1\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"thread1 : number = %d\n"</span>,number);</span><br><span class="line">                pthread_mutex_lock(&amp;mut);</span><br><span class="line">                        number++;</span><br><span class="line">                pthread_mutex_unlock(&amp;mut);</span><br><span class="line">                sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"thread1 :主函数在等我完成任务吗？\n"</span>);</span><br><span class="line">        pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">thread2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 : I'm thread 2\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"thread2 : number = %d\n"</span>,number);</span><br><span class="line">                pthread_mutex_lock(&amp;mut);</span><br><span class="line">                        number++;</span><br><span class="line">                pthread_mutex_unlock(&amp;mut);</span><br><span class="line">                sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"thread2 :主函数在等我完成任务吗？\n"</span>);</span><br><span class="line">        pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_create</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;thread, <span class="number">0</span>, <span class="keyword">sizeof</span>(thread));          <span class="comment">//comment1</span></span><br><span class="line">        <span class="comment">/*创建线程*/</span></span><br><span class="line">        <span class="keyword">if</span>((temp = pthread_create(&amp;thread[<span class="number">0</span>], <span class="literal">NULL</span>, thread1, <span class="literal">NULL</span>)) != <span class="number">0</span>)       <span class="comment">//comment2</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程1创建失败!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程1被创建\n"</span>);</span><br><span class="line">        <span class="keyword">if</span>((temp = pthread_create(&amp;thread[<span class="number">1</span>], <span class="literal">NULL</span>, thread2, <span class="literal">NULL</span>)) != <span class="number">0</span>)  <span class="comment">//comment3</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程2创建失败"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程2被创建\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">thread_wait</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/*等待线程结束*/</span></span><br><span class="line">        <span class="keyword">if</span>(thread[<span class="number">0</span>] !=<span class="number">0</span>) &#123;                   <span class="comment">//comment4</span></span><br><span class="line">                pthread_join(thread[<span class="number">0</span>],<span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程1已经结束\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(thread[<span class="number">1</span>] !=<span class="number">0</span>) &#123;                <span class="comment">//comment5</span></span><br><span class="line">                pthread_join(thread[<span class="number">1</span>],<span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"线程2已经结束\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">/*用默认属性初始化互斥锁*/</span></span><br><span class="line">        pthread_mutex_init(&amp;mut,<span class="literal">NULL</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"我是主函数哦，我正在创建线程，呵呵\n"</span>);</span><br><span class="line">        thread_create();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"我是主函数哦，我正在等待线程完成任务阿，呵呵\n"</span>);</span><br><span class="line">        thread_wait();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="编译指令"><a href="#编译指令" class="headerlink" title="编译指令"></a>编译指令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o thread_example thread_example.c　-lpthread</span><br></pre></td></tr></table></figure></div><p><strong>ubuntu下面-plthread 选项要放在最后面</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>random</title>
      <link href="/posts/373021397.html"/>
      <url>/posts/373021397.html</url>
      
        <content type="html"><![CDATA[<p>还是太年轻了，投入的越深越容易受伤，道不同不相为谋。</p><p>正好最近一段时间可以不用应付各种东西，好好做自己该做的事，别让以后的自己成为现在讨厌的人。</p><p>见贤思齐，见不贤自省。修身养性。积极面对事情，没想象中那么脆弱，好好跟各种老师相处。调节自己的心情，不能乱发脾气，尽量做一个不说别人坏话，不当面发脾气的人</p><p>你的身体是你的本钱，请你自己珍惜。自己不能再找借口不锻炼了，其实你明确的知道你的身体状况。</p><p><strong>你对别人好，别人才能对你好</strong></p><p>加油，你可以自己调节。<br>给自己每天说一个晚安</p><ul><li>小敏也每天给你说晚安，小胡永远最棒的！</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax跨域</title>
      <link href="/posts/1045120033.html"/>
      <url>/posts/1045120033.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = “http:<span class="comment">//www.huhaobin.cn/yiban/Email/send";</span></span><br><span class="line"></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: “GET”,</span><br><span class="line">url: url,</span><br><span class="line">data: $(“#ContactForm”).serialize(),</span><br><span class="line">headers: &#123;</span><br><span class="line">‘Access-Control-Allow-Origin’: ‘*’</span><br><span class="line">&#125;,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> <span class="title">confirm</span>(<span class="params">data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">alert(‘你的老板已经看见了’);</span><br><span class="line">&#125;,</span><br><span class="line">error: <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(‘你的老板没收到’);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p><strong>跨域要加header,并且注意只能用get</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell</title>
      <link href="/posts/1167241981.html"/>
      <url>/posts/1167241981.html</url>
      
        <content type="html"><![CDATA[<h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><p><strong>注意,尽量不要用空格做格式控制符</strong></p><ul><li>开头要用 指明解释器<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br></pre></td></tr></table></figure></div></li><li>每句话不用封号结尾</li><li>变量的定义不用$符,但是引用要用$符,引用的时候要注意有无大括号</li><li>删除变量的时候不用$符<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$0</span>  当前脚本的文件名</span><br><span class="line"><span class="variable">$n</span>  传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是<span class="variable">$1</span>，第二个参数是<span class="variable">$2</span>。</span><br><span class="line"><span class="variable">$</span><span class="comment">#  传递给脚本或函数的参数个数。</span></span><br><span class="line"><span class="variable">$</span>*  传递给脚本或函数的所有参数。</span><br><span class="line"><span class="variable">$</span><span class="selector-tag">@</span>  传递给脚本或函数的所有参数。被双引号(<span class="string">" "</span>)包含时，与 <span class="variable">$</span>* 稍有不同</span><br><span class="line"><span class="variable">$</span>?  上个命令的退出状态，或函数的返回值。</span><br><span class="line"><span class="variable">$</span><span class="variable">$</span>  当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。</span><br><span class="line"><span class="comment">#替换</span></span><br></pre></td></tr></table></figure></div></li><li>转义替换（用-e 来禁止zhuanyi转义）<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PROPERTIES"><figure class="iseeu highlight /properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">下面的转义字符都可以用在</span> <span class="string">echo 中：</span></span><br><span class="line"><span class="meta">&amp;#092;</span>  <span class="string">反斜杠</span></span><br><span class="line"><span class="attr">a</span>  <span class="string">警报，响铃</span></span><br><span class="line"><span class="attr">b</span>  <span class="string">退格（删除键）</span></span><br><span class="line"><span class="attr">f</span>  <span class="string">换页(FF)，将当前位置移到下页开头</span></span><br><span class="line"><span class="attr">n</span>  <span class="string">换行</span></span><br><span class="line"><span class="attr">r</span>  <span class="string">回车</span></span><br><span class="line"><span class="attr">t</span>  <span class="string">水平制表符（tab键）</span></span><br><span class="line"><span class="attr">v</span>  <span class="string">垂直制表符</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="keyword">var</span>&#125; 变量本来的值</span><br><span class="line">$&#123;<span class="keyword">var</span>:-word&#125;    如果变量 <span class="keyword">var</span> 为空或已被删除(<span class="keyword">unset</span>)，那么返回 word，但不改变 <span class="keyword">var</span> 的值。</span><br><span class="line">$&#123;<span class="keyword">var</span>:=word&#125;    如果变量 <span class="keyword">var</span> 为空或已被删除(<span class="keyword">unset</span>)，那么返回 word，并将 <span class="keyword">var</span> 的值设置为 word。</span><br><span class="line">$&#123;<span class="keyword">var</span>:?message&#125; 如果变量 <span class="keyword">var</span> 为空或已被删除(<span class="keyword">unset</span>)，那么将消息 message 送到标准错误输出，可以用来检测变量 <span class="keyword">var</span> 是否可以被正常赋值。</span><br><span class="line">若此替换出现在Shell脚本中，那么脚本将停止运行。</span><br><span class="line">$&#123;<span class="keyword">var</span>:+word&#125;    如果变量 <span class="keyword">var</span> 被定义，那么返回 word，但不改变 <span class="keyword">var</span> 的值。</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回头C语言</title>
      <link href="/posts/4274270301.html"/>
      <url>/posts/4274270301.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代码：https:<span class="regexp">//gi</span>thub.com<span class="regexp">/saber110/</span>C_review</span><br></pre></td></tr></table></figure></div><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="KOTLIN"><figure class="iseeu highlight /kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>: 跳出本层循环</span><br><span class="line"><span class="keyword">continue</span> : 跳出本次循环接而执行下次循环</span><br></pre></td></tr></table></figure></div><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ul><li>数字型数组 默认初始化为0, 字符型数组 默认初始化为’\0’（空格符）**<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123;</span><br><span class="line">                &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">                &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;,</span><br><span class="line">                &#123;<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,&#125;</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>][<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="built_in">int</span> a[<span class="number">3</span>][<span class="number">4</span>] =&#123;&#123;<span class="number">1</span>&#125;,&#123;<span class="number">5</span>&#125;,&#123;<span class="number">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></div>前两种初始化的方法效果完全一致，但是前面的清晰可读推荐使用<br>第三种方法相当于<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="string">0</span>][<span class="symbol">0</span>]= 1;</span><br><span class="line">a[<span class="string">1</span>][<span class="symbol">0</span>] = 5;</span><br><span class="line">a[<span class="string">2</span>][<span class="symbol">0</span>] = 9;</span><br><span class="line">其余元素全为0</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h3><p>初始化的时候如果确定全部元素的话可以省略一维数组的长度和二位数组的第一维长度</p><p><strong>数组长度</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SWIFT"><figure class="iseeu highlight /swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char <span class="built_in">c</span>[] = “i am a student”;</span><br><span class="line"><span class="built_in">sizeof</span>(<span class="built_in">c</span>) = <span class="number">11</span>;</span><br></pre></td></tr></table></figure></div><p>系统在后面自动添加”\0”表示字符串终结 (10+1)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ABNF"><figure class="iseeu highlight /abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char C[<span class="number">5</span>] = “CHINA”<span class="comment">;</span></span><br></pre></td></tr></table></figure></div><p>也是<strong>合法</strong>的表达</p><h3 id="数组名做形参时不会检查他的大小，当指定实参时形参指向实参的地址，实质上同在相同的内存空间"><a href="#数组名做形参时不会检查他的大小，当指定实参时形参指向实参的地址，实质上同在相同的内存空间" class="headerlink" title="数组名做形参时不会检查他的大小，当指定实参时形参指向实参的地址，实质上同在相同的内存空间"></a>数组名做形参时不会检查他的大小，当指定实参时形参指向实参的地址，实质上同在相同的内存空间</h3><h1 id="这儿有个关于字符数组的大坑"><a href="#这儿有个关于字符数组的大坑" class="headerlink" title="这儿有个关于字符数组的大坑"></a>这儿有个关于字符数组的大坑</h1><ol><li>C语言的<strong>字符</strong>数组可以在初始化的时候直接赋值</li><li>但不可以用<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="INI"><figure class="iseeu highlight /ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">str</span>=”china”<span class="comment">; //尝试之间赋值给已声明的字符数组str</span></span><br><span class="line"><span class="attr">str1</span> = str2<span class="comment">;</span></span><br></pre></td></tr></table></figure></div></li></ol><ul><li>在后面要改变字符数组的内容需要使用<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LISP"><figure class="iseeu highlight /lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gets(<span class="name">str</span>)<span class="comment">;</span></span><br><span class="line">strcat(<span class="name">str</span>,str1)<span class="comment">;</span></span><br><span class="line">strcpy(<span class="name">str</span>,str1)<span class="comment">;</span></span><br><span class="line">strncpy(<span class="name">str</span>,str1,<span class="number">2</span>)<span class="comment">;//将str1中的前两个字符赋值到str中</span></span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="/posts/335527560.html"/>
      <url>/posts/335527560.html</url>
      
        <content type="html"><![CDATA[<h1 id="存储类别"><a href="#存储类别" class="headerlink" title="存储类别"></a>存储类别</h1><ul><li>自动变量： 函数中未做特殊声明的局部变量（存储在动态存储区）</li><li>静态局部变量： 定义在函数内部，在函数运行完成后不释放空间，在下次运行时保留上次的值（存储在静态存储区）</li><li>寄存器变量： 运行次数超高的变量，用register声明，放在cpu中执行（其他的变量都在内存中）</li></ul><p><strong>REMARK</strong>：在全局变量前加<em>static</em>则将变量的使用范围限制在此文件中，其他文件不能通过<em>extern</em>进行作用域的扩展，同时，使用相同的静态外部变量名无关紧要</p>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针</title>
      <link href="/posts/1935704712.html"/>
      <url>/posts/1935704712.html</url>
      
        <content type="html"><![CDATA[<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/saber110/</span>C_review</span><br></pre></td></tr></table></figure></div><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>‘*’ 表示对应地址的内容</li><li>指针变量名表示地址</li></ul><h3 id="指针变量中只能存放地址"><a href="#指针变量中只能存放地址" class="headerlink" title="指针变量中只能存放地址"></a>指针变量中只能存放地址</h3><ul><li>指针在初始化值的时候，一定要用变量的地址，在初始化完成之后可以不用地址改变指针的值<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">200</span>,* pointer;</span><br><span class="line">pointer = a;</span><br></pre></td></tr></table></figure></div></li></ul><p><strong>这是不合法的</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">200</span>,* pointer;</span><br><span class="line">*pointer = a;<span class="comment">//未进行初始化，存储单元无法预测</span></span><br></pre></td></tr></table></figure></div><p><strong>这也是不合法的</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="EBNF"><figure class="iseeu highlight /ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">int a</span> = 200,* pointer;</span><br><span class="line"><span class="attribute">pointer</span> =*a;</span><br></pre></td></tr></table></figure></div><p><strong>这也是合法的</strong></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="FORTRAN"><figure class="iseeu highlight /fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a = <span class="number">200</span>,* <span class="keyword">pointer</span>;</span><br><span class="line"><span class="keyword">pointer</span> = &amp;amp;a;</span><br><span class="line">*<span class="keyword">pointer</span> = a;//等价于<span class="keyword">pointer</span> = &amp;amp;a;</span><br></pre></td></tr></table></figure></div><p><strong>迷之合法</strong><br>综上，数组初始化只能有</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="FORTRAN"><figure class="iseeu highlight /fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> *<span class="keyword">pointer</span> = &amp;amp;a;</span><br><span class="line">或者</span><br><span class="line"><span class="built_in">int</span> * <span class="keyword">pointer</span>;</span><br><span class="line"><span class="keyword">pointer</span> = &amp;amp;a;</span><br></pre></td></tr></table></figure></div><p><strong>两种方法</strong></p><h1 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h1><ul><li>不能通过改变指针形参的值而企图使指针实参的值发生改变（C语言在函数调用时只能单向值传递）</li><li>数组/指针作为形参时，传递的是对应的地址，改变形参的值可以改变实参</li><li>调用函数时形参指向实参，实际上指向同一个内存单元</li><li>如果用指针变量作为实参，指针变量必须要有具体的值，即必须指向对应已定义的对象</li></ul><p><strong>REMARK</strong>： 最重要的是可以改变指针的指向地址啊！！！！</p><h1 id="通过指针引用数组"><a href="#通过指针引用数组" class="headerlink" title="通过指针引用数组"></a>通过指针引用数组</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="XL"><figure class="iseeu highlight /xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">若<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">a</span>[0],则++p-&gt;</span>a[<span class="number">1</span>]</span><br><span class="line">若<span class="function"><span class="title">p</span>-&gt;</span>&amp;<span class="function"><span class="title">a</span>[0]，则++p-&gt;</span>&amp;a[<span class="number">1</span>]</span><br><span class="line">p1,p2指向同一个数组时，p2-p1表示相差元素的个数</span><br><span class="line"></span><br><span class="line">a[i] = *(a+i)</span><br><span class="line">&amp;a[i] = &amp;(a+i)</span><br></pre></td></tr></table></figure></div><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="number">1.</span> *a代表a[<span class="number">0</span>]的内容即a[<span class="number">0</span>]</span><br><span class="line"><span class="number">2.</span> a代表a[<span class="number">0</span>]的地址即&amp;a[<span class="number">0</span>]</span><br><span class="line"><span class="number">3.</span> *(a + <span class="number">1</span>) 代表a[i]的内容</span><br></pre></td></tr></table></figure></div><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MARKDOWN"><figure class="iseeu highlight /markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a[<span class="string">10</span>][<span class="symbol">10</span>];</span><br><span class="line"><span class="bullet">1. </span>*a代表a[<span class="string">0</span>][<span class="symbol">0</span>]的内容即a[<span class="string">0</span>][<span class="symbol">0</span>]</span><br><span class="line"><span class="bullet">2. </span>a代表a[<span class="string">0</span>][<span class="symbol">0</span>]的地址即&amp;a[<span class="string">0</span>][<span class="symbol">0</span>]</span><br><span class="line"><span class="bullet">3. </span>*(a + 1) 代表a[i]         行            的地址</span><br><span class="line"><span class="bullet">4. </span>*(a + 1) +1代表a[<span class="string">1</span>][<span class="symbol">1</span>]的地址，即&amp;a[<span class="string">1</span>][<span class="symbol">1</span>]</span><br><span class="line"><span class="bullet">5. </span><span class="emphasis">*(*</span>(a + 1) +1)代表a[<span class="string">1</span>][<span class="symbol">1</span>]的内容,即a[<span class="string">1</span>][<span class="symbol">1</span>]</span><br></pre></td></tr></table></figure></div><h2 id="字符指针"><a href="#字符指针" class="headerlink" title="字符指针"></a>字符指针</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *a;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d\n"</span>,a);</span><br></pre></td></tr></table></figure></div><p>坚决不能使用上面这种，a的指向地址无法预测，可能会修改系统中敏感位置的值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char <span class="number">*a</span>,arr[10];</span><br><span class="line"><span class="attribute">a</span>=arr;</span><br><span class="line">scanf(<span class="string">"%d\n"</span>,a);</span><br></pre></td></tr></table></figure></div><p>正确用法</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CPP"><figure class="iseeu highlight /cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> (p)(<span class="keyword">int</span> x,<span class="keyword">int</span> y);<span class="comment">//指向返回值位int的函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">p</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>= <span class="keyword">int</span> * (p(<span class="keyword">int</span> x,<span class="keyword">int</span> y))<span class="comment">//返回值为指针的函数</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="/posts/156538331.html"/>
      <url>/posts/156538331.html</url>
      
        <content type="html"><![CDATA[<h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="AWK"><figure class="iseeu highlight /awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="regexp">//gi</span>thub.com<span class="regexp">/saber110/</span>C_review</span><br></pre></td></tr></table></figure></div><h3 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h3><ul><li><p>fopen(filename,method)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="OXYGENE"><figure class="iseeu highlight /oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">method</span>:</span>r,w,a,rb,wb,ab,r+,w+,a+,rb+,wb+,ab+</span><br><span class="line"></span><br><span class="line">eg: <span class="keyword">if</span>((fp = fopen(filename,”w”))==NULL)<span class="comment">//判断是否打开成功</span></span><br></pre></td></tr></table></figure></div></li><li><p>fclose(filepointer)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>: success : 0,<span class="type">fail</span> : <span class="type">EOF</span>(即-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div></li><li><p>ch = fgetc(fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> : <span class="type">fail</span> : <span class="type">EOF</span></span><br></pre></td></tr></table></figure></div></li><li><p>fputc(ch,fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> : <span class="type">fail</span> : <span class="type">EOF</span></span><br></pre></td></tr></table></figure></div></li><li><p>fof(fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> : 文件结尾时返回0</span><br></pre></td></tr></table></figure></div></li><li><p>fgets(str,n,fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remark : 从<span class="type">fp</span>读入一个长度为n-<span class="number">1</span>的字符串并存放到str</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> : <span class="type">success</span> : <span class="type">str</span>地址 fail : <span class="keyword"><span class="keyword">NULL</span></span></span><br></pre></td></tr></table></figure></div></li><li><p>fputs(str,fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remark : 把<span class="type">str</span>的内容读到fp指向的文件</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> : <span class="type">success</span> : 0,<span class="type">fail</span> : !0</span><br></pre></td></tr></table></figure></div></li><li><p>fread(buffer, size, count, fp)</p></li><li><p>fwrite(buffer, size, count, fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ADA"><figure class="iseeu highlight /ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">remark :</span><br><span class="line"></span><br><span class="line">buffer : 要读入或输出的数据的地址</span><br><span class="line"> size : 要读写的字节书</span><br><span class="line"> count : 要读写的数据项个数(每个数据项的长度为<span class="type">size</span>)</span><br><span class="line"><span class="keyword">return</span> : <span class="type">success</span> : 1</span><br></pre></td></tr></table></figure></div></li><li><p>rewind(fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASIC"><figure class="iseeu highlight /basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">remark : 将指针位置返回到开头，无返回值</span></span><br></pre></td></tr></table></figure></div></li><li><p>fseek(fp,offset,type)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">para :<span class="built_in"> type </span>: 0—文件开始位置，1—当前位置，2—文件结束位置</span><br></pre></td></tr></table></figure></div></li><li><p>出错检测ferror(fp)</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ANGELSCRIPT"><figure class="iseeu highlight /angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> : 未出错为<span class="number">0</span>，出错不为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">一定要调用clearerr(fp)清掉报错</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言大坑</title>
      <link href="/posts/4035306291.html"/>
      <url>/posts/4035306291.html</url>
      
        <content type="html"><![CDATA[<h3 id="接下来就开始看看坑"><a href="#接下来就开始看看坑" class="headerlink" title="接下来就开始看看坑"></a>接下来就开始看看坑</h3><ul><li>单引号表示表示整数值</li><li>双引号表示字符串首的地址</li><li>以0开头的整数默认为八进制</li><li>按位与、按位或、或运算、与运算</li><li>注意使用移位运算加快程序执行速度</li><li>if(a&lt;b == c&lt;d) //比较a、b、c、d的相对大小关系是否一致</li><li>a[i] = i[a]</li><li>C语言的不对称边界</li><li>errno 外部出错变量，可以检测出错信息</li><li>break 跳出离他最近的那层循环或switch</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>raspberry_fingerprint</title>
      <link href="/posts/1887844997.html"/>
      <url>/posts/1887844997.html</url>
      
        <content type="html"><![CDATA[<ol><li><code>http://www.it1352.com/216181.html</code></li><li><code>http://www.docin.com/p-526335015.html</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chown :www-data /dev/ttyAMA0</span><br><span class="line">sudo chmod g+rw /dev/ttyAMA0</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> raspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI上传文件文件名乱码</title>
      <link href="/posts/3944560991.html"/>
      <url>/posts/3944560991.html</url>
      
        <content type="html"><![CDATA[<ol><li>修改<code>system—-libraries —–upload—–do_upload</code>中的相对应内容为<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( ! @copy(<span class="keyword">$this</span>-&gt;file_temp, iconv(“UTF<span class="number">-8</span>”, “gb2312”, <span class="keyword">$this</span>-&gt;upload_path.<span class="keyword">$this</span>-&gt;file_name)))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( ! @move_uploaded_file(<span class="keyword">$this</span>-&gt;file_temp, iconv(“UTF<span class="number">-8</span>”, “gb2312”, <span class="keyword">$this</span>-&gt;upload_path.<span class="keyword">$this</span>-&gt;file_name)))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set_error(‘upload_destination_error’);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>修改同文件中的set_filename<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_filename</span><span class="params">($path, $filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;encrypt_name == <span class="keyword">TRUE</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    mt_srand();</span><br><span class="line">    $filename = md5(uniqid(mt_rand())).<span class="keyword">$this</span>-&gt;file_ext;</span><br><span class="line">  &#125;</span><br><span class="line">  $filename = iconv(‘UTF<span class="number">-8</span>’, ‘GB2312’, $filename);<span class="comment">//将$filename中的文件名转换为GB2312编码</span></span><br><span class="line">  <span class="keyword">if</span> ( ! file_exists($path.$filename))</span><br><span class="line">  &#123;</span><br><span class="line">    $filename = iconv(‘GB2312’, ‘UTF<span class="number">-8</span>’, $filename);<span class="comment">//将编码转回UTF-8</span></span><br><span class="line">    <span class="keyword">return</span> $filename;</span><br><span class="line">  &#125;</span><br><span class="line">  $filename = str_replace(<span class="keyword">$this</span>-&gt;file_ext, ‘’, $filename);</span><br><span class="line">  $new_filename = ‘’;</span><br><span class="line">  <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt; <span class="number">100</span>; $i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( ! file_exists($path.$filename.$i.<span class="keyword">$this</span>-&gt;file_ext))</span><br><span class="line">    &#123;</span><br><span class="line">      $new_filename = $filename.$i.<span class="keyword">$this</span>-&gt;file_ext;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ($new_filename == ‘’)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;set_error(‘upload_bad_filename’);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">FALSE</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    $new_filename = iconv(‘GB2312’, ‘UTF<span class="number">-8</span>’, $new_filename);<span class="comment">//将编码转回UTF-8</span></span><br><span class="line">    <span class="keyword">return</span> $new_filename;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能指纹门锁开发</title>
      <link href="/posts/614845674.html"/>
      <url>/posts/614845674.html</url>
      
        <content type="html"><![CDATA[<h3 id="需求起源"><a href="#需求起源" class="headerlink" title="需求起源"></a>需求起源</h3><p>由于本人所在学校组织成员较多，然后钥匙管理就成了一个很大的问题，基本上会很频繁的发生钥匙找不到啊、钥匙被锁在办公室里面了啊等多种事情，所以萌发了这个念头。</p><h3 id="动力"><a href="#动力" class="headerlink" title="动力"></a>动力</h3><p>正好借着武汉黑客马拉松的借口，然后跟着我们云麓谷大佬的脚步一起去混了次比赛，当时大佬就说咱们做这个智能门锁吧。本着为组织服务，提升自身逼格的理念我们就开搞了。</p><h3 id="艰辛的通信之路"><a href="#艰辛的通信之路" class="headerlink" title="艰辛的通信之路"></a>艰辛的通信之路</h3><p>本人在团队中充当一个硬件开发（划水）的角色，为了开发方便就直接选用了某宝的自动指纹对比模块—–PS1802指纹识别模块，树莓派开发板—–Raspberry Pi B+，usb转TTL—–CH340以及杜邦线若干。</p><h5 id="跟据千古不变的硬件开发理念，拿到东西首先测试是否完好、功能是否异常、外观是否破损、有没有送女朋友之类的。所以诞生了如下步骤："><a href="#跟据千古不变的硬件开发理念，拿到东西首先测试是否完好、功能是否异常、外观是否破损、有没有送女朋友之类的。所以诞生了如下步骤：" class="headerlink" title="跟据千古不变的硬件开发理念，拿到东西首先测试是否完好、功能是否异常、外观是否破损、有没有送女朋友之类的。所以诞生了如下步骤："></a>跟据千古不变的硬件开发理念，拿到东西首先测试是否完好、功能是否异常、外观是否破损、有没有送女朋友之类的。所以诞生了如下<strong>步骤</strong>：</h5><ul><li>检查硬件连接以及货物清单。</li><li>用usb转TTL工具连接指纹模块和电脑，用老板发我的上位机进行测试，目测一切正常。（硬件测试方法和上位机试用方法都在链接里）。</li><li>既然确保硬件没问题了就可以开始开发了，选用C语言进行硬件底层开发，php调用C的接口实现高级开发和管理 。硬件使用UART[通用异步收发传输器]进行树莓派和指纹模块之间的通信</li><li>首先设置模块的通信速率为115200，加快系统响应。其次给树莓派安装wiringpi，然后开发的代码都在此处。</li></ul><h5 id="接下来真正来通信（接下来说到的陌生的东西都在SendUART-c里）"><a href="#接下来真正来通信（接下来说到的陌生的东西都在SendUART-c里）" class="headerlink" title="接下来真正来通信（接下来说到的陌生的东西都在SendUART.c里）"></a>接下来真正来通信（接下来说到的陌生的东西都在SendUART.c里）</h5><ul><li>树莓派的官方库是不支持直接发十六进制的东西的，但是指纹模块的命令必须是十六进制才能响应。</li><li>讲默认发送的ascii转为十六进制ASCI_16()</li><li>很快就出现了新的问题，用这种方法发送的数据总是单个单个发出去 然后前面以0补足缺的位，所以还是不能成功的控制树莓派。</li><li>所以就催生了implode()</li><li>经过这样的折腾总算是能单向操作树莓派了，但是要接受树莓派回过来的消息并且确定其工作状态是一件很不容易的事情呐，由于不太熟悉wiringpi库的试用，我就分为几种接收长度的情况进行命令和数据接收（指纹模块回的指令分为命令应答、数据应答和普通应答，他们的长度不一），跟据不同的数据长度进行读取数据并且存入数组一并返回</li><li>C语言涉及到的差不多就是这些了，试用之前一定记得在树莓派上编译哦<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gcc SendUART.c -o SendUART -lwiringPi</span><br><span class="line">sudo gcc close.c -o close -lwiringPi</span><br></pre></td></tr></table></figure></div></li><li>close文件是在长期加载失败之后手工关掉树莓派的uart设备的。</li></ul><h3 id="PHP篇"><a href="#PHP篇" class="headerlink" title="PHP篇"></a>PHP篇</h3><ul><li><p>C语言写完接口之后为了更方便的给大家使用继而写了php的接口，顺便加进去了状态码用于判断指纹模块响应的正误——–本人做的工作到此结束</p></li><li><p>如果大家调用了什么不该调用的接口或者自己开发接口的时候碰到死活执行不完的情况那么请大家重启Apache</p></li><li><p><code>sudo service apache2 restart</code></p></li><li><p>接下来是胡扯</p></li><li><p>搭完硬件和部署完我们的代码之后就可以在浏览器上访问树莓派的ip加我们的访问链接进行控制。</p></li><li><p>这只是一个小小的开头，现在只是局域网控制，到后面可以抽时间做一下内网穿透，然后和已有的员工信息库绑定进行更强大更智能的开发工作。</p></li><li><p>要不就先更到这儿吧</p></li><li><p>此处是<a href="https://github.com/saber110/remote_lock" target="_blank" rel="noopener">代码</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用字蛛压缩字体文件实现网站加速</title>
      <link href="/posts/3623710045.html"/>
      <url>/posts/3623710045.html</url>
      
        <content type="html"><![CDATA[<h3 id="这是一个神奇的东西"><a href="#这是一个神奇的东西" class="headerlink" title="这是一个神奇的东西"></a>这是一个神奇的东西</h3><p>个人开发的时候使用了艺术字体，由于谷歌和微软等巨头没有收录,为了缩短服务加载时间，本人找到两种方法</p><ul><li>cdn加速，腾讯云目前进行免费cdn加速服务，但是由于使用的域名没有进行备案，所以 pass</li><li>使用字蛛 压缩所使用的字体文件<br>#####下面是坑<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: 'xixinkaijian';</span><br><span class="line">    src:url('../fonts/xixinkaijian.eot');</span><br><span class="line">    src:</span><br><span class="line">        url('../fonts/xixinkaijian.eot?#font-spider') format('embedded-opentype'),</span><br><span class="line">        url('../fonts/xixinkaijian.woff') format('woff'),</span><br><span class="line">        url('../fonts/xixinkaijian.ttf') format('truetype'),</span><br><span class="line">        url('../fonts/xixinkaijian.svg') format('svg');</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line">`<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>`@font-face &#123;</span><br><span class="line">    font-family: 'hycgj';</span><br><span class="line">    src:url('../fonts/hycgj.eot');</span><br><span class="line">    src:</span><br><span class="line">        url('../fonts/hycgj.ttf') format('truetype'),</span><br><span class="line">        url('../fonts/hycgj.eot?#font-spider') format('embedded-opentype'),</span><br><span class="line">        url('../fonts/hycgj.woff') format('woff'),</span><br><span class="line">        url('../fonts/hycgj.svg') format('svg');</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line">`<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>`@font-face &#123;</span><br><span class="line">    font-family: 'hyngj';</span><br><span class="line">    src:url('../fonts/hyngj.eot');</span><br><span class="line">    src:</span><br><span class="line">        url('../fonts/hyngj.ttf') format('truetype'),</span><br><span class="line">        url('../fonts/hyngj.eot?#font-spider') format('embedded-opentype'),</span><br><span class="line">        url('../fonts/hyngj.woff') format('woff'),</span><br><span class="line">        url('../fonts/hyngj.svg') format('svg');</span><br><span class="line">    font-weight: normal;</span><br><span class="line">    font-style: normal;</span><br><span class="line">&#125;</span><br><span class="line">`<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#此处需注意font_1前面没有像平常引用地址的**小数点**</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>`font_1 p &#123;</span><br><span class="line">    font-family: 'xixinkaijian';</span><br><span class="line">&#125;</span><br><span class="line">`<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>`font_2 p &#123;</span><br><span class="line">    font-family: 'hycgj';</span><br><span class="line">&#125;</span><br><span class="line">`<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>`font_3 p &#123;</span><br><span class="line">    font-family: 'hyngj';</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用ESP8266-12F_Wifi模块进行通信流程</title>
      <link href="/posts/3334855695.html"/>
      <url>/posts/3334855695.html</url>
      
        <content type="html"><![CDATA[<p>使用ESP8266-12F Wifi模块进行通信的套路体会<br>###一、接线流程</p><p>在最初测试时，可使用usb转ttl串口进行接线，接线流程比较简单。将模块VCC，EN端接3.3V电源，GPIO15,GND端接地，模块TX,RX端分别接串口工具的RX,TX端，其余管脚悬空既可。</p><h5 id="在接线过程中注意点如下。"><a href="#在接线过程中注意点如下。" class="headerlink" title="在接线过程中注意点如下。"></a>在接线过程中注意点如下。</h5><p>用3.3V/800mA独立电源供电，需要共地。</p><p>保证CH_PD（EN） 也就是芯片选通脚为高电平，GPIO15(也就是MTDO)为低电平。并且CH_PD端与独立电源之间，GPIO15与地之间，需要分别连接阻值为10k的电阻。（如原理图所示）。</p><p>注：RST 引脚低电平复位，不需要可以悬空。GPIO0在下载固件时需要拉低。</p><p>###二、调试流程</p><h5 id="命令在后面必须要有回车发送，"><a href="#命令在后面必须要有回车发送，" class="headerlink" title="命令在后面必须要有回车发送，"></a>命令在后面必须要有<strong>回车</strong>发送，</h5><p>调试使用<em>AT</em>指令。以下简单介绍四种模式的调试流程。</p><ul><li><p>模块ap模式下做 tcp server</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE=<span class="number">2</span>或AT+CWMODE=<span class="number">3</span>       <span class="comment">//开启 AP 模式</span></span><br><span class="line">AT+RST                         <span class="comment">//复位</span></span><br><span class="line">AT+CWSAP=<span class="string">"TEST"</span>,<span class="string">"123456789A"</span>,<span class="number">3</span>,<span class="number">0</span> <span class="comment">//设置模块的 wifi 和密码</span></span><br><span class="line">AT+CIPMUX=<span class="number">1</span>                     <span class="comment">//打开多连接</span></span><br><span class="line">AT+CIPSERVER=<span class="number">1</span>,<span class="number">8080</span>           <span class="comment">//1表示开启server模式，8080为端口号</span></span><br><span class="line">AT+CIPSTO=<span class="number">7200</span>                 <span class="comment">//设置服务器超时时间为7200s</span></span><br><span class="line">AT+CIPSEND=<span class="number">0</span>,<span class="number">10</span> <span class="comment">//进入数据发送模式为十个字节,即可发送数据</span></span><br></pre></td></tr></table></figure></div></li><li><p>模块sta模式下做 tcp client</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE=<span class="number">1</span>   <span class="comment">//开启STA模式</span></span><br><span class="line">AT+RST <span class="comment">//复位</span></span><br><span class="line">AT+CWLAP <span class="comment">//查看附近的 wifi</span></span><br><span class="line">AT+CWJAP=<span class="string">"TEST"</span>,<span class="string">"123456789A"</span> <span class="comment">//连接 wifi, 后面为密码</span></span><br><span class="line">AT+CIFSR <span class="comment">//查看模块的分配的 ip</span></span><br><span class="line">AT+CIPMUX=<span class="number">1</span> <span class="comment">//打开多连接</span></span><br><span class="line">AT+CIPSTART=<span class="number">0</span>，<span class="string">"TCP"</span>,<span class="string">"192.168.4.1"</span>,<span class="number">8080</span> 设置ip和端口号，发送 AT 指令去连接。</span><br><span class="line">AT+CIPSEND=<span class="number">0</span>,<span class="number">10</span> <span class="comment">//进入数据发送模式为十个字节,即可发送数据</span></span><br></pre></td></tr></table></figure></div></li><li><p>模块做tcp透传</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE=<span class="number">1</span>   <span class="comment">//开启STA模式</span></span><br><span class="line">AT+RST <span class="comment">//复位</span></span><br><span class="line">AT+CWLAP <span class="comment">//查看附近的 wifi</span></span><br><span class="line">AT+CWJAP=<span class="string">"TEST"</span>,<span class="string">"123456789A"</span> <span class="comment">//连接 wifi, 后面为密码</span></span><br><span class="line">AT+CIFSR <span class="comment">//查看模块的分配的 ip</span></span><br><span class="line">AT+CIPMUX=<span class="number">0</span><span class="comment">//设置单连接</span></span><br><span class="line">AT+CIPMODE=<span class="number">1</span><span class="comment">//设置透传模式</span></span><br><span class="line">AT+CIPSTART=<span class="string">"TCP"</span>,<span class="string">"192.168.4.1"</span>,<span class="number">8080</span><span class="comment">// 连接server端的ip和端口</span></span><br><span class="line">AT+CIPSEND <span class="comment">//开始发送数据</span></span><br><span class="line">+++ <span class="comment">//退出透传，此处应取消发送新行</span></span><br></pre></td></tr></table></figure></div></li><li><p>模块做udp透传</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">AT+CWMODE=<span class="number">1</span>   <span class="comment">//开启STA模式</span></span><br><span class="line">AT+RST <span class="comment">//复位</span></span><br><span class="line">AT+CWLAP <span class="comment">//查看附近的 wifi</span></span><br><span class="line">AT+CWJAP=<span class="string">"TEST"</span>,<span class="string">"123456789A"</span> <span class="comment">//连接 wifi, 后面为密码</span></span><br><span class="line">AT+CIFSR <span class="comment">//查看模块的分配的 ip</span></span><br><span class="line">AT+CIPSTART=“UDP”,<span class="string">"255.255.255.255"</span>,<span class="number">8080</span>,<span class="number">8080</span>,<span class="number">0</span><span class="comment">//建立udp连接，前8080为对方端口，后8080为模块端口</span></span><br><span class="line">AT+CIPMODE=<span class="number">1</span><span class="comment">//设置透传模式</span></span><br><span class="line">AT+CIPSEND <span class="comment">//开始发送数据</span></span><br><span class="line">+++ <span class="comment">//退出透传，此处应取消发送新行</span></span><br></pre></td></tr></table></figure></div><h5 id="使用串口助手对单个wifi模块进行测试，注意事项如下。"><a href="#使用串口助手对单个wifi模块进行测试，注意事项如下。" class="headerlink" title="使用串口助手对单个wifi模块进行测试，注意事项如下。"></a>使用串口助手对单个wifi模块进行测试，注意事项如下。</h5></li><li><p>配置模式为波特率：115200、数据位：8 校验位/停止位/流控：none</p></li><li><p>使用AT指令进行调试时，记住发送指令时要勾选“发送新行选项”。即指令需要换行（0x0d+0x0a）</p><h5 id="使用两个wifi模块进行通讯形式如下。"><a href="#使用两个wifi模块进行通讯形式如下。" class="headerlink" title="使用两个wifi模块进行通讯形式如下。"></a>使用两个wifi模块进行通讯形式如下。</h5><h6 id="服务器与客户端进行tcp通信"><a href="#服务器与客户端进行tcp通信" class="headerlink" title="服务器与客户端进行tcp通信"></a>服务器与客户端进行tcp通信</h6></li><li><p>按之前的步骤，将两模块分别设置成tcp server与tcp client即可实现双向通信。</p></li><li><p>该模式下，两模块间传输数据需要限定长度。</p></li><li><p>若客户端连不进服务器的热点，服务器应该执行_复位_指令，等待一段时间即可。</p></li><li><p>掉电后会自动退出server模式，需要重新初始化，初始化AT指令流程截图如下。</p></li><li><p>客户端掉电，服务器未掉。上电后只初始化客户端，依然不能实现数据双向传输。服务器需要关闭 server收发模式再重新开启，即可解决问题。</p></li><li><p>恢复出厂设置指令：<code>AT+RESTORE</code></p><h6 id="进行tcp透传"><a href="#进行tcp透传" class="headerlink" title="进行tcp透传"></a>进行tcp透传</h6></li><li><p>将一个模块设置成tcp server，另一个按照tcp透传进行调试即可。</p></li><li><p>透传只能在单连接模式下进行，所以在建立连接之前一定要用（AT+CIPMUX=0 设置单连接），但是模块处于服务器模式下时，必须要多链接，由于冲突，所以模块开启服务器模式不能做tcp透传。因此，该模式下，客户端像服务器发送数据可不限长度，服务器发送数据则需要限定长度。</p></li><li><p>其他调试方法同上。</p><h6 id="进行udp透传"><a href="#进行udp透传" class="headerlink" title="进行udp透传"></a>进行udp透传</h6></li><li><p>需要外界提供wifi热点</p></li><li><p>将两个wifi模块连接至统一wifi热点，按照udp透传进行调试。</p></li><li><p>对于建立udp连接的指令，如需要实现多端通信，则ip地址应输入广播域“255.255.255.255”，并需要设为同一端口。</p><h6 id="使用单片机发送指令至wifi模块，使用uart通信协议。"><a href="#使用单片机发送指令至wifi模块，使用uart通信协议。" class="headerlink" title="使用单片机发送指令至wifi模块，使用uart通信协议。"></a>使用单片机发送指令至wifi模块，使用uart通信协议。</h6></li></ul><ol><li>非透传模式</li></ol><ul><li>服务器初始化代码如下。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_ServerInit</span><span class="params">()</span> <span class="comment">//服务器初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPMUX=1"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSERVER=1,8080"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSTO=7200"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>客户端初始化代码如下。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_tcp_ClientInit</span><span class="params">()</span> <span class="comment">//客户端初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPMUX=1"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSTART=0,"</span>TCP<span class="string">","</span><span class="number">192.168</span><span class="number">.4</span><span class="number">.1</span><span class="string">",8080"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>发送数据代码如下。<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_Send_Data</span><span class="params">(uint8 Id,uint8 Len,uint8 *str)</span> <span class="comment">//写指定长度的数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSEND=%d,%d"</span>,Id,Len);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">1</span>);</span><br><span class="line">  uart_putstr(UART4,str);   <span class="comment">//数据长度满才可发送</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><p>2.UDP透传模式</p><ul><li>客户端udp初始化<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_Udp_ClientInit</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//客户端udp初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPMUX=0"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSTART="</span>UDP<span class="string">","</span><span class="number">255.255</span><span class="number">.255</span><span class="number">.255</span><span class="string">",8080,8080,0"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPMODE=1"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>进入透传模式<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_Udp_SendData</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//发送数据指令，进入透传</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"AT+CIPSEND"</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0d</span>);</span><br><span class="line">  uart_putchar(UART4,<span class="number">0x0a</span>);</span><br><span class="line">  DELAY_MS(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li>退出透传模式<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wifi_Udp_Send_End</span><span class="params">(<span class="keyword">void</span>)</span><span class="comment">//退出透传</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"+++"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派语音对话</title>
      <link href="/posts/1756176446.html"/>
      <url>/posts/1756176446.html</url>
      
        <content type="html"><![CDATA[<p>###代码</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/luyishisi/python_yuyinduihua</span><br></pre></td></tr></table></figure></div><p>###安装环境</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pyaudio</span><br><span class="line">pip install numpy</span><br></pre></td></tr></table></figure></div><h3 id="先安裝-curl"><a href="#先安裝-curl" class="headerlink" title="先安裝 curl"></a>先安裝 curl</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget  http://curl.haxx.se/download/curl-7.21.3.tar.gz</span><br><span class="line">tar xzf curl-7.21.3.tar.gz</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></div><h3 id="然後安装-pycurl"><a href="#然後安装-pycurl" class="headerlink" title="然後安装 pycurl"></a>然後安装 pycurl</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://pycurl.sourceforge.net/download/pycurl-7.19.0.tar.gz</span><br><span class="line">tar xzf pycurl-7.19.0.tar.gz</span><br><span class="line">python setup.py install --curl-config=/usr/<span class="built_in">local</span>/bin/curl-config</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css指纹效果</title>
      <link href="/posts/765759357.html"/>
      <url>/posts/765759357.html</url>
      
        <content type="html"><![CDATA[<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>css指纹效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.start</span></span></span><br><span class="line">&#123;</span><br><span class="line">animation-play-state:paused;position: absolute; top: 0 ;left: 0; width:100px; height: 10px; background:url(http://denghao.me/demo/2015/fingerScan/line.png) center no-repeat; background-size: 100%; -webkit-animation:act-scan 2s linear infinite alternate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.finish</span></span></span><br><span class="line">&#123;</span><br><span class="line">position: absolute; top: 0 ;left: 0; width:100px; height: 10px; background:url(http://denghao.me/demo/2015/fingerScan/line.png) center no-repeat; background-size: 100%;animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.beijing</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#009</span>;<span class="selector-tag">color</span>: <span class="selector-id">#9FF</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.print</span></span></span><br><span class="line">&#123;</span><br><span class="line"><span class="css"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>; <span class="selector-tag">height</span><span class="selector-pseudo">:132px</span>; <span class="selector-tag">background</span>:</span></span><br><span class="line">url(http://denghao.me/demo/2015/fingerScan/finger.png) center no-repeat; background-size: 100%; position: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.print</span> <span class="selector-class">.scan</span></span></span><br><span class="line">&#123;</span><br><span class="line">position: absolute; top: 0 ;left: 0; width:100px; height: 10px; background:url(http://denghao.me/demo/2015/fingerScan/line.png) center no-repeat; background-size: 100%;-webkit-animation:act-scan 2s linear infinite alternate;animation-play-state: paused;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="keyword">@-webkit-keyframes</span> act-scan&#123;</span></span><br><span class="line"><span class="css">0%&#123; <span class="attribute">top</span>:<span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="css">50%&#123; <span class="attribute">top</span>:<span class="number">120px</span>; &#125;</span></span><br><span class="line"><span class="css">100%&#123; <span class="attribute">top</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="keyword">@keyframes</span> act-scan&#123;</span></span><br><span class="line"><span class="css">0%&#123; <span class="attribute">top</span>:<span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="css">50%&#123; <span class="attribute">top</span>:<span class="number">120px</span>; &#125;</span></span><br><span class="line"><span class="css">100%&#123; <span class="attribute">top</span>:<span class="number">0</span>;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"beijing"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"print"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scan"</span> <span class="attr">align</span> = <span class="string">"center"</span> <span class="attr">id</span> = <span class="string">"scannow"</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://denghao.me/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> it = <span class="built_in">document</span>.getElementById(<span class="string">'scannow'</span>);</span></span><br><span class="line"><span class="javascript">$(<span class="string">".print"</span>).on(<span class="string">"touchstart"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line">event.preventDefault();</span><br><span class="line">call();</span><br><span class="line"><span class="actionscript">it.className=<span class="string">"start"</span>;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">$(<span class="string">".print"</span>).on(<span class="string">"touchend"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line">event.preventDefault();</span><br><span class="line">clearInterval(timer1);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">timer1 = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"你好啊"</span>);</span></span><br><span class="line">&#125;, 1000);</span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">'scannow'</span>).className=<span class="string">"finish"</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows和linux互传文件</title>
      <link href="/posts/3556896672.html"/>
      <url>/posts/3556896672.html</url>
      
        <content type="html"><![CDATA[<h3 id="给windows安装winscp"><a href="#给windows安装winscp" class="headerlink" title="给windows安装winscp"></a>给windows安装winscp</h3><p>1.填写连接</p><p>2.权限问题</p><p>permission denied</p><p>可以先传到/tmp文件夹再mv</p><p>也可以直接更改目标文件夹为777</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux配置Call to undefined function mcrypt_decrypt()+大杂烩</title>
      <link href="/posts/1770279608.html"/>
      <url>/posts/1770279608.html</url>
      
        <content type="html"><![CDATA[<ul><li>php5.4 ubuntu14.04<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo php5enmod mcrypt</span><br><span class="line">$ sudo service apache2 restart</span><br></pre></td></tr></table></figure></div></li><li>php7.0 ubuntu16.04<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt php-mcrypt</span><br><span class="line">sudo phpenmod mcrypt</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></div></li><li>ubuntu安装curl<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install php-curl</span><br></pre></td></tr></table></figure></div>更改php.ini 开启`curl(/etc/php/7.0/apache2/php.ini)``<br>重启apache2<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="ROUTEROS"><figure class="iseeu highlight /routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo<span class="built_in"> service </span>apache2 restart</span><br></pre></td></tr></table></figure></div></li><li>php gd库的安装<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php gd</span><br></pre></td></tr></table></figure></div>更改php.ini 开启curl(<code>/etc/php/7.0/apache2/php.ini</code>)重启apache2<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></div></li><li>ubuntu 开启对.htaccess的支持<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure></div>配置<code>/etc/apache2/apache2.conf</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AccessFileName .htaccess</span><br><span class="line">&lt;Directory /var/www/html&gt;</span><br><span class="line">                Options Indexes FollowSymLinks MultiViews</span><br><span class="line">                AllowOverride All</span><br><span class="line">                Order allow,deny</span><br><span class="line">                allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></div></li><li>mysql自增起始值设置<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table users（表名） AUTO_INCREMENT=10000（起始值）;</span><br></pre></td></tr></table></figure></div></li><li>ssl https配置<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.linuxidc.com/Linux/2015-02/113588.htm</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fatal error Class &#39;ZipArchive&#39; not found ......</title>
      <link href="/posts/2909455182.html"/>
      <url>/posts/2909455182.html</url>
      
        <content type="html"><![CDATA[<h4 id="史上最强悍的解决方案"><a href="#史上最强悍的解决方案" class="headerlink" title="史上最强悍的解决方案"></a>史上最强悍的解决方案</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu : sudo apt-get install php7.0-zip</span><br></pre></td></tr></table></figure></div><h4 id="下面是装逼"><a href="#下面是装逼" class="headerlink" title="下面是装逼"></a>下面是装逼</h4><ul><li><p>在Linux下没有php_zip.dll这个文件（有也不会起作用的），所以需要重新编译一下php的zip模块。具体安装方法如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/src</span><br><span class="line">wget http://pecl.php.net/get/zip</span><br><span class="line">tar -zxvf zip</span><br><span class="line"><span class="built_in">cd</span> zip-1.x.x</span><br><span class="line">phpize</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></div><p>安装完之后，屏幕上会提示zip.so的位置。然后将其记录下来，如：<code>/usr/lib/php/20151012/zip.so</code></p></li><li><p>使用root权限修改php.ini（通常可能会在/usr/local/lib/文件夹下，不过视当初安装php而定，可以通过phpinfo()来查看）：</p></li><li><p>增加</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension = /usr/<span class="built_in">local</span>/lib/php/extensions/zip.so</span><br></pre></td></tr></table></figure></div><p>然后同样在php.ini文件中，将</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zlib.output_compression = Off</span><br></pre></td></tr></table></figure></div><p>改为</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zlib.output_compression = On</span><br></pre></td></tr></table></figure></div></li><li><p>最后别忘了重启一下Apache：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初次涉猎Qt</title>
      <link href="/posts/3223976295.html"/>
      <url>/posts/3223976295.html</url>
      
        <content type="html"><![CDATA[<ul><li>最近一直沉迷于智能小车无法自拔（虽然跪在了华南赛，但是热情还是有的），想当初做的是双车追逐组，当时确实是玩的挺浪。起初用ccd做双车，各种效果都不错，但是呢，老师总是说ccd识别容易出问题，迫于压力换成了摄像头（人生的三叉路口迷失了方向），十天的时间跑到了两米三，想当初也是拼哈。但是也引发了一系列的问题，最头疼的就是距离的稳定测量，由于配置了摄像头用了两个中断，其中包括一个频率很高的像素中断（大概20Us一次，必须配置成最高优先级，以防止图像抖动或发生实质性变动），这就有可能打断了距离测量的中断，这样就可能延长了距离的测量时间因此得到的数值也会变得比较大，这对距离的闭环有很大的影响，可以说都可以完全破坏距离机制。</li><li>至于这个原因为什么扯到了Qt，我就说一句，Qt是个很好的上位机开发工具。</li><li>刚刚学习Qt，顺便记录一点过程中比较关键的东西。</li><li>Qt完全跟C++相似，这也就容易上手。（完全无厘头）</li></ul><h3 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">QApplication</span><br><span class="line">Qlabel</span><br><span class="line">QPushButton QObject::<span class="built_in">connect</span></span><br><span class="line">QSpinBoxaddWidget() 上下三角选值</span><br><span class="line">QSlideaddWidget()水平滑条</span><br></pre></td></tr></table></figure></div><h3 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Qt一共有三种主要的layout，分别是：</span><br><span class="line">QHBoxLayout- 按照水平方向从左到右布局；</span><br><span class="line">QVBoxLayout- 按照竖直方向从上到下布局；</span><br><span class="line">QGridLayout- 在一个网格中进行布局，类似于HTML的table。</span><br><span class="line">layout使用addWidget添加组件，使用addLayout可以添加子布局，因此，这就有了无穷无尽的组合方式。</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh登录腾讯云服务器</title>
      <link href="/posts/986637382.html"/>
      <url>/posts/986637382.html</url>
      
        <content type="html"><![CDATA[<h3 id="获取云服务器密钥登录Linux云服务器："><a href="#获取云服务器密钥登录Linux云服务器：" class="headerlink" title="获取云服务器密钥登录Linux云服务器："></a>获取云服务器密钥登录Linux云服务器：</h3><p>（注：无论您电脑的操作系统是windows还是linux，都可以采用SSH密钥登录的方式远程登录linux云服务器）。</p><ul><li><p>首页登录腾讯云官网的“管理中心”，</p></li><li><p>接着在左侧导航栏“SSH密钥”进入SSH密钥管理界面；点击“创建密钥”按钮，输入密钥名，创建一个新密钥，创建完密钥后</p></li><li><p>点击“下载”按钮，下载私钥。</p></li><li><p>然后右键点击刚创建的密钥，绑定需要登录的服务器；</p></li><li><p>绑定完服务器后，左键点击密钥，界面右侧滑出密钥详细页。如下图所示：<br>密钥登陆Linux.jpg</p></li><li><p>在密钥详细页中，将“公钥内容”复制到一个空白文本文档中，保存用户名为密钥名（即刚刚新建的密钥的名称），并修改文档后缀名为“.pub”（注：公钥名与私钥名必须相同，并且须放置在同一文件夹下）。如下图所示：</p></li><li><p>下载xshell，文件 – 新建——在主机处填写要连接的服务器的ip地址，然后点击确定</p></li><li><p>根据提示选择密钥文件（私钥），点击确定</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸳鸯测距使用防坑</title>
      <link href="/posts/1671835932.html"/>
      <url>/posts/1671835932.html</url>
      
        <content type="html"><![CDATA[<p>这两天使用超声波测距（鸳鸯测距）来实现双车通信，但是使用时碰到了特别多的坑，理论上来说测到的距离是一条非常平滑的线，但是在使用的时候就出现了各种波动。<br>V4传说是180度测距，V5是360度测距，但是V4实际使用的时候只有90度左右，V5确实是360度，但是在前车的左右两旁会出现距离跳变。</p><p>实际测量的曲线波动特别有规律，一般的滤波方法根本无能为力，在探索了三天之后，得到这些滤波方法：</p><h4 id="限幅滤波法-又称程序判断滤波法"><a href="#限幅滤波法-又称程序判断滤波法" class="headerlink" title="限幅滤波法(又称程序判断滤波法)"></a>限幅滤波法(又称程序判断滤波法)</h4><ul><li>方法:<br>根据经验判断,确定两次采样允许的最大偏差值(设为A)<br>每次检测到新值时判断:<ul><li>如果本次值与上次值之差&lt;=A,则本次值有效</li><li>如果本次值与上次值之差&gt;A,则本次值无效,放弃本次值,用上次值代替本次值</li></ul></li><li>优点:<br>能有效克服因偶然因素引起的脉冲干扰</li><li>缺点<ul><li>无法抑制那种周期性的干扰</li><li>平滑度差<h4 id="中位值滤波法"><a href="#中位值滤波法" class="headerlink" title="中位值滤波法"></a>中位值滤波法</h4></li></ul></li><li>方法:<ul><li>连续采样N次(N取奇数)</li><li>把N次采样值按大小排列</li><li>取中间值为本次有效值</li></ul></li><li>优点:<ul><li>能有效克服因偶然因素引起的波动干扰</li><li>对温度、液位的变化缓慢的被测参数有良好的滤波效果</li></ul></li><li>缺点:<ul><li>对流量、速度等快速变化的参数不宜<h4 id="算术平均滤波法"><a href="#算术平均滤波法" class="headerlink" title="算术平均滤波法"></a>算术平均滤波法</h4></li></ul></li><li>方法:<ul><li>连续取N个采样值进行算术平均运算</li><li>N值较大时:信号平滑度较高,但灵敏度较低</li><li>N值较小时:信号平滑度较低,但灵敏度较高</li><li>N值的选取:一般流量,N=12;压力:N=4</li></ul></li><li>优点:<ul><li>适用于对一般具有随机干扰的信号进行滤波</li><li>这样信号的特点是有一个平均值,信号在某一数值范围附近上下波动</li></ul></li><li>缺点:<ul><li>对于测量速度较慢或要求数据计算速度较快的实时控制不适用</li><li>比较浪费RAM</li></ul></li></ul><h4 id="递推平均滤波法-又称滑动平均滤波法"><a href="#递推平均滤波法-又称滑动平均滤波法" class="headerlink" title="递推平均滤波法(又称滑动平均滤波法)"></a>递推平均滤波法(又称滑动平均滤波法)</h4><ul><li>方法:<ul><li>把连续取N个采样值看成一个队列</li><li>队列的长度固定为N</li><li>每次采样到一个新数据放入队尾,并扔掉原来队首的一次数据.(先进先出原则)<br>把队列中的N个数据进行算术平均运算,就可获得新的滤波结果</li><li>N值的选取:流量,N=12;压力:N=4;液面,N=4<del>12;温度,N=1</del>4</li></ul></li><li>优点:<ul><li>对周期性干扰有良好的抑制作用,平滑度高</li><li>适用于高频振荡的系统</li></ul></li><li>缺点:<ul><li>灵敏度低</li><li>对偶然出现的脉冲性干扰的抑制作用较差</li><li>不易消除由于脉冲干扰所引起的采样值偏差</li><li>不适用于脉冲干扰比较严重的场合</li><li>比较浪费RAM</li></ul></li></ul><h4 id="中位值平均滤波法-又称防脉冲干扰平均滤波法"><a href="#中位值平均滤波法-又称防脉冲干扰平均滤波法" class="headerlink" title="中位值平均滤波法(又称防脉冲干扰平均滤波法)"></a>中位值平均滤波法(又称防脉冲干扰平均滤波法)</h4><ul><li>方法:<ul><li>相当于“中位值滤波法”+“算术平均滤波法”</li><li>连续采样N个数据,去掉一个最大值和一个最小值</li><li>然后计算N-2个数据的算术平均值</li><li>N值的选取:3~14</li></ul></li><li>优点:<ul><li>融合了两种滤波法的优点</li><li>对于偶然出现的脉冲性干扰,可消除由于脉冲干扰所引起的采样值偏差</li></ul></li><li>缺点:<ul><li>测量速度较慢,和算术平均滤波法一样</li><li>比较浪费RAM</li></ul></li></ul><p>####限幅平均滤波法</p><ul><li>方法:<ul><li>相当于“限幅滤波法”+“递推平均滤波法”</li><li>每次采样到的新数据先进行限幅处理,</li><li>再送入队列进行递推平均滤波处理</li></ul></li><li>优点:<ul><li>融合了两种滤波法的优点</li><li>对于偶然出现的脉冲性干扰,可消除由于脉冲干扰所引起的采样值偏差</li></ul></li><li>缺点:<ul><li>比较浪费RAM</li></ul></li></ul><h4 id="一阶滞后滤波法"><a href="#一阶滞后滤波法" class="headerlink" title="一阶滞后滤波法"></a>一阶滞后滤波法</h4><ul><li>方法:<ul><li>取a=0~1</li><li>本次滤波结果=(1-a) 本次采样值+a 上次滤波结果</li></ul></li><li>优点:<ul><li>对周期性干扰具有良好的抑制作用</li><li>适用于波动频率较高的场合</li></ul></li><li>缺点:<ul><li>相位滞后,灵敏度低</li><li>滞后程度取决于a值大小</li><li>不能消除滤波频率高于采样频率的1/2的干扰信号</li></ul></li></ul><p>####加权递推平均滤波法</p><ul><li>方法:<ul><li>是对递推平均滤波法的改进,即不同时刻的数据加以不同的权</li><li>通常是,越接近现时刻的数据,权取得越大.</li><li>给予新采样值的权系数越大,则灵敏度越高,但信号平滑度越低</li></ul></li><li>优点:<ul><li>适用于有较大纯滞后时间常数的对象</li><li>和采样周期较短的系统</li></ul></li><li>缺点:<ul><li>对于纯滞后时间常数较小,采样周期较长,变化缓慢的信号</li><li>不能迅速反应系统当前所受干扰的严重程度,滤波效果差</li></ul></li></ul><p>####消抖滤波法</p><ul><li>方法:<ul><li>设置一个滤波计数器</li><li>将每次采样值与当前有效值比较:</li><li>如果采样值＝当前有效值,则计数器清零</li><li>如果采样值&lt;&gt;当前有效值,则计数器+1,并判断计数器是否&gt;=上限N(溢出)</li><li>如果计数器溢出,则将本次值替换当前有效值,并清计数器</li></ul></li><li>优点:<ul><li>对于变化缓慢的被测参数有较好的滤波效果,</li><li>可避免在临界值附近控制器的反复开/关跳动或显示器上数值抖动</li></ul></li><li>缺点:<ul><li>对于快速变化的参数不宜</li><li>如果在计数器溢出的那一次采样到的值恰好是干扰值,则会将干扰值当作有效值导入系统</li></ul></li></ul><p>####限幅消抖滤波法</p><ul><li>方法:<ul><li>相当于“限幅滤波法”+“消抖滤波法”</li><li>先限幅,后消抖</li></ul></li><li>优点:<ul><li>继承了“限幅”和“消抖”的优点</li><li>改进了“消抖滤波法”中的某些缺陷,避免将干扰值导入系统</li></ul></li><li>缺点:<ul><li>对于快速变化的参数不宜</li></ul></li></ul><h2 id="示例程序-如有不足之处还望各位同行指教"><a href="#示例程序-如有不足之处还望各位同行指教" class="headerlink" title="示例程序,如有不足之处还望各位同行指教"></a>示例程序,如有不足之处还望各位同行指教</h2><p>假定从8位AD中读取数据(如果是更高位的AD可定义数据类型为int),子程序为<code>get_ad()</code>;</p><h4 id="限副滤波"><a href="#限副滤波" class="headerlink" title="限副滤波"></a>限副滤波</h4><p>A值可根据实际情况调整<br>value为有效值,new_value为当前采样值<br>滤波程序返回有效的实际值</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> new_value;</span><br><span class="line">new_value = get_ad();</span><br><span class="line"><span class="keyword">if</span> ( ( new_value - value &amp;gt; A ) || ( value - new_value &amp;gt; A )</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line"><span class="keyword">return</span> new_value;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="中位值滤波法-1"><a href="#中位值滤波法-1" class="headerlink" title="中位值滤波法"></a>中位值滤波法</h4><p>N值可根据实际情况调整<br>排序采用冒泡法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 11</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> value_buf[N];</span><br><span class="line">  <span class="keyword">char</span> count,i,j,temp;</span><br><span class="line">  <span class="keyword">for</span> ( count=<span class="number">0</span>;count</span><br><span class="line">  &#123;</span><br><span class="line">    value_buf[count] = get_ad();</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>;j</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( value_buf[i]&amp;gt;value_buf[i+<span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">      temp = value_buf[i];</span><br><span class="line">      value_buf[i] = value_buf[i+<span class="number">1</span>];</span><br><span class="line">      value_buf[i+<span class="number">1</span>] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value_buf[(N<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>####算术平均滤波法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( count=<span class="number">0</span>;count</span><br><span class="line">  &#123;</span><br><span class="line">    sum + = get_ad();</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">char</span>)(sum/N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="递推平均滤波法-又称滑动平均滤波法-1"><a href="#递推平均滤波法-又称滑动平均滤波法-1" class="headerlink" title="递推平均滤波法(又称滑动平均滤波法)"></a>递推平均滤波法(又称滑动平均滤波法)</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> value_buf[N];</span><br><span class="line"><span class="keyword">char</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> count;</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  value_buf[i++] = get_ad();</span><br><span class="line">  <span class="keyword">if</span> ( i == N ) i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( count=<span class="number">0</span>;count</span><br><span class="line">  sum = value_buf[count];</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">char</span>)(sum/N);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="中位值平均滤波法-又称防脉冲干扰平均滤波法-1"><a href="#中位值平均滤波法-又称防脉冲干扰平均滤波法-1" class="headerlink" title="中位值平均滤波法(又称防脉冲干扰平均滤波法)"></a>中位值平均滤波法(又称防脉冲干扰平均滤波法)</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> count,i,j;</span><br><span class="line">  <span class="keyword">char</span> value_buf[N];</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (count=<span class="number">0</span>;count</span><br><span class="line">  &#123;</span><br><span class="line">    value_buf[count] = get_ad();</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (j=<span class="number">0</span>;j</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( value_buf[i]&amp;gt;value_buf[i+<span class="number">1</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      temp = value_buf[i];</span><br><span class="line">      value_buf[i] = value_buf[i+<span class="number">1</span>];</span><br><span class="line">      value_buf[i+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(count=<span class="number">1</span>;count</span><br><span class="line">  sum += value[count];</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">char</span>)(sum/(N<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>####限幅平均滤波法</p><p>略 参考子程序1、3</p><p>####一阶滞后滤波法</p><p>为加快程序处理速度假定基数为100,a=0~100</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> a 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> new_value;</span><br><span class="line">new_value = get_ad();</span><br><span class="line"><span class="keyword">return</span> (<span class="number">100</span>-a)*value + a*new_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>####加权递推平均滤波法</p><p>code数组为加权系数表,存在程序存储区.</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> code coe[N] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> code sum_coe = <span class="number">1</span>+<span class="number">2</span>+<span class="number">3</span>+<span class="number">4</span>+<span class="number">5</span>+<span class="number">6</span>+<span class="number">7</span>+<span class="number">8</span>+<span class="number">9</span>+<span class="number">10</span>+<span class="number">11</span>+<span class="number">12</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> count;</span><br><span class="line">  <span class="keyword">char</span> value_buf[N];</span><br><span class="line">  <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (count=<span class="number">0</span>,count</span><br><span class="line">  &#123;</span><br><span class="line">    value_buf[count] = get_ad();</span><br><span class="line">    <span class="built_in">delay</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (count=<span class="number">0</span>,count</span><br><span class="line">    sum += value_buf[count]*coe[count];</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">char</span>)(sum/sum_coe);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>####消抖滤波法</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">filter</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> count=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">char</span> new_value;</span><br><span class="line">  new_value = get_ad();</span><br><span class="line">  <span class="keyword">while</span> (value !=new_value);</span><br><span class="line">  &#123;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="keyword">if</span> (count&amp;gt;=N) <span class="keyword">return</span> new_value;</span><br><span class="line">      <span class="built_in">delay</span>();</span><br><span class="line">    new_value = get_ad();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>####限幅消抖滤波法</p><p>略 参考子程序1、9</p><p>我是用了第五种滤波方法得到了比较稳定的距离。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LTS下安装apache+php+mysql+phpmyadmin</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<h2 id="ubuntu-14-04-LTS下安装apache-php-mysql-phpmyadmin"><a href="#ubuntu-14-04-LTS下安装apache-php-mysql-phpmyadmin" class="headerlink" title="ubuntu 14.04 LTS下安装apache+php+mysql+phpmyadmin"></a>ubuntu 14.04 LTS下安装apache+php+mysql+phpmyadmin</h2><p>转自某博，很好用：<br>最近重装了ubuntu12.04 LTS，今天也重装了web服务器，顺带记录一下安装过程。</p><h3 id="环境：ubuntu-12-04-LTS"><a href="#环境：ubuntu-12-04-LTS" class="headerlink" title="环境：ubuntu 12.04 LTS"></a>环境：ubuntu 12.04 LTS</h3><h3 id="详细步骤："><a href="#详细步骤：" class="headerlink" title="详细步骤："></a>详细步骤：</h3><ul><li><p>首先以管理员的身份登录。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure></div></li><li><p>安装mysql5（即是数据库）</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure></div><p>注：安装过程中会提示输入密码，记得设置密码再确定。当然，不想设置的话直接过就行了</p></li><li><p>安装phpMyAdmin</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install phpmyadmin</span><br></pre></td></tr></table></figure></div><p>(话说这种方法安装会自动把下面我介绍到的apache2,php5附带安装）</p><p>注：phpmyadmin会自动安装在/usr/share/phpMyAdmin下，需要将 phpMyAdmin文件夹拷贝到/var/www/html目录下面 (14.04是放在/var/www/html/下，非常重要，不然后面测试不成功) 故使用</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/share/phpmyadmin/ /var/www/ -a</span><br></pre></td></tr></table></figure></div><p>把文件夹<code>phpmyadmin</code>搬到<code>/var/www/html</code>目录下即可<br>或者推荐下面这种用法<br>(链接目录，用如下命令</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/share/phpmyadmin/ /var/www/html/</span><br></pre></td></tr></table></figure></div><p>注意上面那个不是IN 而是小写的L。就不用移动文件了)</p></li><li><p>安装apache服务器</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install apache2</span><br></pre></td></tr></table></figure></div><p>注：Apache的默认文档根目录是在Ubuntu上的<code>/var/www</code>目录，配置文件是<code>/etc/apache2/apache2.conf</code>。配置存储在的子目录在<code>/etc/apache2</code>目录。一般的网页文件可以直接丢进<code>/var/www</code>目录下，在浏览器就可以访问了。默认的是index.html，所以在浏览器地址栏输入<code>127.0.0.1</code>或<code>localhost</code>就可以访问了</p></li><li><p>安装PHP5和Apache的PHP5的模块</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php5 libapache2-mod-php5</span><br></pre></td></tr></table></figure></div><p>安装完后重启服务器，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div><p>此时可以测试php环境，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit /var/www/info.php，</span><br></pre></td></tr></table></figure></div><p>在弹出的文本编辑器里面写入：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PHP"><figure class="iseeu highlight /php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    phpinfo();     <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div><p>然后直接在浏览器输入<code>127.0.0.1/info.php</code>,就可以看到php的信息了，说明安装成功了</p></li><li><p>让php5获得数据库mysql的支持</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install php5-mysql php5-curl php5-gd php5-idn php-pear php5-imagick      php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl</span><br></pre></td></tr></table></figure></div><p>然后重启服务器，</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure></div><h3 id="安装phpMyAdmin"><a href="#安装phpMyAdmin" class="headerlink" title="安装phpMyAdmin"></a>安装phpMyAdmin</h3><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install phpmyadmin</span><br></pre></td></tr></table></figure></div><p>浏览器输入<code>127.0.0.1/phpmyadmin</code>就可以看到管理数据库的界面了。</p></li></ul><p>补充：今天发现不知是不是我乱改了密码还是怎样发现登录不了phpmyadmin，后来找到配置文件<code>/var/www/phpmyadmin/config.default.php</code>,打开这个配置文件把里面的密码和是否允许空密码登录（改为true）就行了，具体的情况稍微看下这个配置文件就行了，很简单的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派无路由器连接</title>
      <link href="/posts/915758770.html"/>
      <url>/posts/915758770.html</url>
      
        <content type="html"><![CDATA[<h2 id="树莓派-一根网线直连笔记本电脑"><a href="#树莓派-一根网线直连笔记本电脑" class="headerlink" title="树莓派+一根网线直连笔记本电脑"></a>树莓派+一根网线直连笔记本电脑</h2><p>用网线直连电脑，不经过路由器。这个方法最大的特点用最少的工具玩树莓派。</p><h3 id="材料：树莓派一部、网线一根，笔记本电脑一台。"><a href="#材料：树莓派一部、网线一根，笔记本电脑一台。" class="headerlink" title="材料：树莓派一部、网线一根，笔记本电脑一台。"></a>材料：树莓派一部、网线一根，笔记本电脑一台。</h3><p>树莓派：带供电系统和烧好Raspbian系统的SD卡；<br>网线：交叉或直连；<br>笔记本电脑：双网卡，现在应该都是这个配置的。</p><h3 id="操作步骤。"><a href="#操作步骤。" class="headerlink" title="操作步骤。"></a>操作步骤。</h3><ol><li><p>连线。</p><p>树莓派接好供电线；<br>将网线一端接到树莓派，另一端接到笔记本。<br>注意：先连接WiFi，再进行其他配置</p></li><li><p>共享互联网。</p><p>如果现在笔记本已经通过WIFI连接到互联网，可以将无线网卡的互联网资源共享给本地连接。以win7系统为例，开始——控制面板——网络和Internet——网络和共享中心——查看网络状态和任务——更改适配器设置，找到无线网络连接右键“属性”，在共享选项卡上选中“允许其他网络用户通过此计算机的Internet连接来连接（N）”选项，点确定。</p></li><li><p>查找树莓派的IP地址。</p><p>运行DOS窗口，输入arp -a，在接口192.168.137.1下的为动态类型的IP地址就是树莓派的地址</p></li></ol><h3 id="问题一大堆"><a href="#问题一大堆" class="headerlink" title="问题一大堆"></a>问题一大堆</h3><p>为什么是接口192.168.137.1的呢？因为上部共享互联网的时候已把“本地连接”的IP地址自动设置成静态IP192.168.137.1了，当然这个IP地址也可以自己设置成其他自己常用的静态IP地址。因为此时树莓派的IP地址是动态的，只能用此方法查找。也可以通过修改SD卡中的cmdline.txt文件（在里面加入语句ip=…），将树莓派设置成静态IP地址，但此时只有将电脑的“本地连接”的静态IP地址设置成与树莓派静态IP地址同一号段才能成功连接。</p><p>本文来自：树莓派实验室<br>链接地址：<a href="http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html" target="_blank" rel="noopener">http://shumeipai.nxez.com/2013/10/15/raspberry-pi-and-a-network-cable-directly-connected-laptop.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进入树莓派图形化界面</title>
      <link href="/posts/1909736378.html"/>
      <url>/posts/1909736378.html</url>
      
        <content type="html"><![CDATA[<h3 id="必要程序安装"><a href="#必要程序安装" class="headerlink" title="必要程序安装"></a>必要程序安装</h3><ol><li>先在树莓派的机器上安装<code>tightvncserver</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tightvncserver</span><br></pre></td></tr></table></figure></div></li><li>开启tightvncserver服务<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tightvncserver</span><br></pre></td></tr></table></figure></div>要输入树莓派的密码,然后问你要不要设置一个独立密码,我选择n</li><li>在另一台机器(要访问树莓派的机器)上安装<code>xtightvncviewer</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xtightvncviewer</span><br><span class="line">```bash</span><br><span class="line">4. 在另一台机器上连接(在步骤2完成后,在`~/.vnc`目录下有个`aborn:1.pid`,所以下面的号对应为1)</span><br><span class="line">```bash</span><br><span class="line">xtightvncviewer 192.168.1.153（树莓派的ip）:1</span><br></pre></td></tr></table></figure></div>成功连接到树莓派图形化界面。</li></ol><h3 id="再次启动树莓派"><a href="#再次启动树莓派" class="headerlink" title="再次启动树莓派"></a>再次启动树莓派</h3><ol><li>树莓派控制端<code>Xshell</code>启动<code>tightvncserver</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tightvncserver</span><br></pre></td></tr></table></figure></div></li><li>访问机启动<code>xtightvncviewer</code><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xtightvncviewer 192.168.1.153（树莓派IP）:1</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu解压缩zip,tar,tar.gz,tar.bz2</title>
      <link href="/posts/3269715988.html"/>
      <url>/posts/3269715988.html</url>
      
        <content type="html"><![CDATA[<h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>zip可能是目前使用得最多的文档压缩格式。它最大的优点就是在不同的操作系统平台，比如Linux， Windows以及Mac OS，上使用。缺点就是支持的压缩率不是很高，而tar.gz和tar.gz2在压缩率方面做得非常好。闲话少说，我们步入正题吧：</p><p>我们可以使用下列的命令压缩一个目录：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r archive_name.zip directory_to_compress</span><br></pre></td></tr></table></figure></div><p>下面是如果解压一个zip文档：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip archive_name.zip</span><br></pre></td></tr></table></figure></div><h4 id="TAR"><a href="#TAR" class="headerlink" title="TAR"></a>TAR</h4><p>Tar是在Linux中使用得非常广泛的文档打包格式。它的好处就是它只消耗非常少的CPU以及时间去打包文件，他仅仅只是一个打包工具，并不负责压缩。下面是如何打包一个目录：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf archive_name.tar directory_to_compress</span><br></pre></td></tr></table></figure></div><p>如何解包：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf archive_name.tar.gz</span><br></pre></td></tr></table></figure></div><p>上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf archive_name.tar -C /tmp/extract_here/</span><br></pre></td></tr></table></figure></div><h4 id="TAR-GZ"><a href="#TAR-GZ" class="headerlink" title="TAR.GZ"></a>TAR.GZ</h4><p>这种格式是我使用得最多的压缩格式。它在压缩时不会占用太多CPU的，而且可以得到一个非常理想的压缩率。使用下面这种格式去压缩一个目录：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.tar.gz directory_to_compress</span><br></pre></td></tr></table></figure></div><p>解压缩：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf archive_name.tar.gz</span><br></pre></td></tr></table></figure></div><p>上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf archive_name.tar.gz -C /tmp/extract_here/</span><br></pre></td></tr></table></figure></div><h4 id="TAR-XZ"><a href="#TAR-XZ" class="headerlink" title="TAR.XZ"></a>TAR.XZ</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvfJ filename.tar.xz</span><br></pre></td></tr></table></figure></div><h4 id="TAR-BZ2"><a href="#TAR-BZ2" class="headerlink" title="TAR.BZ2"></a>TAR.BZ2</h4><p>这种压缩格式是我们提到的所有方式中压缩率最好的。当然，这也就意味着，它比前面的方式要占用更多的CPU与时间。这个就是你如何使用tar.bz2进行压缩。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jcvf archive_name.tar.bz2 directory_to_compress</span><br></pre></td></tr></table></figure></div><p>上面这个解包命令将会将文档解开在当前目录下面。当然，你也可以用这个命令来捏住解包的路径：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -jxvf archive_name.tar.bz2 -C /tmp/extract_here/</span><br></pre></td></tr></table></figure></div><h4 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h4><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unrar</span><br><span class="line">sudo unrar x name.rar</span><br></pre></td></tr></table></figure></div><p>来源：<a href="http://www.linuxidc.com/Linux/2012-08/68122.htm" target="_blank" rel="noopener">http://www.linuxidc.com/Linux/2012-08/68122.htm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/posts/1736621667.html"/>
      <url>/posts/1736621667.html</url>
      
        <content type="html"><![CDATA[<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><a href="#Docker" title="Docker"></a>Docker</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="#安装" title="安装"></a>安装</h3><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a><a href="#运行" title="运行"></a>运行</h3><p><code>docker run -it --name container_name image_id [cmd]</code></p><ol><li>启动容器</li></ol><p><code>docker start -ai container_name</code></p><ol start="2"><li>链接到容器</li></ol><p><code>docker attach container_name</code></p><ol><li>给运行着的容器执行.sh</li></ol><p><code>docker exec /path/to/shell.sh</code></p><p><code>docker exec -it mysql bash</code> 用命令行链接到mysql容器</p><h3 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a><a href="#生成镜像" title="生成镜像"></a>生成镜像</h3><p><code>docker commit -a &amp;quot;author&amp;quot; -m &amp;quot;comments&amp;quot; container_name image_name:TAG</code></p><h3 id="提交镜像"><a href="#提交镜像" class="headerlink" title="提交镜像"></a><a href="#提交镜像" title="提交镜像"></a>提交镜像</h3><ol><li>修改正式的TAG</li></ol><p><code>docker tag IMAGEID(镜像id) REPOSITORY:TAG（仓库：标签）</code></p><ol start="2"><li>提交</li></ol><p><code>docker push REPOSITORY:TAG</code></p><h3 id="协同使用"><a href="#协同使用" class="headerlink" title="协同使用"></a><a href="#协同使用" title="协同使用"></a>协同使用</h3><ol><li>先以服务态启动子容器</li></ol><p><code>docker run -d --name db training/mysql</code></p><ol start="2"><li>启动父容器，并用link参数链接子容器。只能父容器访问子容器里面的数据</li></ol><p><code>docker run -d -P --name web --link db:db training/webapp python app.py</code></p><p>‘db:db’： 子容器名字：别名</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django学习</title>
      <link href="/posts/479952160.html"/>
      <url>/posts/479952160.html</url>
      
        <content type="html"><![CDATA[<h2 id="Django学习"><a href="#Django学习" class="headerlink" title="Django学习"></a><a href="#Django学习" title="Django学习"></a>Django学习</h2><ol><li><p>创建项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">django-admin startproject myprojectname</span></pre></td></tr></table></figure><p>项目目录</p><ul><li><p>manage.py 项目管理器，可以通过_python manage.py_查看它所支持的功能</p></li><li><p>wsgi.py（Python Web Server Gateway Interface)：Python应用与web服务器之间的接口</p></li><li><p>urls.py 项目的路由配置</p></li><li><p>settings.py</p><pre><code>*   ALLOWED_HOSTS: 配置允许访问网站的主机</code></pre><ul><li>INSTALLED_APPS： 已经安装的应用，当开发自己的应用之后要添加进去</li><li>数据库，时区，语言等配置都在这儿</li></ul></li><li><p><strong>init.py</strong> 声明该文件夹为模块</p></li></ul></li><li><p>创建应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python manage.py startapp appname</span></pre></td></tr></table></figure><p>执行完之后记得把应用名添加到settings.py中的INSTALLED_APPS中</p></li></ol><p>应用目录</p><pre><code>*   migrations文件夹: 是一个模块，负责数据迁移；自动生成内容*   admin.py: django自带的后台管理模块*   apps.py: 本应用的一些配置*   models.py: 数据模型，使用ORM框架*   tests.py： 自动化测试模块*   views.py: 执行响应的代码所在的模块，大部分代码在这儿编写</code></pre><ol start="3"><li>可以为每个应用产生urls.py，只需要在项目根urls.py中include即可</li></ol><p>配置的时候应该注意<strong>正则表达式结束符号$和/</strong></p><ol start="4"><li>templates</li></ol><p>使用Django默认的DTL引擎，也可以在settings中修改</p><pre><code>*   在APP的根目录下创建templates目录，在templates下面新建**应用文件夹名称相同的目录**A(Django在查找模板的时候会按照INSTALLED_APPS的顺序查找，为了区分同名文件，建立目录A)    *   在A中创建HTML    *   在views.py中返回render</code></pre><ol><li><p>编写Model</p><p>一个model对应数据库的一张数据表，django中的model以 <strong>类</strong> 的形式表现，它包含了一些基本字段和数据的一些行为</p><p>使用ORM对象关系映射的模型，是的对象和关系建立映射，不再需要编写SQL语句</p><ul><li><p>在APP根目录下创建models.py，并引入models模块</p><ul><li><p>创建类，并继承models.Model(class yourclassname(models.Model)), 该类就是一张数据表</p></li><li><p>在类中创建字段</p><ul><li>字段即类里面的属性</li></ul></li></ul></li><li><p>生成数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations [app_name]</span><span class="line">python manage.py migrate</span></pre></td></tr></table></figure></li><li><p>查看数据表</p><pre><code>*   在app/migrations下面的文件里面    *   可以用</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate 应用名 文件id</span></pre></td></tr></table></figure><pre><code>来查看SQL语句    *   默认的sqlite3的数据库在项目根目录下db.sqlite3，可以通过sqlite expert personal 查看</code></pre></li></ul></li><li><p>页面呈现数据在views.py中操作</p></li><li><p>admin</p><ul><li>创建超级管理员<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python manege.py createsuperuser</span></pre></td></tr></table></figure></li><li>配置admin</li></ul><p>在应用下的admin.py中引入自身的models模块，并且注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">admin.site.register(models.xxx)</span></pre></td></tr></table></figure>* 修改数据默认显示的名称<p>在models的方法下面添加<strong>str</strong>(sels)或者<strong>unicode</strong>(self)方法</p></li><li><p>注意</p><ul><li>templates中使用的超链接形式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;% url &apos;app_name:url_name&apos; param %&#125;</span></pre></td></tr></table></figure></li><li>templates过滤器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#123;&#123; value | fliter1 | filter2 &#125;&#125;</span></pre></td></tr></table></figure></li><li>Django shell 可以直接与项目交互<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">python manage.py shell</span></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组会记录</title>
      <link href="/posts/804394302.html"/>
      <url>/posts/804394302.html</url>
      
        <content type="html"><![CDATA[<h2 id="the-difference-between-‘Nature’-and-‘Science’"><a href="#the-difference-between-‘Nature’-and-‘Science’" class="headerlink" title="the difference between ‘Nature’ and ‘Science’"></a><a href="#the-difference-between-‘Nature’-and-‘Science’" title="the difference between ‘Nature’ and ‘Science’"></a>the difference between ‘Nature’ and ‘Science’</h2><p>nature: 懂事前就有的东西，即懂事前已经有了的东西</p><p>science：懂事后才有的东西，在自己懂事之后的出现的东西</p><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a><a href="#BFS" title="BFS"></a>BFS</h2><ul><li><p>输出root-tree，输出若干个根树（非连通图）</p></li><li><p>最先由于解决迷宫问题—&gt;判断终点问题而提出</p></li><li><p>应用</p><ul><li>查找图中的所有连接组件（一个连接组件是图中的最大连接子图）</li></ul><p>由起点开始运行BFS所经过的所有节点，即为包含七点的一个连接组件</p><pre><code>*   查找连接组件中的所有节点*   查找非加权图中的任意两点间的最短路径*   测试某图是否是**二分图(bipartite graph)**</code></pre><p>从任一节点出发，在搜索过程中给节点不同的标签，例如给开始点标0，开始点的所有邻居1，开始点的所有邻居的邻居再标0，以此类推。若在搜索过程中，任一节点有跟其相同标签的邻居，则此图不是二分图。若搜索结束时没有发生这种情况则说明此图是一二分图</p><pre><code>*   应用于计算机游戏中的平面网格</code></pre><p>BFS可用来解决计算机游戏（例如即时策略游戏）中找寻路径的问题。在这个应用中，使用平面网格来代替图形，而一个格子即是图中的一个节点。所有节点都与它的邻居（上、下、左、右、左上、右上、左下、右下）相接。</p><p>值得一提的是，当这样使用BFS算法时，首先要<strong>先检验上、下、左、右</strong>的邻居节点，<strong>再检验左上、右上、左下、右下</strong>的邻居节点。这是因为BFS趋向于先查找斜向邻居节点，而不是四方的邻居节点，因此找到的路径将不正确。BFS应该先查找四方邻居节点，接着才查找斜向邻居节点。</p></li></ul><h2 id="LBFS-Lexicographic-breadth-first-search"><a href="#LBFS-Lexicographic-breadth-first-search" class="headerlink" title="LBFS(Lexicographic breadth-first search)"></a><a href="#LBFS-Lexicographic-breadth-first-search" title="LBFS(Lexicographic breadth-first search)"></a>LBFS(Lexicographic breadth-first search)</h2><ul><li><p>词典序的广度优先搜索算法</p></li><li><p>基于<a href="https://en.wikipedia.org/wiki/Partition_refinement" target="_blank" rel="noopener">Partition refinement</a>（一种用数据结构分类将集合分类为若干组小的集合的算法）</p></li><li><p>应用</p><ul><li><p>识别chordal graph</p><pre><code>*   Use lexicographic breadth-first search to find a lexicographic ordering of _G_</code></pre><p>// 对图G使用LBFS生成一个LBFS序列</p><pre><code>*   For each vertex v :</code></pre><p>// 对于每个顶点V</p><pre><code>*   Let w be the neighbor of v occurring prior to v , as close to v in the sequence as possible</code></pre><p>// 设w是v之前出现的v的邻居，尽可能接近序列中的v</p><pre><code>                *   (Continue to the next vertex _v_ if there is no such _w_)    ​    // 若没有符合要求的w则去下个定点v            *   If the set of earlier neighbors of _v_ (excluding _w_ itself) is not a subset of the set of earlier neighbors of _w_, the graph is not chordal// 如果v的早期邻居集合（不包括w本身）不是w的早期邻居集合的子集，则不是chordal    *   If the loop terminates without showing that the graph is not chordal, then it is chordal.</code></pre></li><li><p>图染色问题</p></li></ul></li></ul><h2 id="MCS（maximum-cardinality-search）"><a href="#MCS（maximum-cardinality-search）" class="headerlink" title="MCS（maximum cardinality search）"></a><a href="#MCS（maximum-cardinality-search）" title="MCS（maximum cardinality search）"></a>MCS（maximum cardinality search）</h2><p>以任一点为起点，优先访问已访问邻居数最多的点</p><ul><li>可以用来识别chordal graph</li><li>MCS按照最大生成树的顺序进行下去</li></ul><h2 id="clique"><a href="#clique" class="headerlink" title="clique"></a><a href="#clique" title="clique"></a>clique</h2><ul><li><p>一个无向图中，满足两两之间有边连接的顶点的集合，被称为该无向图的团</p></li><li><p>顶点集C被称为<a href="https://zh.wikipedia.org/wiki/無向圖" target="_blank" rel="noopener">无向图</a> G=(V,E) 的<strong>团</strong>，如果C是<a href="https://zh.wikipedia.org/wiki/顶点" target="_blank" rel="noopener">顶点</a>集V的子集(C⊆V)，而且任意两个C中的顶点都有<a href="https://zh.wikipedia.org/wiki/边" target="_blank" rel="noopener">边</a>连接。另一种等价的说法是，由C诱导的子图是<a href="https://zh.wikipedia.org/wiki/完全圖" target="_blank" rel="noopener">完全图</a> （有时也用“团”来指这样的子图）。</p></li><li><p><strong>极大团</strong>是指增加任一顶点都不再符合团定义的团，也就是说，极大团不能被任何一个更大的团所包含。</p></li></ul><h2 id="chordal-graph"><a href="#chordal-graph" class="headerlink" title="chordal graph"></a><a href="#chordal-graph" title="chordal graph"></a>chordal graph</h2><ul><li>如果长度大于3的每个圈都具有弦，即具有连接圈中的两个非连续顶点的边，则无向图被称为弦图。</li><li><em>一个无向图称为弦图当图中任意长度大于3的环都至少有一个弦。</em></li><li>chordal的任何一部分都是chordal</li><li>MCS在chordal上的终点是simplicial point</li><li>MCS在chordal上一定按着极大团的顺序遍历</li></ul><h2 id="区间图"><a href="#区间图" class="headerlink" title="区间图"></a><a href="#区间图" title="区间图"></a>区间图</h2><p>在图论中，区间图是由实线上的一组区间形成的无向图，每个区间具有顶点，区间相交的顶点之间具有边。 它是间隔的交叉图。</p><p><img src="/image/Interval_graph.svg" alt="Seven intervals on the real line and the corresponding seven-vertex interval graph"></p><p>使用LBFS三遍就能生成</p><ul><li>第一遍任选起点，记录终点</li><li>第二遍从终点开始便历（会有某些错位的需要第三遍纠正）</li><li>第三遍从第二遍的终点开始便历，即可以得到区间序列</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a><a href="#基本概念" title="基本概念"></a>基本概念</h2><p><a href="https://blog.csdn.net/shenlan211314/article/details/6312228" target="_blank" rel="noopener">参考链接</a></p><p>实例：无向图G=(V, E)，V为图的所有顶点集合（非空），E为图的所有边的集合。</p><ul><li><p>子图：G’=(V’, E’)，V’被包含于V，E’被包含于E，G’为G的子图。</p></li><li><p>生成子图：在子图中，E’&lt;=E且V’&lt;=V；在生成子图中，E’&lt;=E,且V’=V</p></li><li><p>诱导子图（induced graph）</p></li></ul><p>G’=(V’, E’)，V’被包含于V，E’={(u, v)|u, v属于V’，(u, v)属于E}，G’为G的诱导子图。</p><p><strong>注意：对于V’，只要在G中有边，那么在G’中同样应该有边。</strong></p><ul><li>团（clique）</li></ul><p>G’为关于<strong>V’</strong>的_完全图_。</p><p>一个团为极大团（maximal clique）当且仅当它不是其它团的子图。</p><p>　　一个图为最大团（maximum clique）当且仅当它的点集模最大。</p><p>　　一个图的团数表示为ω(G)。</p><ul><li>弦图(chordal graph)</li></ul><p>一个无向图称为弦图当图中任意长度大于3的环都至少有一个弦。</p><ul><li>单纯点（simplicial vertex）</li></ul><p>设N(v)表示与点v相邻的点集。一个点称为单纯点当<strong>{v}+N(v)的诱导子图为一个团</strong>。</p><p><strong>定理</strong></p><p>任何一个弦图都至少有一个单纯点，不是完全图的弦图至少有两个不相邻的单纯点(simplicail point)。</p><ul><li>完美消除序列（perfect elimination ordering）</li></ul><p>一个点的序列（每个点出现且恰好出现一次）v[1], v[2], …, v[n]满足v[i]在{v[i], v[i+1], …, v[n]}的诱导子图中为一个单纯点</p>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 组会 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从C到C++</title>
      <link href="/posts/1453157241.html"/>
      <url>/posts/1453157241.html</url>
      
        <content type="html"><![CDATA[<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a><a href="#引用" title="引用"></a>引用</h2><ol><li><p>定义引用时一定要将其<strong>初始化</strong>为引用某个变量</p></li><li><p>初始化后，他就一直引用这个变量，不会再引用到别的变量（后面相当于给引用的变量赋值）</p></li><li><p>只能引用变量，不能引用常量和表达式</p></li><li><p>引用的用法</p><ul><li><p>用作形参类型，改变实参的值</p><ul><li>用作函数返回值类型，可以将函数放在等式左边（相当于给return的那个变量进行赋值）<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">4</span>;</span><span class="line"><span class="function"><span class="keyword">int</span> &amp; <span class="title">SetValue</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> n;&#125;</span><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><span class="line">SetValue() = <span class="number">40</span>;</span><span class="line"><span class="built_in">cout</span> &lt;&lt; n;</span><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><span class="line">&#125;</span><span class="line"><span class="comment">// print 40</span></span></pre></td></tr></table></figure></li></ul></li><li><p>常引用：不能_通过_常引用去修改其引用的内容</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">100</span>;</span><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp; r = n;</span><span class="line">r = <span class="number">200</span>; <span class="comment">//编译错误</span></span><span class="line">n = <span class="number">200</span>； <span class="comment">// OK</span></span></pre></td></tr></table></figure></li></ul></li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a><a href="#const" title="const"></a>const</h2><ol><li><p>定义常量（区别与define就是有类型，可以进行类型检查，<strong>建议多使用const</strong>）</p></li><li><p>定义常量指针(不能_通过_常量指针去修改其指向的内容）</p><pre><code>*   常量指针可以只想别的内容</code></pre><ul><li>不能把常量指针赋值给非常量指针，反过来可以</li><li>形参为常量指针时，可避免函数内部不小心改变指针所指地方的内容</li></ul></li><li><p>定义常引用</p></li></ol><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a><a href="#动态内存分配" title="动态内存分配"></a>动态内存分配</h2><p>用法</p><ol><li>分配一个变量<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">P = new T;</span><span class="line">// T 是任意类型名，P是类型为T * 的指针，指向sizeof（T）存储空间的起始地址</span></pre></td></tr></table></figure></li><li>分配一个数组<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">p = new T[N];</span><span class="line">// 分配一个类型为T的N个分组，返回T *</span></pre></td></tr></table></figure></li></ol><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><a href="#构造函数" title="构造函数"></a>构造函数</h2><ol><li><p>一个类可以有多个构造函数，对象生成时自动调用构造函数；对象一旦生成就不能在其上执行构造函数</p></li><li><p>构造函数执行必要的初始化工作</p></li><li><p>每个类至少有一个构造函数（若无显示声明，则编译器自动生成一个无参无内容的构造函数），当没有任何构造函数时，编译器才会生成无参构造函数</p></li><li><p>无参构造函数不一定有</p></li><li><p>构造函数没有返回值类型，但是可以重载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">ElemType T = new ElemType(1);// 对象变量的初始化</span><span class="line">ElemType S = new ElemType[3] = &#123;1,2&#125;;// 对象变量数组的初始化</span><span class="line">// S的分配过程中S[0], s[1]调用有参的构造函数，s[2]调用无参的构造函数</span></pre></td></tr></table></figure></li><li><p><strong>所有</strong>的构造函数都与类同名</p></li><li><p>构造函数<strong>不负责分配对象空间</strong>, 在分配空间之后才调用构造函数</p></li></ol><h3 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a><a href="#复制构造函数" title="复制构造函数"></a>复制构造函数</h3><ol><li><p>只有一个参数，即对同类对象的<strong>引用</strong>，可以是常引用，eg, X::X(const X &amp;)；也可以是非常引用，eg, X::X( X &amp;)。2. 若没有定义复制构造函数，则编译器会生成一个默认的复制构造函数来完成复制功能</p></li><li><p>复制构造函数有且仅有一个</p></li><li><p>起作用的时机</p><pre><code>1.  当用一个对象去初始化同类的另一个对象</code></pre><ol start="2"><li><p>如果某函数有一个参数是类A的对象，那么该函数被调用时，类A的复制构造函数将被调用</p><pre><code>*   若复制构造函数重写为不复制或者不复制全部属性，则实参和形参内容可能不同</code></pre></li><li><p>如果某函数的返回值是类A的对象，那么该函数返回时，类A的复制构造函数将被调用</p></li></ol></li><li><p>对象间的赋值不会调用复制构造函数</p></li><li><p>复制构造函数在形参为对象的时候会被调用，因此浪费了一部分时间，所以可以考虑使用<strong>const CMyClass &amp; 引用类型</strong>作为参数，不用调用复制构造函数</p></li></ol><h3 id="类型转换构造函数"><a href="#类型转换构造函数" class="headerlink" title="类型转换构造函数"></a><a href="#类型转换构造函数" title="类型转换构造函数"></a>类型转换构造函数</h3><ol><li>只有一个形参但不是复制构造函数的函数</li><li>当有需要的时候，编译器会自动调用生成一个临时的对象</li></ol><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a><a href="#析构函数" title="析构函数"></a>析构函数</h2><ol><li><p>与类同名，并在前面加<strong>‘ ~ ‘</strong>，没有参数和返回值，一个类只能有一个析构函数</p></li><li><p>在对象消亡时自动被调用，可以用来做善后工作，若没有显示定义析构函数，则编译器生成一个什么都不做的析构函数</p></li><li><p>对象数组的生命期结束时，对象数组的每个元素的析构函数都会被调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span></pre></td><td class="code"><pre><span class="line">class CMyClass&#123;</span><span class="line">public:</span><span class="line">~CMyClass()&#123; cout &lt;&lt; &quot;destructor&quot; &lt;&lt; endl; &#125; </span><span class="line">&#125;;</span><span class="line">CMyClass obj;</span><span class="line">CMyClass fun(CMyClass sobj)&#123;// 形参消亡时会导致析构函数被调用</span><span class="line">return sobj;// 函数返回时生成临时对象返回</span><span class="line">&#125;</span><span class="line">int main()&#123;</span><span class="line">obj = fun(obj);// 函数调用的返回值（临时对象）被用过之后，该临时对象的析构函数被调用</span><span class="line">return 0;</span><span class="line">&#125;//程序执行结束obj的析构函数被调用</span><span class="line"></span><span class="line">// OUTPUT：</span><span class="line">// destructor</span><span class="line">// destructor</span><span class="line">// destructor</span></pre></td></tr></table></figure></li><li><p>析构函数<strong>不负责回收对象空间</strong>, 在调用析构函数之后系统才会回收对象空间</p></li></ol><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a><a href="#this指针" title="this指针"></a>this指针</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a href="#其他" title="其他"></a>其他</h2><ol><li>重载是函数名相同，参数个数或者类型不同的函数。参数相同，名字相同的返回值不同的则是重复定义</li><li>C++中定义函数的时候可以让最右边连续若干个参数有默认值</li><li>类的对象所占用的内存空间的大小等于所有成员变量的大小之和4. 全局对象在main之前被初始化</li><li>静态局部变量在执行到这一句的时候被构造，在整个程序结束之后被析构</li><li>析构顺序一般遵循“先构造的后消亡”</li><li>new出来的东西只有delete才会消亡，<strong>不delete的话哪怕程序结束也不会消亡</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络4</title>
      <link href="/posts/327264135.html"/>
      <url>/posts/327264135.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a><a href="#网络层" title="网络层"></a>网络层</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><a href="#概述" title="概述"></a>概述</h2><pre><code>1\. 网络层（数据报--datagram）向传输层（数据段---segment）提供服务2\. 端系统和路由器都运行网络层3\. 核心功能: 转发和路由, 连接建立（有些网络不需要建立）       1\. 网络层的链接是中间所有设备都参与的, **需要确立一条明确的路径**       2\. 传输层的连接是只有通信双方参与的</code></pre><h2 id="网络层服务模型"><a href="#网络层服务模型" class="headerlink" title="网络层服务模型"></a><a href="#网络层服务模型" title="网络层服务模型"></a>网络层服务模型</h2><ol><li><p>无连接服务</p><pre><code>1.  不事先确定系列分组的传输路径</code></pre><ol start="2"><li>每个分组独立确定路径</li><li>不同的分组路径可能不同</li><li>eg：数据报网络</li></ol></li><li><p>连接服务</p><pre><code>1.  首先为系列分组的传输确定从源到目的的路径</code></pre><ol start="2"><li>然后用该路径进行该系列分组的传输</li><li>传输结束后拆除连接</li><li>eg：虚电路网络（ATM网络）</li></ol></li></ol><h2 id="数据包网络"><a href="#数据包网络" class="headerlink" title="数据包网络"></a><a href="#数据包网络" title="数据包网络"></a>数据包网络</h2><ol><li><p>特征</p><pre><code>*   网络层无连接</code></pre><ul><li><p>每个分组携带目的地址</p></li><li><p>路由器根据分组的目的地址（范围）进行转发分组（internet）</p><pre><code>*   基于路由协议/算法构建转发表</code></pre><ul><li>检索转发表</li><li>每个分组独立选路</li></ul></li></ul></li><li><p>转发原则</p><pre><code>*   最长前缀匹配优先（优先选择与分组目的地址匹配前缀最长的入口）</code></pre></li></ol><h4 id="简化网络，复杂“边缘”"><a href="#简化网络，复杂“边缘”" class="headerlink" title="简化网络，复杂“边缘”"></a><a href="#简化网络，复杂“边缘”" title="简化网络，复杂“边缘”"></a>简化网络，复杂“边缘”</h4><h2 id="internet网络层"><a href="#internet网络层" class="headerlink" title="internet网络层"></a><a href="#internet网络层" title="internet网络层"></a>internet网络层</h2><p><img src="/image/internetNetworking.png" alt="网络层示意"></p><ol><li><p>网络链路层存在最大传输单元（MTU）——链路层数据帧可封装数据的上限</p><ol><li>不同链路的MTU不同</li><li>大ip分组向较小的MTU链路转发时<strong>可以</strong>被“分片”， 若相关标志位(DF)不允许分片，则将起丢掉，并用ICMP回传控制信息</li><li>ip分片到达目的主机才进行组装（路由器只进行拆分，不组装）</li><li>若有分片后的数据收不到，则丢弃整个分组（MF标志位：最后一片或未分片）</li><li>ipv4 片偏移字段以8字节为单位</li></ol></li><li><p>ip编址（<strong>层次化编址</strong>）</p><ol><li><p>ip地址与每个<strong>接口</strong>相关联</p><ol start="2"><li><p>主机域不能全0也不能全1(广播地址)</p></li><li><p>ip划分：某个组织的网络号（ip地址高位）相同，主机号不同</p></li><li><p>ip子网：ip地址具有相同网络号的设备<strong>接口</strong></p></li></ol></li></ol><p>不跨越路由器（第三及以上层网络设备）可以彼此物理联通的设备</p></li><li><p>有类ip地址/有类编址</p></li></ol><p><img src="/image/ipv4Sort.png" alt="ipv4分类"></p><pre><code>*   D类地址用作多播*   E类保留做研究使用*   A、B、C类也有部分地址不可以被分配</code></pre><ol start="4"><li><p>ip子网的划分和子网掩码</p><ol><li><p>将ip地址划分为网络号（NetID），_子网号（SubID）_，和主机号（HostID）</p></li><li><p>子网掩码（用来确定是否分了子网和子网的大小）</p><pre><code>1.  NetID，SubID全取1</code></pre><ol start="2"><li>HostID全取0</li></ol></li><li><p>子网划分中比不划分子网有更多的不能使用的地址</p></li></ol></li><li><p>无类域间路由(CIDR: classless InterDomain Routing)</p><ol><li>消除传统的A，B，C类地址界限</li></ol><p>将网络号和子网号统称为网络前缀</p><pre><code>2.  融合子网地址和子网掩码</code></pre><p>格式：a.b.c.d/x, x为前缀的长度</p></li><li><p>DHCP</p><ol><li><p>默认网关：若分组要送出/入该子网则应该先送给网关，再由网关进行转发</p><ol start="2"><li><p>从服务器动态获取：</p><ol><li>ip地址</li></ol></li><li><p>子网掩码</p></li><li><p>默认网管地址</p></li><li><p>DNS服务器名称和ip地址</p></li></ol></li><li><p>“即插即用”</p><ol start="4"><li><p>允许地址重用，在用地址续租</p></li><li><p>允许移动用户加入网络</p></li><li><p>DHCP配置协议</p><ol><li>需要接入网络的主机广播”DHCP discover”（发现报文）</li></ol></li><li><p>DHCP服务器（一个子网里面可能有多个也可能没有）利用“DHCP offer“（提供报文）进行响应</p></li><li><p>主机向回应offer的DHCP服务器请求ip地址：”DHCP request“（请求报文）</p></li><li><p>DHCP服务器分配ip地址:“DHCP ack”（确认报文）</p></li></ol></li><li><p>DHCP配置过程示例</p></li></ol><p><img src="/image/DHCPExample.png" alt="DHCP"></p><pre><code>    *   DHCP服务器端口67，客户机端口68*   第一次，第二次数据传输进行广播是因为相互不清楚对方的ip*   第三次数据传输进行广播是为了告诉其他DHCP服务器客户机已经分配了ip，免得占用其他资源</code></pre><ol start="8"><li>DHCP在应用层实现，封装在UDP数据报中</li></ol></li><li><p>网络地址转换(NAT)</p><ol><li><p>实现步骤</p><pre><code>1.  替换：利用（NAT IP地址，新端口号）替换每个外出IP数据报的（源IP地址，源端口号）</code></pre><ol start="2"><li>记录：将每对（NAT IP地址，新端口号）与（源IP地址，源端口号）的替换信息存储到NAT转换表中</li><li>替换：根据NAT转换表，利用（源IP地址，源端口号）替换每个进入内网IP数据报的（目的IP地址，目的端口号），即（NAT IP地址，新端口号）</li></ol></li><li><p>NAT穿透问题</p><pre><code>1.  方法1：静态配置NAT，将特定端口的连接请求转发给服务器</code></pre><ol start="2"><li><p>方法2：利用UPnp（互联网网管设备协议）自动配置</p></li><li><p>方法3：中继（代理）</p><pre><code>1.  NAT内部的客户与中继服务器建立连接</code></pre><ol start="2"><li>外部客户也与中继服务器建立连接</li><li>中继服务器桥接两个连接的分组</li></ol></li></ol></li></ol></li><li><p>互联网控制报文协议（ICMP）</p><ol><li><p>主要功能：支持主机或者路由器进行<strong>差错报告</strong>和<strong>网络探询</strong></p></li><li><p>两类ICMP报文：差错报告报文（5种）和网络探询报文（2组）</p></li><li><p>不发送ICMp差错报告报文的特殊情况</p><pre><code>*   对ICMp差错报告报文不再发送ICMP差错报告报文</code></pre><ul><li>除第一个ip数据报分片外，对所有后续分片均不发送ICMP差错报告报文</li><li>对所有多播ip数据报均不发送</li><li>对具有特殊IP的数据报不发送</li></ul></li><li><p>ICMP封装在IP数据报中传输</p></li></ol></li><li><p>IPv6</p><ol><li><p>IPv4相比的变化</p><pre><code>*   彻底移除首部的校验和字段，以减少每跳处理时间</code></pre><ul><li><p>选项（options）字段从基本首部移出，定义多个选项首部，通过“下一个首部”字段指示</p></li><li><p>ICMPv6</p><pre><code>*   附加报文类型</code></pre><ul><li>多播组管理功能</li></ul></li></ul></li></ol></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 自顶向下方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu装机</title>
      <link href="/posts/2436325960.html"/>
      <url>/posts/2436325960.html</url>
      
        <content type="html"><![CDATA[<ol><li>Ubuntu安装之新建autoinstall.sh<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim autoinstall.sh</span><br></pre></td></tr></table></figure></div></li></ol><p>2.<br></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">将下列内容写入</span><br><span class="line">apt install vim</span><br><span class="line">## theme</span><br><span class="line">add-apt-repository ppa:noobslab/themes</span><br><span class="line">apt update</span><br><span class="line">apt install flatabulous-theme</span><br><span class="line">## icons</span><br><span class="line">add-apt-repository ppa:noobslab/icons</span><br><span class="line">apt update</span><br><span class="line">apt install ultra-flat-icons</span><br><span class="line">## pointer</span><br><span class="line">add-apt-repository ppa:noobslab/macbuntu</span><br><span class="line">apt update</span><br><span class="line">apt install macbuntu-os-icons-lts-v7</span><br><span class="line">apt install macbuntu-os-ithemes-lts-v7</span><br><span class="line">## fonts</span><br><span class="line">apt install fonts-wqy-microhei</span><br><span class="line">##</span><br><span class="line">apt install unity-tweak-tool</span><br><span class="line">## docky</span><br><span class="line">apt install cairo-dock</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line">apt install git</span><br><span class="line">## python</span><br><span class="line">apt install python-pip</span><br><span class="line">pip install <a href="https://github.com/shadowsocks/shadowsocks/archive/master.zip" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks/archive/master.zip</a> -U</span><br><span class="line"></span><br><span class="line">## hexo</span><br><span class="line">apt install npm</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line">## network</span><br><span class="line">apt install --reinstall linux-firmware</span><br><span class="line">modprobe -r iwlwifi</span><br><span class="line">modprobe iwlwifi</span><br></pre></td></tr></table></figure></div><p></p><ol><li>自动安装<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">sudo ./autoinstall.sh</span></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAX30102文档</title>
      <link href="/posts/2632806726.html"/>
      <url>/posts/2632806726.html</url>
      
        <content type="html"><![CDATA[<h2 id="中断状态寄存器"><a href="#中断状态寄存器" class="headerlink" title="中断状态寄存器"></a><a href="#中断状态寄存器" title="中断状态寄存器"></a>中断状态寄存器</h2><p><img src="/image/max30102-1.png" alt="img"></p><p>无论何时触发中断，MAX30102都会将低电平有效的中断引脚拉至低电平状态，直到中断被清除。</p><p><strong>A_FULL: FIFO满标志</strong></p><p>在SpO 2和HR模式下，当FIFO写指针剩余一定数量的空闲空间时，该中断触发。</p><p>触发号可以由FIFO_A_FULL [3：0]寄存器设置。 通过读取中断状态1寄存器（0x00）清除中断。</p><p><strong>PPG_RDY：新的FIFO数据就绪</strong></p><p>在SpO 2和HR模式下，当数据FIFO中有新样本时，此中断将触发。通过读取中断状态1寄存器（0x00）或读取FIFO_DATA寄存器来清除中断。</p><p><strong>ALC_OVF：环境光消除溢出(置位时说明硬件校正失败)</strong></p><p>当SpO 2 / HR光电二极管的环境光消除功能达到其最大限制时，该中断触发，因此，环境光影响ADC的输出。通过读取中断状态1寄存器（0x00）清除中断。</p><p><strong>PWR_RDY：电源就绪标志</strong></p><p>在上电或欠压情况下，当电源电压VDD从欠压锁定（UVLO）电压低于UVLO电压时，电源就绪中断被触发，表示模块已上电并准备好收集数据。</p><p><strong>DIE_TEMP_RDY：内部温度就绪标志</strong></p><p>内部芯片温度转换完成后，将触发此中断，以便处理器可以读取温度数据寄存器。通过读取中断状态2寄存器（0x01）或TFRAC寄存器（0x20）来清除中断。</p><h2 id="中断允许寄存器"><a href="#中断允许寄存器" class="headerlink" title="中断允许寄存器"></a><a href="#中断允许寄存器" title="中断允许寄存器"></a>中断允许寄存器</h2><p>​ 保留位应该设置为0</p><h2 id="FIFO数据寄存器"><a href="#FIFO数据寄存器" class="headerlink" title="FIFO数据寄存器"></a><a href="#FIFO数据寄存器" title="FIFO数据寄存器"></a><strong>FIFO数据寄存器</strong></h2><p>FIFO深度为32，最多可容纳32个数据样本。样本大小<strong>取决</strong>于配置为活动的LED通道（a.k.a.通道）的数量。由于每个通道信号存储为3字节数据信号，因此FIFO宽度可以是3个字节或6个字节。</p><p>I 2 C寄存器映射中的FIFO_DATA寄存器指向要从FIFO读取的下一个样本。 FIFO_RD_PTR指向此示例。读FIFO_DATA寄存器不会自动递增I 2 C寄存器地址。突发读取该寄存器，一遍又一遍地读取相同的地址。每个样本是每个通道3个字节的数据（即，RED为3个字节，IR为3个字节等）。</p><p>FIFO寄存器（0x04-0x07）都可以写入和读取，但实际上<strong>只应写入FIFO_RD_PTR寄存器</strong>。其他数据由MAX30102自动递增或填充数据。当开始新的SpO 2或心率转换时，建议<strong>首先将FIFO_WR_PTR，OVF_COUNTER和FIFO_RD_PTR寄存器清零为全零</strong>（0x00），以确保FIFO为空并处于已知状态。在一次突发读取I 2 C事务中读取MAX30102寄存器时，寄存器地址指针通常会递增，以便发送的下一个数据字节来自下一个寄存器，等等。例外情况是FIFO数据寄存器寄存器0x07。读取该寄存器时，地址指针不会递增，但FIFO_RD_PTR会递增。因此，发送的下一个数据字节表示FIFO中可用的下一个数据字节</p><p><strong>从FIFO读取</strong></p><p>通常，从I 2 C接口读取寄存器会自动增加寄存器地址指针，因此可以在没有I 2 C启动事件的情况下以突发读取方式读取所有寄存器。 在MAX30102中，除FIFO_DATA寄存器（寄存器0x07）外，所有寄存器都适用。</p><p>读FIFO_DATA寄存器不会自动递增寄存器地址。一遍又一遍地读取该寄存器取来的都是同一地址的数据。 每个样本包含多个字节的数据，因此应从该寄存器（在同一事务中）读取多个字节以获得一个完整样本。</p><p>另一个例外是0xFF。 在0xFF寄存器之后读取更多字节不会使地址指针返回到0x00，并且读取的数据没有意义。</p><p><strong>FIFO数据结构</strong></p><p>数据FIFO由32个样本存储器组组成，可存储IR和RED ADC数据。 由于每个样本由两个通道的数据组成，每个样本有6个字节的数据，因此可以在FIFO中可以存储192个总字节数据。</p><p>FIFO如表1所示进行数据左对齐; 换句话说，无论ADC分辨率设置如何，_MSB位始终位于第17位数据位置_。 有关FIFO数据结构的直观表示，请参见表2。</p><p><strong>FIFO数据每通道包含3个字节</strong></p><p>FIFO数据是左对齐的，这意味着无论ADC分辨率设置如何，MSB始终位于相同的位置。 FIFO DATA [18] - [23]保留。 表2显示了每个三字节字节的结构（包含每个通道的18位ADC数据输出）。</p><p>SpO 2模式下的每个数据样本包含两个数据三元组（每个3个字节）。要读取一个样本，每个字节需要一个I 2 C读取命令。 因此，要在SpO 2模式下读取一个样本，需要6 I 2 C字节读取。 在读取每个样本的第一个字节后，FIFO读指针自动递增。</p><p><strong>写/读指针</strong></p><p>写/读指针用于控制FIFO中的数据流。 每次将新样本添加到FIFO时，写指针都会递增。 每次从FIFO读取样本时，读指针都会递增。 要重新读取FIFO中的样本，请将其值减1并再次读取数据寄存器。</p><p>进入SpO 2模式或HR模式时，应将FIFO写/读指针清零（返回0x00），以便FIFO中不存在旧数据。 如果V DD重新上电或V DD降至低于其UVLO电压，则指针自动清零。</p><p><strong>从FIFO读取数据的伪代码示例</strong></p><p>第一个事务：获取FIFO_WR_PTR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span></pre></td><td class="code"><pre><span class="line">START;</span><span class="line">Send device address + write mode</span><span class="line">Send address of FIFO_WR_PTR;</span><span class="line">REPEATED_START;</span><span class="line">Send device address + read mode</span><span class="line">Read FIFO_WR_PTR;</span><span class="line">STOP;</span></pre></td></tr></table></figure><p>中央处理器评估要从FIFO读取的样本数：</p><p><strong>NUM_AVAILABLE_SAMPLES</strong> = FIFO_WR_PTR – FIFO_RD_PTR</p><p>(Note: pointer wrap around should be taken into account)</p><p>NUM_SAMPLES_TO_READ = &lt; less than or equal to NUM_AVAILABLE_SAMPLES &gt;</p><p>第二个实务: 从FIFO中读取 NUM_SAMPLES_TO_READ 个样本:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span><span class="line">23</span><span class="line">24</span><span class="line">25</span><span class="line">26</span></pre></td><td class="code"><pre><span class="line">START;</span><span class="line">Send device address + write mode</span><span class="line">Send address of FIFO_DATA;</span><span class="line">REPEATED_START;</span><span class="line">Send device address + read mode</span><span class="line">for (i = 0; i &lt; NUM_SAMPLES_TO_READ; i++) &#123;</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED1[23:16];</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED1[15:8];</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED1[7:0];</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED2[23:16];</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED2[15:8];</span><span class="line">    Read FIFO_DATA;</span><span class="line">    Save LED2[7:0];</span><span class="line">    Read FIFO_DATA;</span><span class="line">&#125;</span><span class="line">STOP;</span><span class="line">START;</span><span class="line">Send device address + write mode</span><span class="line">Send address of FIFO_RD_PTR;</span><span class="line">Write FIFO_RD_PTR;</span><span class="line">STOP;</span></pre></td></tr></table></figure><p>第三个事务：</p><p>写入FIFO_RD_PTR寄存器。 <strong>如果</strong>第二个事务成功，则FIFO_RD_PTR指向FIFO中的下一个样本，并且不需要第三个事务。 <strong>否则</strong>，<strong>处理器适当地更新</strong>FIFO_RD_PTR，以便重新读取样本。</p><p><strong>FIFO 配置(0x08)</strong></p><p><strong>位 7:5: 样本均值化 (SMP_AVE)</strong></p><p>为了减少数据吞吐量，可以通过设置该寄存器在芯片上对相邻样本（在每个单独的通道中）进行平均和抽取。</p><p><img src="/image/max30102-2.png" alt="img"></p><p><strong>位4: FIFO满时循环(FIFO_ROLLOVER_EN)</strong></p><p>当FIFO完全填满数据时，该位控制FIFO的行为。 如果FIFO_ROLLOVER_EN设置为（1），则FIFO地址将从0开始，FIFO将继续填充新数据。 如果该位未置位（0），则在读取FIFO_DATA或更改WRITE / READ指针位置之前，FIFO不会更新。</p><p><strong>位3：0：FIFO几乎满值（FIFO_A_FULL）</strong></p><p>该寄存器设置发出中断时FIFO中剩余的数据样本数（3个字节/样本）。 例如，如果此字段设置为0x0，则在FIFO中剩余0个数据样本时发出中断（所有32个FIFO字都有未读数据）。 此外，如果此字段设置为0xF，则在FIFO中剩余15个数据样本时发出中断（17个FIFO数据样本具有未读数据）。</p><p><strong>SpO 2 配置 (0x0A)</strong></p><p><strong>Bits 6:5: SpO 2 ADC量程控制</strong></p><p>该寄存器设置SpO 2传感器ADC的满量程范围，如表5所示。</p><p><strong>比特4：2：SpO 2采样率控制</strong></p><p>这些位定义了有效采样率，其中一个样本由一个IR脉冲/转换和一个红色脉冲/转换组成。</p><p>采样率和脉冲宽度是相关的，因为采样率设置脉冲宽度时间的上限。 如果用户选择的采样率对于所选的LED_PW设置来说太高，则可能的最高采样率被编程到寄存器中。</p><p><strong>位1：0：LED脉冲宽度控制和ADC分辨率</strong></p><p>这些位设置LED脉冲宽度（IR和RED具有相同的脉冲宽度），因此间接设置每个样本中ADC的积分时间。 ADC分辨率与积分时间直接相关。</p><h2 id="采样率和性能"><a href="#采样率和性能" class="headerlink" title="采样率和性能"></a><a href="#采样率和性能" title="采样率和性能"></a>采样率和性能</h2><p>ADC的最大采样速率取决于所选的脉冲宽度，进而决定了ADC的分辨率。 例如，如果脉冲宽度设置为69μs，那么ADC分辨率为15位，并且所有采样率都是可选的。 但是，如果脉冲宽度设置为411μs，则采样率受限。 表11和表12总结了SpO 2和HR模式的允许采样率。</p><p>在<strong>心率模式</strong>下，仅红色LED用于捕获光学数据并确定用户的心率和/或光电容积描记图（PPG）。</p><h2 id="SpO-2温度补偿"><a href="#SpO-2温度补偿" class="headerlink" title="SpO 2温度补偿"></a><a href="#SpO-2温度补偿" title="SpO 2温度补偿"></a>SpO 2温度补偿</h2><p>MAX30102具有精确的板载温度传感器，可根据I 2 C主机的命令数字化IC的内部温度。 温度对红色和红外LED的波长有影响。 虽然器件输出数据对IR LED的波长相对不敏感，但红色LED的波长对于正确解释数据至关重要。</p><p>表13显示了红色LED波长与LED温度的相关性。 由于LED管芯以非常短的热时间常数（几十微秒）加热，因此应根据LED的电流水平和IC的温度计算LED波长。 使用表13估算温度。</p><p>MAX30102具有2线I2C / SMBus兼容串行接口，包括串行数据线（SDA）和串行时钟线（SCL）。 SDA和SCL有助于MAX30102与主机之间的通信，时钟速率高达400kHz。 图1显示了2线接口时序图。 主机生成SCL并在总线上启动数据传输。 主器件通过发送正确的从地址和数据将数据写入MAX30102。 每个发送序列由START（S）或REPEATED START（Sr）条件和STOP（P）条件构成。 传输到MAX30102的每个字长为8位，后跟一个应答时钟脉冲。 来自MAX30102的主机读数据传输正确的从机地址，然后发送一系列9个SCL脉冲。</p><p>MAX30102与主机产生的SCL脉冲同步在SDA上传输数据。 主设备确认收到每个数据字节。 每个读取序列由START（S）或REPEATED START（Sr）条件，非应答和STOP（P）条件构成。 SDA既可作为输入，也可作为漏极开路输出。 SDA需要一个上拉电阻，通常大于500Ω。 SCL仅作为输入操作。 如果总线上有多个主机，或者单个主机具有漏极开路SCL输出，则SCL上需要一个上拉电阻，通常大于500Ω。 符合SDA和SCL的串联电阻是可选的。 串联电阻可保护MAX30102的数字输入免受总线上的高压尖峰影响，并最大限度地降低总线信号的串扰和下冲。</p><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a><a href="#数据传输" title="数据传输"></a>数据传输</h2><p>在每个SCL周期期间传输一个数据位。 SDA上的数据必须在SCL脉冲的高电平期间保持稳定。 SCL高时SDA的变化是控制信号。 请参阅START和STOP条件部分。</p><p><strong>启动和停止条件</strong></p><p>当总线不使用时，SDA和SCL空闲。 主设备通过发出START条件来启动通信。 START条件是SCL为高电平时SDA从高到低的转换。 STOP条件是SCL为高电平时SDA从低到高的转换（图7）。 来自主设备的START条件表示传输到设备的开始。 主设备终止传输，并通过发出STOP条件释放总线。 如果生成REPEATED START条件而不是STOP条件，则总线保持活动状态。</p><p><strong>早期停止条件</strong></p><p>MAX30102在数据传输期间的任何时刻都能识别出STOP条件，除非STOP条件出现在与START条件相同的高脉冲中。 为了正常工作，请勿在与START条件相同的SCL高电平脉冲期间发送STOP条件。</p><p><strong>从机地址</strong></p><p>总线主控器通过发出START条件后跟7位从机ID启动与从机设备的通信。空闲时，MAX30102等待START条件后跟从机ID的控制序列。串行接口逐位比较每个从站ID，如果检测到错误的从站ID，则允许接口断电并立即断开与SCL的连接。识别出START条件后跟正确的从机ID序列后，MAX30102被根据ID字的LSB是读还是写（R / W）编程为接受或发送数据。 R / W表示主机是写入还是从MAX30102读取数据（R / W = 0选择写入条件，R / W = 1选择读取条件）。接收到正确的从机ID后，MAX30102通过将SDA拉低一个时钟周期发出<strong>ACK</strong>。 MAX30102从机ID由7个固定位B7-B1（设置为0b1010111）组成。首先发送最重要的从ID位（B7），然后发送剩余的位。表17显示了设备的可能的从ID。</p><p><strong>应答位</strong></p><p>应答位（ACK）是MAX30102在时钟的第9位在写入模式下用于握手接收每个数据字节（图8）。 如果成功接收到前一个字节，MAX30102会在整个主机产生的第9个时钟脉冲期间拉低<strong>SDA</strong>。 监测ACK可以检测失败的数据传输。 如果接收设备繁忙或发生系统故障，则会发生不成功的数据传输。 如果数据传输失败，总线主机将重试通信。 当MAX30102处于<strong>读模式</strong>时，主器件在第9个时钟周期内<strong>拉低SDA</strong>以确认接收数据。 在每个读取字节之后，主机发送应答以允许数据传输继续。 当主机从MAX30102读取数据的最后一个字节，然后是STOP条件时，发送一个未应答。</p><p><strong>写操作</strong></p><p>对于写操作，将从ID作为第一个字节，然后是寄存器地址字节，然后是一个或多个数据字节。 寄存器地址指针在接收到的每个数据字节后自动递增，因此例如可以一次写入整个寄存器库。 使用STOP条件终止数据传输。 写操作如图9所示。</p><p>内部寄存器地址指针自动递增，因此写入附加数据字节按顺序填充数据寄存器。</p><p><img src="/image/max30102-3.png" alt="img"></p><p><strong>读数据格式</strong></p><p>对于读操作，必须执行<strong>两次I 2 C</strong>操作。首先，发送从机地址，然后发送您想要读取的I 2 C寄存器的ID。然后发送REPEAT START（Sr）条件，然后发送读取从机ID。然后，MAX30102开始从第一个操作中选择的寄存器中发送数据。读指针自动递增，因此器件继续按顺序从其他寄存器发送数据，直到收到STOP（P）条件。例外情况是<strong>FIFO_DATA</strong>寄存器，读取指针在读取其他字节时不再递增。要在FIFO_DATA之后读取下一个寄存器，_需要I 2 C写命令来更改读指针的位置_。图10和图11显示了读取一个字节和多个字节数据的过程。需要进行初始写操作发送读取寄存器地址。从初始I 2 C写操作中选择的寄存器开始，按顺序从寄存器发送数据。如果读取FIFO_DATA寄存器，则读指针不会自动递增，后续的数据字节将包含FIFO的内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
            <tag> 毕业设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络2</title>
      <link href="/posts/4209115826.html"/>
      <url>/posts/4209115826.html</url>
      
        <content type="html"><![CDATA[<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a><a href="#应用层" title="应用层"></a>应用层</h2><ol><li><p>网络应用的体系结构</p><pre><code>*   客户机/服务器（c/s）</code></pre><ul><li>peer to peer (点对点结构)</li><li>混合结构</li></ul></li><li><p>TCP/UDP区别<br><img src="/image/udp_tcp.jpg" alt="tcp/udp"></p></li><li><p>HTTP</p><pre><code>*   采用无状态的机制（服务器不维护任何有关客户端过去所请求的消息）</code></pre><ul><li>采用请求/响应的模式</li><li>使用TCP传输<table><thead><tr><th>持久性连接</th><th>非持久性连接</th></tr></thead><tbody><tr><td>每个tcp连接只允许传送一个对象</td><td>允许传送多个对象</td></tr><tr><td>HTTP1.0</td><td>HTTP1.1</td></tr></tbody></table></li></ul></li><li><p>代理服务器与远程服务器之间的更新</p><ul><li>条件性GET（如果缓存有最新的版本则不需要发送请求对象）<br>在HTTP请求消息中声明所持有版本的日期<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-modified-since &lt;date&gt;</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>SMTP(邮件)</p><ul><li>采用TCP（可靠）持久性连接</li><li>通过ASCII采用命令/响应的模式</li><li>端口25</li><li>用MIME进行消息内容扩展，使其可以传输非ASCII数据（二进制、多媒体）</li></ul></li><li><p>DNS</p><ol><li><p>是一个_多层_命名服务器构成的_分布式_数据库（为什么不用集中式）</p><pre><code>*   单点失败</code></pre><ul><li><p>流量问题</p></li><li><p>距离问题</p></li><li><p>维护性问题</p></li><li><p>应用层协议：完成名字的解析（在应用层实现Internet的核心服务）</p></li></ul></li></ol><ul><li><p>域名解析过程</p><pre><code>*   向本地域名服务器请求，若本地不知道则直接请求根域名服务器</code></pre><ul><li>根域名服务器一般不知道，则返回顶级域名服务器（.com/.cn/.org…..)</li></ul></li><li><p>全球总共有13个根域名服务器</p></li><li><p>域名服务器</p><pre><code>*   根域名服务器</code></pre><ul><li><p>顶级域名服务器（负责.com/.cn/.org…..）</p></li><li><p>权威域名服务器（组织的域名服务器，提供组织内部服务器的解析服务）</p></li><li><p>本地域名解析服务器</p><pre><code>*   每个ISP都有默认的本地域名服务器</code></pre><ul><li>作为代理去查询分层式域名服务器</li></ul></li><li><p>DNS查询</p><pre><code>*   迭代查询（本地域名服务器负责根据指示依次查询域名服务器）</code></pre><ul><li>递归查询（本地域名服务器只向根域名服务器请求，根域名服务器再去请求顶级域名服务器，顶级再去查询权威，然后将结果依次返回）</li></ul></li><li><p>DNS缓存和更新</p><pre><code>*   只要域名解析服务器获得一个新的域名-ip映射，即缓存这一映射</code></pre><ul><li>本地域名服务器一般会缓存顶级域名服务器（根域名服务器一般不会被访问）</li></ul></li></ul></li><li><p>DNS记录（资源记录 Resource Record)</p><pre><code>*   format:(name, value, type, ttl)</code></pre><ul><li><p>type = A</p><pre><code>*   name 主机域名</code></pre><ul><li>value ip地址</li></ul></li><li><p>type = NS</p><pre><code>*   name：域（edu.cn)</code></pre><ul><li>value:该域权威域名解析服务器的主机域名）</li></ul></li><li><p>type = cname</p><pre><code>*   name ：某一真实域名的别名</code></pre><ul><li>value：真实域名</li></ul></li><li><p>type = MX</p><pre><code>*   value是于name相对应的邮件服务器</code></pre></li></ul></li><li><p>DNS协议（查询/回复）</p></li></ul></li></ol><h2 id="P2P"><a href="#P2P" class="headerlink" title="P2P"></a><a href="#P2P" title="P2P"></a>P2P</h2><ol><li><p>纯p2p架构</p><pre><code>*   没有服务器</code></pre><ul><li>任意端系统之间直接通信</li><li>节点阶段性接入internet</li><li>节点可能更换ip地址</li><li>多用户同时下载时性能比C/S优（C/S随着用户数增加耗时线性增长，p2p则是有个阈值）</li></ul></li><li><p>p2p例子：BitTorrent</p><pre><code>*   下载的同时进行发送（可以发送自己的，也可以发送刚刚下载的）</code></pre><ul><li><p>稀缺文件优先下载（防止端系统离开）</p></li><li><p>上传</p><pre><code>*   向给自己发送的4个需要下载的端系统发送数据</code></pre><ul><li>每10s重新评估top4</li><li>每30s随机选择一个其他结点，向其发送</li></ul></li></ul></li><li><p>索引技术</p><ol><li><p>集中式索引</p><pre><code>*   单点失败</code></pre><ul><li>性能瓶颈</li><li>法律</li></ul></li><li><p>完全分布式索引</p><pre><code>*   完全分布式架构</code></pre><ul><li>每个节点对他共享的文件且只对他共享的文件进行索引</li><li>用<a href="#jump">覆盖网络</a>实现全局性文件搜索</li><li>采用洪泛式查询，查询命中之后反向回传</li></ul></li><li><p>层次式覆盖网络</p><pre><code>*   介于集中式索引和洪泛式查询的方法</code></pre><ul><li><p>每个结点或者是一个超级结点，或者被分配一个超级节点</p></li><li><p>节点和超级节点之间维持TCP</p></li><li><p>某些超级节点对之间维持TCP</p><pre><code>*   普通节点向超级节点请求查询</code></pre><ul><li>超级节点之间使用洪泛式查询</li></ul></li><li><p>超级节点负责跟踪字节点的内容</p></li></ul></li></ol></li><li><p>危害</p><ul><li>对硬盘的损坏（高温、重复读写、扇区损坏）</li><li>占用网络带宽资源</li><li>助长病毒传播</li><li>盗版</li></ul></li><li><p><span id="jump">覆盖网络<span></span></span></p><ul><li>节点X与节点Y之间若有TCP连接那么构成一条边</li><li>所有活动的节点和边构成覆盖网络</li><li>节点一般邻居数少于十个</li></ul></li></ol><h2 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a><a href="#socket编程" title="socket编程"></a>socket编程</h2><ol><li><p>套接字使用时不用指定端口号，由操作系统负责分配和管理，用套接子描述符即可</p></li><li><p>windows对unix socket进行封装形成winsock，程序使用时以WSAStartup开头（初始化api），以WSACleanup（释放windows socket DLL）结尾</p></li><li><p>当多个进程同时是使用socket时，socket数据结构里有对其计数的变量，关闭一个则减1，到0才关闭此数据结构</p></li><li><p>同一个进程中的多个线程不能同时调用一个socket</p></li><li><p>当一个主机中有多个ip时，服务器端调用bind时用INADDR_ANY</p></li><li><p>listen、accept只用于服务器，监听端口，只是用于tcp</p></li><li><p>connect之用于客户端，tcp/udp</p></li><li><p>send, recv 适用于TCP或者调用connect的UDP</p></li><li><p>sendto, recvfrom用于未调用connect的UDP</p></li><li><p><img src="/image/socket_.jpg" alt="socket流程"></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 自顶向下方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络3</title>
      <link href="/posts/2380608036.html"/>
      <url>/posts/2380608036.html</url>
      
        <content type="html"><![CDATA[<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a><a href="#传输层" title="传输层"></a>传输层</h2><ol><li><p>为运行在不同的端系统上的<strong>进程</strong>提供了一种逻辑通信机制(网络层提供<strong>主机</strong>之间的逻辑通信机制)</p><ul><li>位于网络层之上</li><li>依赖于网络层</li><li>对网络层功能进行加强</li></ul></li><li><p>传输层提供的服务</p><ul><li><p>可靠的、按序的交付服务（TCP）</p><pre><code>*   流量控制</code></pre><ul><li>拥塞控制</li><li>连接建立</li></ul></li><li><p>不可靠的交付服务（UDP）</p><pre><code>*   复用/分用</code></pre><ul><li>简单的错误校验</li><li>尽力而为（best effort）</li><li>不需要建立链接，延迟很小</li><li>上层更好控制（不用顾及拥塞控制之类）</li><li>经常用于流媒体、DNS、SNMP等</li></ul></li><li><p>不提供延迟、带宽等方面的服务</p></li></ul></li><li><p>多路复用/分用</p></li></ol><h2 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a><a href="#可靠数据传输" title="可靠数据传输"></a>可靠数据传输</h2><ol><li><p>不错、不丢、不乱</p></li><li><p>可靠数据传输协议</p></li><li><p>需要双向的控制信息流实现，上层单向流动到可靠协议，由可靠协议负责和不可靠的UDP双向交互实现可靠传输</p></li><li><p>协议实现（数据错误，位错误）</p><ul><li><p>有限状态机来刻画传输协议</p></li><li><p>确认机制（ACK: 确认; NAK：数据错误; 错误重传机制）— 接收方显式回传控制消息</p><pre><code>*   为ACK和NAK增加校验和</code></pre><ul><li>添加额外的控制消息</li><li>NAK/ACK 坏掉重传（产生重复传送的问题）</li><li>增加序列号进行NAK/ACK重传</li></ul></li><li><p>差错检测（校验和等）</p></li><li><p>停-等协议（有限状态机）</p></li><li><p>NAK可以在ACK确认消息的时候加入序列号代替（确认最后一个分组）</p></li></ul><p>5 . 协议实现（丢失分组）</p><ul><li>等待合理的一段时间之后重传（需要定时器）</li><li>停等引起效率低下</li><li>采用流水线机制（连发多个分组再等待ACK）</li><li>使用滑动窗口协议实现流水线</li></ul></li></ol><h2 id="滑动窗口协议"><a href="#滑动窗口协议" class="headerlink" title="滑动窗口协议"></a><a href="#滑动窗口协议" title="滑动窗口协议"></a>滑动窗口协议</h2><h3 id="GBN（Go-Back-N）协议：一组分组一组分组的滑动"><a href="#GBN（Go-Back-N）协议：一组分组一组分组的滑动" class="headerlink" title="GBN（Go-Back-N）协议：一组分组一组分组的滑动"></a><a href="#GBN（Go-Back-N）协议：一组分组一组分组的滑动" title="GBN（Go-Back-N）协议：一组分组一组分组的滑动"></a>GBN（Go-Back-N）协议：一组分组一组分组的滑动</h3><ol><li><p>发送方</p><ul><li><p>窗口尺寸为N，最多允许有N个分组未确认，分组头部包含K-bit序列号</p><ul><li>采用累积确认的方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">ACK(n)表示确认到n(包含n)的分组均被正确接收</span></pre></td></tr></table></figure></li></ul></li><li><p>整个窗口设置一个计时器</p><ul><li>超时则重发序列号大于n还未收到ack的分组</li></ul></li></ul></li><li><p>接收方（没有缓存，没有接收方窗口）</p><ul><li><p>发送拥有最高序列号的、已被正确接收的分组的ACK</p><pre><code>*   可能产生重复的ACK</code></pre></li><li><p>乱序到达的分组直接丢弃，重新确认正确收到的最大的序列号</p></li></ul></li></ol><h3 id="SR（selective-repeat-协议：一个分组一个分组的滑动"><a href="#SR（selective-repeat-协议：一个分组一个分组的滑动" class="headerlink" title="SR（selective repeat)协议：一个分组一个分组的滑动"></a><a href="#SR（selective-repeat-协议：一个分组一个分组的滑动" title="SR（selective repeat)协议：一个分组一个分组的滑动"></a>SR（selective repeat)协议：一个分组一个分组的滑动</h3><ol><li><p>接收方（设置缓冲机制，缓冲乱需到达的分组）</p><pre><code>1.  添加接收方窗口</code></pre><ol start="2"><li>对每个分组单独确认</li></ol></li><li><p>发送方</p><pre><code>1.  为每个分组设置单独的计数器</code></pre></li><li><p>窗口可以跳跃前移</p></li></ol><h2 id="TCP概述"><a href="#TCP概述" class="headerlink" title="TCP概述"></a><a href="#TCP概述" title="TCP概述"></a>TCP概述</h2><ol><li><p>点对点（一个发送方，一个接收方）</p></li><li><p>可靠的按序的字节流</p></li><li><p>流水线机制（拥塞控制，流量控制，窗口大小设置）</p></li><li><p>发送方/接收方缓存</p></li><li><p>全双工（同一连接中能传输双向数据流）</p></li><li><p>面向连接</p><ol><li>通信双方在发送数据前必须建立连接</li><li>连接状态只在连接的两端维护，沿途 结点并不维护</li><li>TCP连接包括：两台主机上的缓存，连接状态变量、socket等</li></ol></li><li><p>流量控制机制</p></li><li><p>序列号是segment中第一个字节的编号，而不是segment的编号，建立TCP连接时双方随机选择序列号</p></li><li><p>ACKS</p><ol><li>累计确认机制：该序列号之前的所有字节已经被正确处理</li><li>返回是希望接收到的下一个字节的序列号</li></ol></li><li><p>可靠数据传输</p><ol><li>TCP在IP层提供不可靠的服务基础上实现可靠数据传输服务</li><li>使用单一重传定时器</li><li>触发重传的事件（超时，收到重复ACK）</li></ol></li><li><p>快速重传</p></li></ol><p>​ 由于接受断发回的ACK是希望接收到的字节的序列号，当连续收到三个相同的ACK时就执行快速重传而不用等超时再传</p><ol start="12"><li>流量控制（速度匹配机制)</li></ol><p>控制发送方发送速度不要过快以至于淹没接收方的buffer</p><p>receiver 在segment头部告诉sender还有多少buffer</p><ol start="13"><li>多媒体应用通常不使用TCP，以免被拥塞控制机制限制速率</li></ol><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a><a href="#连接管理" title="连接管理"></a>连接管理</h2><ol><li><p>一般由TCP的发送端（客户机）请求建立连接，接收端等待客户连接请求</p></li><li><p>连接的三次握手</p><pre><code>1.  客户机向服务器发送一个SYN段（没有数据，包含客户端初始选择的序列号）</code></pre><ol start="2"><li>服务器答复SYNACK（选择服务器的初始序列号，分配客户机缓存）</li><li>客户机收到SYNACK，回复ACK（可以包含数据）</li><li>建立TCP连接<strong>两次握手不能确定具体是否成功，四次握手会有资源浪费</strong></li></ol></li><li><p>关闭的四次握手</p><pre><code>1.  客户机向服务器发送FIN报文段</code></pre><ol start="2"><li><p>服务器收到FIN，回复ACK，关闭连接，发送FIN</p></li><li><p>客户机收到FIN，回复ACK</p><pre><code>1.  进入等待状态，如果收到FIN，则重新发送ACK</code></pre></li><li><p>服务器收到ACK，关闭链接</p></li></ol></li></ol><h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a><a href="#拥塞控制" title="拥塞控制"></a>拥塞控制</h2><ol><li><p>表现</p><ol><li>分组丢失</li><li>分组延迟越来越大</li></ol><h3 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a><a href="#拥塞控制方法" title="拥塞控制方法"></a>拥塞控制方法</h3><ul><li>端到端的拥塞控制（端系统通过观察loss（分组丢失）delay（分组延迟时间等来判断网络是否发生拥塞—-TCP采用这种方法）</li><li>网络辅助的拥塞控制（路由器显式的向发送方反馈网络的用色信息，简单的拥塞指示（1 bit）：指示发送方该采取何种速率—-ATM）</li></ul><h3 id="拥塞控制的基本原理"><a href="#拥塞控制的基本原理" class="headerlink" title="拥塞控制的基本原理"></a><a href="#拥塞控制的基本原理" title="拥塞控制的基本原理"></a>拥塞控制的基本原理</h3><ul><li><p>限制sender的发送速率</p><ul><li><p>ConfgWin：（发送窗口的大小）</p><ul><li>动态调整以改变发送速率</li></ul></li><li><p>反映所感知到的网络拥塞</p></li></ul></li><li><p>网络拥塞的感知</p><pre><code>*   LOSS事件==timeout或者连续3个重复的ACK</code></pre></li><li><p>合理调整发送速率</p><pre><code>*   加性增—乘性减（AIMD)</code></pre><p>谨慎的探测可用带宽，逐渐增加发送速率，直到发生loss事件（每个RTT将CongWin增大一个MSS）; 发生loss之后已经拥塞，需要快速降低发送频率（将CongWin减半）</p><pre><code>*   慢启动（SS）</code></pre><p>当链接刚刚建立时（CongWin = 1, 初始速率20k），让CongWin指数增长; 每个RTT将CongWin翻倍–&gt;快速攀升</p><pre><code>*   指数增长切换到加性增</code></pre><p>用一个变量Threshold， 设置为LOSS事件前congWin值的1/2.</p><p><img src="/image/loss_event.jpg" alt="loss event"></p><pre><code>        *   收到3个重复的ACK(网络还能传输一些segment)将congWin切为一半，然后线性增长            *   Timeout事件（**拥塞更严重**)CongWin直接设为1,然后指数增长，达到threshold之后再线性增长</code></pre></li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 自顶向下方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu下firefox播放HTML5视频</title>
      <link href="/posts/903614484.html"/>
      <url>/posts/903614484.html</url>
      
        <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a><a href="#缘起" title="缘起"></a>缘起</h2><p>chrome内存吃的太狠，渣笔记本带的很吃力，但是用中国大学mooc不能正常观看教学视频，报错不能正常播放视频[code:6]。</p><h2 id="缺少组件"><a href="#缺少组件" class="headerlink" title="缺少组件"></a><a href="#缺少组件" title="缺少组件"></a>缺少组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">apt install ubuntu-restricted-extras</span></pre></td></tr></table></figure><h2 id="ubuntu-restricted-extras"><a href="#ubuntu-restricted-extras" class="headerlink" title="ubuntu-restricted-extras"></a><a href="#ubuntu-restricted-extras" title="ubuntu-restricted-extras"></a>ubuntu-restricted-extras</h2><p>通俗来说就是ubuntu下的一些支持库，他可以帮助改善MP3、vedio、DVD等的体验，也可以获得windows下的字体体验和FLASH之类的功能</p>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> linux, ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socksV5转化为http代理</title>
      <link href="/posts/1450526405.html"/>
      <url>/posts/1450526405.html</url>
      
        <content type="html"><![CDATA[<ol><li>使用工具 privoxy</li></ol><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">apt-get install privoxy</span></pre></td></tr></table></figure><p>更改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vim /etc/privoxy/config</span></pre></td></tr></table></figure><p>并在里面添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">forward-socks5   /               127.0.0.1:1080 .</span></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">service privoxy restart</span></pre></td></tr></table></figure><p>给系统设置http代理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span></pre></td></tr></table></figure><p>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:8118/</span></pre></td></tr></table></figure><p>使更改生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">source ~/.bashrc</span></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled Post - 1</title>
      <link href="/posts/294966981.html"/>
      <url>/posts/294966981.html</url>
      
        <content type="html"><![CDATA[<p>python -m pip uninstall pip</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt画图</title>
      <link href="/posts/3910010431.html"/>
      <url>/posts/3910010431.html</url>
      
        <content type="html"><![CDATA[<h2 id="QcustomPlot"><a href="#QcustomPlot" class="headerlink" title="QcustomPlot"></a><a href="#QcustomPlot" title="QcustomPlot"></a>QcustomPlot</h2><ol><li><p>下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">http://www.qcustomplot.com</span></pre></td></tr></table></figure></li><li><p>把qcustomplot.cpp和qcustomplot.h拷贝到工程目录下，然后把这两个文件引入工程项目即可</p></li><li><p>pro文件中QT += widgets printsupport</p></li><li><p>使用一个Widget窗体在ui设计器上，对这个窗体点击右键，选择提升为，把提升的类名填写为QCustomPlot即可，这样就可以使用了，使用就和我们用普通控件一样，ui-&gt;xxx-&gt;……。xxx为widget的名字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span></pre></td><td class="code"><pre><span class="line">QVector x(101), y(101); // initialize with entries 0..100</span><span class="line">for (int i=0; i&lt;101; ++i)</span><span class="line">&#123;</span><span class="line">x[i] = i/50.0 – 1; // x goes from -1 to 1</span><span class="line">y[i] = x[i]*x[i]; // let’s plot a quadratic function</span><span class="line">&#125;</span><span class="line">qDebug()&lt;&lt;“data has been created”;</span><span class="line">ui-&gt;black_line-&gt;addGraph();</span><span class="line">qDebug()&lt;&lt;“begin painting”;</span><span class="line">ui-&gt;black_line-&gt;graph(0)-&gt;setData(x,y);</span><span class="line">ui-&gt;black_line-&gt;xAxis-&gt;setLabel(“x”);</span><span class="line">ui-&gt;black_line-&gt;yAxis-&gt;setLabel(“y”);</span><span class="line">ui-&gt;black_line-&gt;xAxis-&gt;setRange(-1, 1);</span><span class="line">ui-&gt;black_line-&gt;yAxis-&gt;setRange(0, 1);</span><span class="line">ui-&gt;black_line-&gt;replot();</span><span class="line">qDebug()&lt;&lt;“finish”;</span></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> 上位机 Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言大坑</title>
      <link href="/posts/4035306291.html"/>
      <url>/posts/4035306291.html</url>
      
        <content type="html"><![CDATA[<h2 id="接下来就开始看看坑"><a href="#接下来就开始看看坑" class="headerlink" title="接下来就开始看看坑"></a><a href="#接下来就开始看看坑" title="接下来就开始看看坑"></a>接下来就开始看看坑</h2><ol><li><p>单引号表示表示整数值</p><ul><li>双引号表示字符串首的地址</li><li>以0开头的整数默认为八进制</li><li>注意使用移位运算加快程序执行速度</li><li>if(a&lt;b == c&lt;d) //比较a、b、c、d的相对大小关系是否一致</li><li>a[i] = i[a]</li><li>C语言的不对称边界</li><li>errno 外部出错变量，可以检测出错信息</li><li>break 跳出离他最近的那层循环或switch</li><li>C 语言不能省略形参，即使不使用</li></ul></li><li><p>C语言的数据存储空间</p><ul><li>程序的局部变量存在于（堆栈）中，全局变量存在于（静态区 ）中，动态申请数据存在于（ 堆）</li><li>局部变量在return之后出栈销毁，不要尝试返回局部指针地址</li><li>堆 申请、释放原则 <strong>哪儿申请哪儿释放</strong><br>记得判断 堆 申请成功与否</li></ul></li><li><p>一个程序将操作系统分配给其运行的内存块分为4个区域：<br>　　(1)代码区，存放程序的代码，即程序中的各个函数代码块。<br>　　(2)全局数据区，存放程序的全局数据和静态数据。<br>　　(3)堆区，存放程序的动态数据。<br>　　(4)栈区，存放程序的局部数据，即各个函数中的数据。</p></li><li><p>强制类型转换</p></li></ol><ul><li>占用空间大的转化为占用空间小的： 考虑字节序（大小端），所使用的部分可能在不同机器上截然不同</li><li>占用空间小的转化为占用空间大的： 考虑内存越界访问</li><li>结构体强制转换 ： 考虑字节对齐</li></ul><ol><li>字符串</li></ol><ul><li>通过索引读取字符串时，一定要判断索引的正确性</li></ul><ol><li>多线程编程</li></ol><ul><li>互斥量用来对临界区的互斥进入</li><li>条件变量用于线程的阻塞等待</li></ul><ol><li><p>指针</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line">int * p = NULL;</span><span class="line"></span><span class="line">&amp;p 表示p的地址</span><span class="line">p 表示变量p的内容</span><span class="line">*p 表示p指向的存储单元的内容</span></pre></td></tr></table></figure><pre><code>*   **数字0是唯一能输给指针的数值**(相当于NULL)*   void * :指向任何类型的指针</code></pre><ul><li><p><strong>注意深复制和浅复制的区别</strong></p><h2 id="浅复制"><a href="#浅复制" class="headerlink" title="浅复制"></a><a href="#浅复制" title="浅复制"></a>浅复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span></pre></td><td class="code"><pre><span class="line">int *p, *q;</span><span class="line">*p = 58;</span><span class="line">q = p;        // q 和 P 指向同一内存单元</span><span class="line">free(q);</span><span class="line">printf(&quot;%d\n&quot;,p); //异常。p的内存已经被q释放</span></pre></td></tr></table></figure></li></ul></li><li><p>动态变量</p></li></ol><p>在程序运行过程中产生的变量称为动态变量</p><pre><code>*   创建</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">int * p; char *q;</span><span class="line">p = new int;  // 在内存中创建一个变量，存储所分配的内存地址到p中</span><span class="line">q = new char[19];   // 在内存中创建一个数组，并将数组地址存储到q中</span></pre></td></tr></table></figure>* 使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">*p = 28;</span><span class="line">*q = &quot;hello&quot;;</span></pre></td></tr></table></figure>* 销毁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">delete p;</span><span class="line">delete [] q;</span></pre></td></tr></table></figure>3. 动态数组<pre><code>*   创建</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span></pre></td><td class="code"><pre><span class="line">int *p;</span><span class="line">p = new int[10];</span></pre></td></tr></table></figure>* 使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span></pre></td><td class="code"><pre><span class="line">* p = 25;   //25存到第一个存储空间里  = p[0] = 25；</span><span class="line">p ++;</span><span class="line">* p = 35;   //35存到第二个存储空间里  = p[1] = 35；</span></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Untitled Post - 2</title>
      <link href="/posts/2292025215.html"/>
      <url>/posts/2292025215.html</url>
      
        <content type="html"><![CDATA[<p><a href="http://123.206.64.174" target="_blank" rel="noopener">http://123.206.64.174</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ci  library</title>
      <link href="/posts/3358116184.html"/>
      <url>/posts/3358116184.html</url>
      
        <content type="html"><![CDATA[<p>调用时库名必须全部小写</p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成库的学习</title>
      <link href="/posts/2068027928.html"/>
      <url>/posts/2068027928.html</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a><a href="#区别" title="区别"></a>区别</h2><p>个人感觉集成库与其他的区别就是集成库同时包含了原理图库和PCB库，在换了开发环境（比如换电脑）之后不会出现各种元器件找不到的错误</p><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a><a href="#记录" title="记录"></a>记录</h2><ol><li><p>在PCB library和SCH library里面可以更改器件的名字</p></li><li><p>在model manager里面进行原理图元器件和PCB元器件的映射</p></li><li><p>board insight提供了PCB图观察的各种视图</p></li><li><p>同时布多条线，放置—–交互式多跟布线</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
            <tag> AD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新博客站的第一篇文章</title>
      <link href="/posts/677403736.html"/>
      <url>/posts/677403736.html</url>
      
        <content type="html"><![CDATA[<h2 id="百废待兴"><a href="#百废待兴" class="headerlink" title="百废待兴"></a><a href="#百废待兴" title="百废待兴"></a>百废待兴</h2><p>自从前一段时间开始搞电设,就已经没有精力去打理博客了,由于个人原因之前用的Wp,虽然还能跑起来但是已经不喜欢用了.国内对域名备案要求太高了,我的域名在撑过了两个春秋之后终于被封杀了,所以我现在WP 里面好多东西都是缺兵少将的.故过来搭一个git pages的博客,免去维护的时间成本</p><h2 id="移花接木"><a href="#移花接木" class="headerlink" title="移花接木"></a><a href="#移花接木" title="移花接木"></a>移花接木</h2><p>虽然搭建(ง •̀_•́)ง 了新的博客也不能放弃前面的学习资料,虽然已经有很多都已经没有记录了,但是之前已经记录的东西是万万不能放弃的,所以打算在这几天的颓废期里面把之前的博文再写一遍,以备后续查漏补缺.</p><h2 id="后悔莫及"><a href="#后悔莫及" class="headerlink" title="后悔莫及"></a><a href="#后悔莫及" title="后悔莫及"></a>后悔莫及</h2><p>前一段时间有很多次想写博客,但是由于域名被封,之前自用WP不能正常工作了,当时又比较忙没有抽出来事件维护博客真是有生以来最痛心的事情了.现在想想我的错误真的是不可思议,前一段时间接触的都是自己没有碰到过的全新的领域,然而毫无疑问的没有留下任何学习资料,我现在想起来自己真的是傻的发楞</p><h3 id="有时间继续更新"><a href="#有时间继续更新" class="headerlink" title="有时间继续更新"></a><a href="#有时间继续更新" title="有时间继续更新"></a>有时间继续更新</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 肺腑之言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu搭建交叉编译环境</title>
      <link href="/posts/2624931580.html"/>
      <url>/posts/2624931580.html</url>
      
        <content type="html"><![CDATA[<p>1.*** mixed implicit and normal rules: deprecated syntax<br>修改Makefile 452 修改后：<br>%config: scripts_basic outputmakefile FORCE</p>]]></content>
      
      
      
        <tags>
            
            <tag> 未分类 </tag>
            
            <tag> 交叉编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/posts/1368285564.html"/>
      <url>/posts/1368285564.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><span class="line">2</span><span class="line">3</span><span class="line">4</span><span class="line">5</span><span class="line">6</span><span class="line">7</span><span class="line">8</span><span class="line">9</span><span class="line">10</span><span class="line">11</span><span class="line">12</span><span class="line">13</span><span class="line">14</span><span class="line">15</span><span class="line">16</span><span class="line">17</span><span class="line">18</span><span class="line">19</span><span class="line">20</span><span class="line">21</span><span class="line">22</span></pre></td><td class="code"><pre><span class="line">git push origin 本地分支名:远程分支名</span><span class="line">git pull &lt;远程主机&gt; &lt;远程分支&gt;:&lt;本地分支&gt;</span><span class="line"></span><span class="line">git branch 不带参数：列出本地已经存在的分支，并且在当前分支的前面加“*”号标记</span><span class="line">git checkout BRANCH_ID 切换分支</span><span class="line">git branch -r 列出远程分支</span><span class="line">git branch -a</span><span class="line">git branch name 新建分支</span><span class="line">git branch -d | -D branchname 删除branchname分支</span><span class="line">git branch -d -r branchname 删除远程branchname分支</span><span class="line"></span><span class="line">git <span class="built_in">log</span></span><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><span class="line">git diff --name-only OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE</span><span class="line">git diff --name-status OLD_COMMIT_ID_HERE NEW_COMMIT_ID_HERE</span><span class="line"></span><span class="line">git checkout COMMIT_ID 版本回退</span><span class="line"></span><span class="line">git stash list 查看堆栈情况</span><span class="line">git stash 将当前工作压栈</span><span class="line">git stash pop stash<span class="variable">$&#123;id&#125;</span> 弹出工作栈</span><span class="line">git stash clear 清除栈</span></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
